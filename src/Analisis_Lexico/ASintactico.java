
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis_Lexico;

import java_cup.runtime.*;
import java.io.FileReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\006\000\002\002\010" +
    "\000\002\002\007\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\003\000\002\002\006\000\002\002\007\000\002\002" +
    "\006\000\002\002\007\000\002\002\007\000\002\002\006" +
    "\000\002\002\007\000\002\002\006\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\050\014" +
    "\000\002\050\010\000\002\050\013\000\002\050\013\000" +
    "\002\050\013\000\002\050\013\000\002\050\013\000\002" +
    "\050\013\000\002\050\013\000\002\050\013\000\002\050" +
    "\013\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\004\000\002\017\006" +
    "\000\002\017\006\000\002\017\007\000\002\017\007\000" +
    "\002\017\006\000\002\017\006\000\002\017\005\000\002" +
    "\017\007\000\002\017\006\000\002\017\007\000\002\017" +
    "\006\000\002\017\006\000\002\017\005\000\002\017\006" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\005\005\000\002\005\006\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\006" +
    "\000\002\005\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\027\007\000\002\027" +
    "\010\000\002\027\006\000\002\027\005\000\002\027\005" +
    "\000\002\027\006\000\002\027\004\000\002\027\006\000" +
    "\002\027\007\000\002\027\006\000\002\027\006\000\002" +
    "\027\007\000\002\027\005\000\002\027\007\000\002\030" +
    "\007\000\002\030\010\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\007\000" +
    "\002\030\007\000\002\030\007\000\002\030\007\000\002" +
    "\031\005\000\002\031\004\000\002\031\004\000\002\032" +
    "\006\000\002\032\007\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\006\000" +
    "\002\032\006\000\002\032\006\000\002\032\006\000\002" +
    "\033\006\000\002\033\007\000\002\033\007\000\002\033" +
    "\010\000\002\033\005\000\002\033\006\000\002\033\005" +
    "\000\002\033\006\000\002\033\005\000\002\033\006\000" +
    "\002\033\006\000\002\033\007\000\002\033\006\000\002" +
    "\033\007\000\002\033\006\000\002\033\007\000\002\034" +
    "\007\000\002\034\010\000\002\034\006\000\002\034\006" +
    "\000\002\034\006\000\002\034\006\000\002\034\007\000" +
    "\002\034\007\000\002\034\007\000\002\034\007\000\002" +
    "\035\007\000\002\035\010\000\002\035\006\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\035\007\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\045\003\000\002\045\003\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\006\000\002" +
    "\025\006\000\002\025\005\000\002\025\005\000\002\025" +
    "\006\000\002\025\006\000\002\025\004\000\002\025\004" +
    "\000\002\025\005\000\002\025\005\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\024\010\000\002" +
    "\024\011\000\002\024\012\000\002\024\007\000\002\024" +
    "\007\000\002\024\007\000\002\024\007\000\002\024\011" +
    "\000\002\024\012\000\002\024\011\000\002\024\011\000" +
    "\002\024\011\000\002\024\011\000\002\007\011\000\002" +
    "\007\012\000\002\007\016\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\011" +
    "\000\002\007\011\000\002\007\011\000\002\007\011\000" +
    "\002\007\015\000\002\007\015\000\002\007\015\000\002" +
    "\007\015\000\002\007\015\000\002\046\016\000\002\046" +
    "\015\000\002\046\015\000\002\046\015\000\002\046\015" +
    "\000\002\046\015\000\002\046\015\000\002\046\015\000" +
    "\002\046\014\000\002\046\014\000\002\046\014\000\002" +
    "\046\014\000\002\046\014\000\002\046\014\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\003" +
    "\000\002\010\006\000\002\010\006\000\002\044\005\000" +
    "\002\044\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\011\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\012\005\000\002\012\005\000\002\012\006\000\002" +
    "\012\006\000\002\053\003\000\002\053\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0253\000\066\003\031\032\010\033\040\034\020\036" +
    "\014\037\055\041\022\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\032\056" +
    "\011\057\051\060\046\061\034\062\060\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uff00\031\uff00\033" +
    "\uff00\036\uff00\037\uff00\001\002\000\014\002\uffd8\031\uffd8" +
    "\033\uffd8\036\uffd8\037\uffd8\001\002\000\016\032\u0220\057" +
    "\u0222\061\u0225\064\012\065\u021f\067\u0221\001\002\000\004" +
    "\032\u0219\001\002\000\046\002\ufff9\033\u0214\057\110\065" +
    "\103\072\106\073\105\074\111\075\104\076\077\077\107" +
    "\100\100\101\113\102\074\103\112\104\073\105\076\106" +
    "\102\107\114\001\002\000\042\032\u0205\053\u013c\054\u0136" +
    "\055\u0138\057\u0145\060\u0139\061\u0135\065\u015c\067\u015b\072" +
    "\u0132\073\u0124\074\u011c\075\u0121\076\u012e\077\u0123\100\u012d" +
    "\001\002\000\030\003\uffa3\034\uffa3\035\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\065\uffa3\067\uffa3" +
    "\001\002\000\026\006\142\032\u01d0\053\141\054\126\055" +
    "\127\057\140\060\130\061\125\065\134\067\133\001\002" +
    "\000\060\002\ufff8\003\031\032\067\034\020\041\022\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\032\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\004" +
    "\002\u01ce\001\002\000\014\002\uffd7\031\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\001\002\000\014\002\uff01\031\uff01\033\uff01" +
    "\036\uff01\037\uff01\001\002\000\004\035\u01c6\001\002\000" +
    "\020\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\032\uffea" +
    "\065\u016b\001\002\000\026\006\142\032\u01a8\053\141\054" +
    "\126\055\127\057\140\060\130\061\125\065\134\067\133" +
    "\001\002\000\014\002\uff6a\031\uff6a\033\uff6a\036\uff6a\037" +
    "\uff6a\001\002\000\014\002\uff68\031\uff68\033\uff68\036\uff68" +
    "\037\uff68\001\002\000\014\002\uff65\031\uff65\033\uff65\036" +
    "\uff65\037\uff65\001\002\000\006\032\u019e\033\u019f\001\002" +
    "\000\006\040\u019c\065\u019b\001\002\000\076\002\uff6c\007" +
    "\u015d\011\u0160\013\u015e\014\u015f\015\u0122\016\u011e\017\u011b" +
    "\020\u0130\021\u0129\031\uff6c\032\uffec\033\uff6c\036\uff6c\037" +
    "\uff6c\053\u013c\054\u0136\055\u0138\057\u0145\060\u0139\061\u0135" +
    "\065\u015c\067\u015b\072\u0132\073\u0124\074\u011c\075\u0121\076" +
    "\u012e\077\u0123\100\u012d\001\002\000\056\003\031\032\067" +
    "\034\020\041\022\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\032\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\016\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\032\uffe7\001\002\000\014\002\uffdb\031\uffdb\033" +
    "\uffdb\036\uffdb\037\uffdb\001\002\000\044\003\uffa1\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\032\uffe9\034\uffa1\035" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\065\uffa1\067\uffa1\001\002\000\014\002\uff02\031\uff02\033" +
    "\uff02\036\uff02\037\uff02\001\002\000\004\037\u0199\001\002" +
    "\000\010\032\u0184\033\u0186\067\u0185\001\002\000\004\002" +
    "\ufffa\001\002\000\014\002\uff69\031\uff69\033\uff69\036\uff69" +
    "\037\uff69\001\002\000\014\002\uff6b\031\uff6b\033\uff6b\036" +
    "\uff6b\037\uff6b\001\002\000\014\002\uffd9\031\uffd9\033\uffd9" +
    "\036\uffd9\037\uffd9\001\002\000\014\015\u017d\016\u011e\017" +
    "\u011b\020\u0130\021\u0129\001\002\000\046\032\u016f\033\u0171" +
    "\057\110\065\103\072\106\073\105\074\111\075\104\076" +
    "\077\077\107\100\100\101\113\102\074\103\112\104\073" +
    "\105\076\106\102\107\114\001\002\000\016\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\032\uffe8\001\002\000\030" +
    "\003\031\034\307\035\306\053\310\054\301\055\302\057" +
    "\311\060\303\061\277\065\305\067\304\001\002\000\006" +
    "\032\260\067\261\001\002\000\046\003\uffa2\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\032\uffeb\033\255\034\uffa2" +
    "\035\uffa2\053\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\065\uffa2\067\uffa2\001\002\000\014\002\uff66\031\uff66" +
    "\033\uff66\036\uff66\037\uff66\001\002\000\016\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\032\uffe5\001\002\000\006" +
    "\032\236\067\237\001\002\000\004\002\ufff5\001\002\000" +
    "\016\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\032\uffe6" +
    "\001\002\000\014\002\uffda\031\uffda\033\uffda\036\uffda\037" +
    "\uffda\001\002\000\006\032\063\033\064\001\002\000\014" +
    "\002\uff67\031\uff67\033\uff67\036\uff67\037\uff67\001\002\000" +
    "\014\002\uffd6\031\uffd6\033\uffd6\036\uffd6\037\uffd6\001\002" +
    "\000\006\033\223\036\222\001\002\000\004\036\065\001" +
    "\002\000\060\003\031\032\067\034\020\037\071\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\004\032\124\001\002\000\044\033\101\057\110\065\103" +
    "\072\106\073\105\074\111\075\104\076\077\077\107\100" +
    "\100\101\113\102\074\103\112\104\073\105\076\106\102" +
    "\107\114\001\002\000\004\037\072\001\002\000\004\002" +
    "\ufff2\001\002\000\004\002\ufff1\001\002\000\006\033\uff85" +
    "\040\uff85\001\002\000\006\033\uff87\040\uff87\001\002\000" +
    "\006\033\117\040\120\001\002\000\006\033\uff84\040\uff84" +
    "\001\002\000\006\033\uff8e\040\uff8e\001\002\000\006\033" +
    "\uff8c\040\uff8c\001\002\000\004\040\115\001\002\000\006" +
    "\033\uff83\040\uff83\001\002\000\006\033\uff89\040\uff89\001" +
    "\002\000\006\033\uff8f\040\uff8f\001\002\000\006\033\uff91" +
    "\040\uff91\001\002\000\006\033\uff8b\040\uff8b\001\002\000" +
    "\006\033\uff8d\040\uff8d\001\002\000\006\033\uff8a\040\uff8a" +
    "\001\002\000\006\033\uff90\040\uff90\001\002\000\006\033" +
    "\uff86\040\uff86\001\002\000\006\033\uff88\040\uff88\001\002" +
    "\000\006\033\uff82\040\uff82\001\002\000\070\002\uff47\003" +
    "\031\031\uff47\032\067\033\uff47\034\020\036\uff47\037\uff47" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff43\031\uff43\033\uff43\036\uff43\037\uff43" +
    "\001\002\000\004\040\122\001\002\000\070\002\uff60\003" +
    "\031\031\uff60\032\067\033\uff60\034\020\036\uff60\037\uff60" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff5a\031\uff5a\033\uff5a\036\uff5a\037\uff5a" +
    "\001\002\000\070\002\uff62\003\031\031\uff62\032\067\033" +
    "\uff62\034\020\036\uff62\037\uff62\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff5c\031" +
    "\uff5c\033\uff5c\036\uff5c\037\uff5c\001\002\000\024\006\142" +
    "\053\141\054\126\055\127\057\140\060\130\061\125\065" +
    "\134\067\133\001\002\000\032\004\ufec8\005\ufec8\015\ufec8" +
    "\022\ufec8\023\ufec8\024\ufec8\025\ufec8\026\ufec8\027\ufec8\031" +
    "\ufec8\033\ufec8\036\ufec8\001\002\000\032\004\ufeb8\005\ufeb8" +
    "\015\ufeca\022\ufeca\023\ufeca\024\ufeca\025\ufeca\026\ufeca\027" +
    "\ufeca\031\ufeb8\033\ufeb8\036\ufeb8\001\002\000\032\004\ufec6" +
    "\005\ufec6\015\ufec6\022\ufec6\023\ufec6\024\ufec6\025\ufec6\026" +
    "\ufec6\027\ufec6\031\ufec6\033\ufec6\036\ufec6\001\002\000\032" +
    "\004\ufec5\005\ufec5\015\ufec5\022\ufec5\023\ufec5\024\ufec5\025" +
    "\ufec5\026\ufec5\027\ufec5\031\ufec5\033\ufec5\036\ufec5\001\002" +
    "\000\010\031\ufed4\033\ufed4\036\ufed4\001\002\000\020\015" +
    "\217\022\210\023\211\024\215\025\214\026\213\027\216" +
    "\001\002\000\032\004\ufec9\005\ufec9\015\ufec9\022\ufec9\023" +
    "\ufec9\024\ufec9\025\ufec9\026\ufec9\027\ufec9\031\ufec9\033\ufec9" +
    "\036\ufec9\001\002\000\042\004\ufeba\005\ufeba\006\163\015" +
    "\ufecc\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026\ufecc\027\ufecc" +
    "\031\ufeba\033\ufeba\036\ufeba\053\156\054\155\065\153\001" +
    "\002\000\014\004\171\005\172\031\ufed1\033\ufed1\036\ufed1" +
    "\001\002\000\004\033\200\001\002\000\010\031\ufed3\033" +
    "\ufed3\036\ufed3\001\002\000\032\004\ufec7\005\ufec7\015\ufec7" +
    "\022\ufec7\023\ufec7\024\ufec7\025\ufec7\026\ufec7\027\ufec7\031" +
    "\ufec7\033\ufec7\036\ufec7\001\002\000\032\004\ufeb9\005\ufeb9" +
    "\015\ufecb\022\ufecb\023\ufecb\024\ufecb\025\ufecb\026\ufecb\027" +
    "\ufecb\031\ufeb9\033\ufeb9\036\ufeb9\001\002\000\012\032\154" +
    "\053\156\054\155\065\153\001\002\000\014\004\144\005" +
    "\146\031\ufec4\033\ufec4\036\ufec4\001\002\000\022\053\ufebc" +
    "\054\ufebc\055\ufebc\057\ufebc\060\ufebc\061\ufebc\065\ufebc\067" +
    "\ufebc\001\002\000\022\053\151\054\147\055\127\057\140" +
    "\060\130\061\125\065\150\067\133\001\002\000\022\053" +
    "\ufebb\054\ufebb\055\ufebb\057\ufebb\060\ufebb\061\ufebb\065\ufebb" +
    "\067\ufebb\001\002\000\032\004\ufeca\005\ufeca\015\ufeca\022" +
    "\ufeca\023\ufeca\024\ufeca\025\ufeca\026\ufeca\027\ufeca\031\ufeca" +
    "\033\ufeca\036\ufeca\001\002\000\032\004\ufecc\005\ufecc\015" +
    "\ufecc\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026\ufecc\027\ufecc" +
    "\031\ufecc\033\ufecc\036\ufecc\001\002\000\032\004\ufecb\005" +
    "\ufecb\015\ufecb\022\ufecb\023\ufecb\024\ufecb\025\ufecb\026\ufecb" +
    "\027\ufecb\031\ufecb\033\ufecb\036\ufecb\001\002\000\010\031" +
    "\ufed2\033\ufed2\036\ufed2\001\002\000\016\004\ufeba\005\ufeba" +
    "\031\ufeba\033\ufeba\036\ufeba\064\ufeba\001\002\000\024\006" +
    "\163\053\141\054\126\055\127\057\140\060\130\061\125" +
    "\065\161\067\133\001\002\000\016\004\ufeb8\005\ufeb8\031" +
    "\ufeb8\033\ufeb8\036\ufeb8\064\ufeb8\001\002\000\016\004\ufeb9" +
    "\005\ufeb9\031\ufeb9\033\ufeb9\036\ufeb9\064\ufeb9\001\002\000" +
    "\012\031\ufec1\033\ufec1\036\ufec1\064\ufec1\001\002\000\004" +
    "\033\177\001\002\000\026\004\ufeba\005\ufeba\015\ufecc\022" +
    "\ufecc\023\ufecc\024\ufecc\025\ufecc\026\ufecc\027\ufecc\033\170" +
    "\001\002\000\006\004\171\005\172\001\002\000\012\032" +
    "\166\053\156\054\155\065\153\001\002\000\004\033\165" +
    "\001\002\000\010\031\ufecf\033\ufecf\036\ufecf\001\002\000" +
    "\012\006\163\053\156\054\155\065\167\001\002\000\010" +
    "\004\ufeba\005\ufeba\033\170\001\002\000\012\031\ufebd\033" +
    "\ufebd\036\ufebd\064\ufebd\001\002\000\012\006\163\053\156" +
    "\054\155\065\153\001\002\000\012\006\163\053\156\054" +
    "\155\065\153\001\002\000\012\031\ufebf\033\ufebf\036\ufebf" +
    "\064\ufebf\001\002\000\016\004\171\005\172\031\ufec2\033" +
    "\ufec2\036\ufec2\064\ufec2\001\002\000\012\031\ufec0\033\ufec0" +
    "\036\ufec0\064\ufec0\001\002\000\016\004\171\005\172\031" +
    "\ufec3\033\ufec3\036\ufec3\064\ufec3\001\002\000\012\031\ufebe" +
    "\033\ufebe\036\ufebe\064\ufebe\001\002\000\004\036\201\001" +
    "\002\000\056\003\031\032\067\034\020\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\037" +
    "\203\001\002\000\070\002\ufef8\003\031\031\ufef8\032\067" +
    "\033\ufef8\034\020\036\ufef8\037\ufef8\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufef7" +
    "\031\ufef7\033\ufef7\036\ufef7\037\ufef7\001\002\000\004\064" +
    "\206\001\002\000\056\003\031\032\067\034\020\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\010\031\ufed0\033\ufed0\036\ufed0\001\002\000\022\053\ufeb7" +
    "\054\ufeb7\055\ufeb7\057\ufeb7\060\ufeb7\061\ufeb7\065\ufeb7\067" +
    "\ufeb7\001\002\000\022\053\ufeb6\054\ufeb6\055\ufeb6\057\ufeb6" +
    "\060\ufeb6\061\ufeb6\065\ufeb6\067\ufeb6\001\002\000\022\053" +
    "\151\054\147\055\127\057\140\060\130\061\125\065\150" +
    "\067\133\001\002\000\022\053\ufeb3\054\ufeb3\055\ufeb3\057" +
    "\ufeb3\060\ufeb3\061\ufeb3\065\ufeb3\067\ufeb3\001\002\000\022" +
    "\053\ufeb5\054\ufeb5\055\ufeb5\057\ufeb5\060\ufeb5\061\ufeb5\065" +
    "\ufeb5\067\ufeb5\001\002\000\022\053\ufeb4\054\ufeb4\055\ufeb4" +
    "\057\ufeb4\060\ufeb4\061\ufeb4\065\ufeb4\067\ufeb4\001\002\000" +
    "\022\053\ufeb2\054\ufeb2\055\ufeb2\057\ufeb2\060\ufeb2\061\ufeb2" +
    "\065\ufeb2\067\ufeb2\001\002\000\022\053\ufeb1\054\ufeb1\055" +
    "\ufeb1\057\ufeb1\060\ufeb1\061\ufeb1\065\ufeb1\067\ufeb1\001\002" +
    "\000\032\004\ufece\005\ufece\015\217\022\210\023\211\024" +
    "\215\025\214\026\213\027\216\031\ufece\033\ufece\036\ufece" +
    "\001\002\000\014\004\ufecd\005\ufecd\031\ufecd\033\ufecd\036" +
    "\ufecd\001\002\000\060\003\031\032\067\034\020\037\234" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\062\003\031\032\067\034\020\036\224\037\226" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\062\002\ufffd\003\031\032\067\034\020\037\231" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\037\227\001\002\000\004\002\uffed\001\002" +
    "\000\004\002\uffee\001\002\000\006\002\ufffe\037\232\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "\000\004\037\235\001\002\000\004\002\uffef\001\002\000" +
    "\004\002\ufff0\001\002\000\006\033\244\067\243\001\002" +
    "\000\004\033\240\001\002\000\004\040\241\001\002\000" +
    "\070\002\uff2a\003\031\031\uff2a\032\067\033\uff2a\034\020" +
    "\036\uff2a\037\uff2a\041\022\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uff26\031\uff26\033\uff26" +
    "\036\uff26\037\uff26\001\002\000\006\033\247\040\250\001" +
    "\002\000\004\040\245\001\002\000\070\002\uff2c\003\031" +
    "\031\uff2c\032\067\033\uff2c\034\020\036\uff2c\037\uff2c\041" +
    "\022\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\032\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff28\031\uff28\033\uff28\036\uff28\037\uff28\001" +
    "\002\000\072\002\uff2d\003\031\031\uff2d\032\067\033\uff2d" +
    "\034\020\036\uff2d\037\uff2d\040\252\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\070\002\uff2b" +
    "\003\031\031\uff2b\032\067\033\uff2b\034\020\036\uff2b\037" +
    "\uff2b\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff27\031\uff27\033\uff27\036\uff27\037" +
    "\uff27\001\002\000\070\002\uff2f\003\031\031\uff2f\032\067" +
    "\033\uff2f\034\020\036\uff2f\037\uff2f\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uff29" +
    "\031\uff29\033\uff29\036\uff29\037\uff29\001\002\000\014\002" +
    "\uff2e\031\uff2e\033\uff2e\036\uff2e\037\uff2e\001\002\000\004" +
    "\040\256\001\002\000\070\002\uff61\003\031\031\uff61\032" +
    "\067\033\uff61\034\020\036\uff61\037\uff61\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff5b\031\uff5b\033\uff5b\036\uff5b\037\uff5b\001\002\000\006" +
    "\033\266\067\265\001\002\000\004\033\262\001\002\000" +
    "\004\040\263\001\002\000\070\002\uff20\003\031\031\uff20" +
    "\032\067\033\uff20\034\020\036\uff20\037\uff20\041\022\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\032\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uff1c\031\uff1c\033\uff1c\036\uff1c\037\uff1c\001\002\000" +
    "\006\033\271\040\272\001\002\000\004\040\267\001\002" +
    "\000\070\002\uff22\003\031\031\uff22\032\067\033\uff22\034" +
    "\020\036\uff22\037\uff22\041\022\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\032\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uff1e\031\uff1e\033" +
    "\uff1e\036\uff1e\037\uff1e\001\002\000\072\002\uff23\003\031" +
    "\031\uff23\032\067\033\uff23\034\020\036\uff23\037\uff23\040" +
    "\274\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\070\002\uff21\003\031\031\uff21\032\067\033" +
    "\uff21\034\020\036\uff21\037\uff21\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff1d\031" +
    "\uff1d\033\uff1d\036\uff1d\037\uff1d\001\002\000\070\002\uff25" +
    "\003\031\031\uff25\032\067\033\uff25\034\020\036\uff25\037" +
    "\uff25\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff1f\031\uff1f\033\uff1f\036\uff1f\037" +
    "\uff1f\001\002\000\014\002\uff24\031\uff24\033\uff24\036\uff24" +
    "\037\uff24\001\002\000\014\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\001\002\000\014\002\uff71\031\uff71\033\uff71" +
    "\036\uff71\037\uff71\001\002\000\014\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\001\002\000\014\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\001\002\000\014\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\001\002\000\014\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\001\002\000\122\002" +
    "\uff70\003\031\015\u0122\016\u011e\017\u011b\020\u0130\021\u0129" +
    "\031\uff70\032\067\033\uff70\034\020\036\uff70\037\uff70\040" +
    "\u011d\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\u0131\054\u012f\055\u0125\056\011\057" +
    "\u012a\060\u0128\061\u0126\064\012\065\u0120\067\u011f\070\006" +
    "\072\u0132\073\u0124\074\u011c\075\u0121\076\u012e\077\u0123\100" +
    "\u012d\001\002\000\004\065\u0114\001\002\000\006\035\313" +
    "\065\312\001\002\000\014\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\001\002\000\014\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\001\002\000\004\015\u010e\001\002\000" +
    "\006\015\315\065\314\001\002\000\010\015\371\034\367" +
    "\040\370\001\002\000\004\034\316\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\010\031\365\035\uffc9\040\uffc9\001\002\000" +
    "\060\031\uff79\035\uff79\040\uff79\053\uff79\054\uff79\057\uff79" +
    "\061\uff79\065\uff79\067\uff79\072\uff79\073\uff79\074\uff79\075" +
    "\uff79\076\uff79\077\uff79\100\uff79\101\uff79\102\uff79\103\uff79" +
    "\104\uff79\105\uff79\106\uff79\107\uff79\001\002\000\060\031" +
    "\uff77\035\uff77\040\uff77\053\uff77\054\uff77\057\uff77\061\uff77" +
    "\065\uff77\067\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076" +
    "\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77" +
    "\105\uff77\106\uff77\107\uff77\001\002\000\010\031\363\035" +
    "\uffc6\040\uffc6\001\002\000\060\031\uff76\035\uff76\040\uff76" +
    "\053\uff76\054\uff76\057\uff76\061\uff76\065\uff76\067\uff76\072" +
    "\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76" +
    "\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107" +
    "\uff76\001\002\000\060\031\uff7e\035\uff7e\040\uff7e\053\uff7e" +
    "\054\uff7e\057\uff7e\061\uff7e\065\uff7e\067\uff7e\072\uff7e\073" +
    "\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e" +
    "\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e\001" +
    "\002\000\060\031\uff7c\035\uff7c\040\uff7c\053\uff7c\054\uff7c" +
    "\057\uff7c\061\uff7c\065\uff7c\067\uff7c\072\uff7c\073\uff7c\074" +
    "\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c" +
    "\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\001\002\000" +
    "\010\031\361\035\uffc8\040\uffc8\001\002\000\010\031\357" +
    "\035\uffca\040\uffca\001\002\000\060\031\uff75\035\uff75\040" +
    "\uff75\053\uff75\054\uff75\057\uff75\061\uff75\065\uff75\067\uff75" +
    "\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100" +
    "\uff75\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75" +
    "\107\uff75\001\002\000\060\031\uff7f\035\uff7f\040\uff7f\053" +
    "\uff7f\054\uff7f\057\uff7f\061\uff7f\065\uff7f\067\uff7f\072\uff7f" +
    "\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101" +
    "\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f" +
    "\001\002\000\060\031\uff81\035\uff81\040\uff81\053\uff81\054" +
    "\uff81\057\uff81\061\uff81\065\uff81\067\uff81\072\uff81\073\uff81" +
    "\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102" +
    "\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\001\002" +
    "\000\060\031\uff7b\035\uff7b\040\uff7b\053\uff7b\054\uff7b\057" +
    "\uff7b\061\uff7b\065\uff7b\067\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b\001\002\000\060" +
    "\031\uff7d\035\uff7d\040\uff7d\053\uff7d\054\uff7d\057\uff7d\061" +
    "\uff7d\065\uff7d\067\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104" +
    "\uff7d\105\uff7d\106\uff7d\107\uff7d\001\002\000\010\031\355" +
    "\035\uffc7\040\uffc7\001\002\000\010\031\353\035\uffc5\040" +
    "\uffc5\001\002\000\004\035\350\001\002\000\060\031\uff80" +
    "\035\uff80\040\uff80\053\uff80\054\uff80\057\uff80\061\uff80\065" +
    "\uff80\067\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80" +
    "\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105" +
    "\uff80\106\uff80\107\uff80\001\002\000\060\031\uff78\035\uff78" +
    "\040\uff78\053\uff78\054\uff78\057\uff78\061\uff78\065\uff78\067" +
    "\uff78\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78" +
    "\100\uff78\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106" +
    "\uff78\107\uff78\001\002\000\060\031\uff7a\035\uff7a\040\uff7a" +
    "\053\uff7a\054\uff7a\057\uff7a\061\uff7a\065\uff7a\067\uff7a\072" +
    "\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a" +
    "\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107" +
    "\uff7a\001\002\000\060\031\345\035\uffc4\040\uffc4\053\326" +
    "\054\335\057\336\061\322\065\327\067\317\072\333\073" +
    "\332\074\340\075\331\076\324\077\334\100\325\101\342" +
    "\102\320\103\341\104\321\105\323\106\330\107\344\001" +
    "\002\000\060\031\uff74\035\uff74\040\uff74\053\uff74\054\uff74" +
    "\057\uff74\061\uff74\065\uff74\067\uff74\072\uff74\073\uff74\074" +
    "\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\102\uff74" +
    "\103\uff74\104\uff74\105\uff74\106\uff74\107\uff74\001\002\000" +
    "\052\053\326\054\335\057\336\061\322\065\327\067\317" +
    "\072\333\073\332\074\340\075\331\076\324\077\334\100" +
    "\325\101\342\102\320\103\341\104\321\105\323\106\330" +
    "\107\344\001\002\000\006\035\uffbc\040\uffbc\001\002\000" +
    "\006\035\uffbd\040\uffbd\001\002\000\004\040\351\001\002" +
    "\000\056\003\031\032\067\034\020\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uffd0" +
    "\031\uffd0\033\uffd0\036\uffd0\037\uffd0\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\006\035\uffbe\040\uffbe\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\006\035\uffc0\040\uffc0\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\006\035\uffc3\040\uffc3\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\006\035\uffc1\040\uffc1\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\006\035\uffbf\040\uffbf\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\006\035\uffc2\040\uffc2\001\002\000\052\053" +
    "\326\054\335\057\336\061\322\065\327\067\317\072\333" +
    "\073\332\074\340\075\331\076\324\077\334\100\325\101" +
    "\342\102\320\103\341\104\321\105\323\106\330\107\344" +
    "\001\002\000\056\003\031\032\067\034\020\041\022\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\032\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\054" +
    "\034\372\053\326\054\335\057\336\061\322\065\327\067" +
    "\317\072\333\073\332\074\340\075\331\076\324\077\334" +
    "\100\325\101\342\102\320\103\341\104\321\105\323\106" +
    "\330\107\344\001\002\000\054\035\377\053\326\054\335" +
    "\057\336\061\322\065\327\067\317\072\333\073\332\074" +
    "\340\075\331\076\324\077\334\100\325\101\342\102\320" +
    "\103\341\104\321\105\323\106\330\107\344\001\002\000" +
    "\004\035\374\001\002\000\004\040\375\001\002\000\056" +
    "\003\031\032\067\034\020\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\uffce\031\uffce" +
    "\033\uffce\036\uffce\037\uffce\001\002\000\004\040\u0107\001" +
    "\002\000\006\035\u0101\040\u0102\001\002\000\060\003\031" +
    "\032\067\034\020\040\u0104\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\056\003\031\032\067" +
    "\034\020\041\022\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\032\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uffcc\031\uffcc\033\uffcc\036\uffcc" +
    "\037\uffcc\001\002\000\056\003\031\032\067\034\020\041" +
    "\022\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\032\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uffcb\031\uffcb\033\uffcb\036\uffcb\037\uffcb\001" +
    "\002\000\014\002\uffd5\031\uffd5\033\uffd5\036\uffd5\037\uffd5" +
    "\001\002\000\056\003\031\032\067\034\020\041\022\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\032\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uffcd\031\uffcd\033\uffcd\036\uffcd\037\uffcd\001\002\000" +
    "\014\002\uffd4\031\uffd4\033\uffd4\036\uffd4\037\uffd4\001\002" +
    "\000\004\035\u010b\001\002\000\004\040\u010c\001\002\000" +
    "\056\003\031\032\067\034\020\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uffcf\031" +
    "\uffcf\033\uffcf\036\uffcf\037\uffcf\001\002\000\004\034\u010f" +
    "\001\002\000\052\053\326\054\335\057\336\061\322\065" +
    "\327\067\317\072\333\073\332\074\340\075\331\076\324" +
    "\077\334\100\325\101\342\102\320\103\341\104\321\105" +
    "\323\106\330\107\344\001\002\000\004\035\u0111\001\002" +
    "\000\004\040\u0112\001\002\000\056\003\031\032\067\034" +
    "\020\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uffd1\031\uffd1\033\uffd1\036\uffd1\037" +
    "\uffd1\001\002\000\004\015\u0115\001\002\000\004\034\u0116" +
    "\001\002\000\052\053\326\054\335\057\336\061\322\065" +
    "\327\067\317\072\333\073\332\074\340\075\331\076\324" +
    "\077\334\100\325\101\342\102\320\103\341\104\321\105" +
    "\323\106\330\107\344\001\002\000\004\035\u0118\001\002" +
    "\000\004\040\u0119\001\002\000\056\003\031\032\067\034" +
    "\020\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uffd2\031\uffd2\033\uffd2\036\uffd2\037" +
    "\uffd2\001\002\000\040\053\uffa9\054\uffa9\055\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\065\uffa9\067\uffa9\072\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\001\002\000\072" +
    "\002\uff96\003\uff96\031\uff96\032\uff96\033\uff96\034\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\045\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\060\uff96\061\uff96\064\uff96\065\uff96" +
    "\067\uff96\070\uff96\001\002\000\070\002\uff73\003\031\031" +
    "\uff73\032\067\033\uff73\034\020\036\uff73\037\uff73\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\040\053\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\065\uffaa\067\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076" +
    "\uffaa\077\uffaa\100\uffaa\001\002\000\022\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\032\uffea\040\uff9f\065\u016b\001" +
    "\002\000\100\002\uff6c\007\u015d\011\u0160\013\u015e\014\u015f" +
    "\015\u0122\016\u011e\017\u011b\020\u0130\021\u0129\031\uff6c\032" +
    "\uffec\033\uff6c\036\uff6c\037\uff6c\040\uffa0\053\u013c\054\u0136" +
    "\055\u0138\057\u0145\060\u0139\061\u0135\065\u015c\067\u015b\072" +
    "\u0132\073\u0124\074\u011c\075\u0121\076\u012e\077\u0123\100\u012d" +
    "\001\002\000\072\002\uff95\003\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\045\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\064\uff95\065\uff95\067\uff95\070\uff95\001\002\000\042\040" +
    "\u0147\053\u013c\054\u0136\055\u0138\057\u0145\060\u0139\061\u0135" +
    "\065\u0143\067\u0141\072\u0132\073\u0124\074\u011c\075\u0121\076" +
    "\u012e\077\u0123\100\u012d\001\002\000\072\002\uff93\003\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\036\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\045\uff93\047\uff93\050\uff93" +
    "\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\064\uff93\065\uff93\067\uff93\070\uff93" +
    "\001\002\000\072\002\uff97\003\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\045\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\064\uff97\065\uff97\067\uff97\070\uff97\001\002\000\020\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\032\uffe7\040\uff99" +
    "\001\002\000\046\003\uffa1\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\032\uffe9\034\uffa1\035\uffa1\040\uff9c\053\uffa1" +
    "\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\065\uffa1\067" +
    "\uffa1\001\002\000\014\002\uff6f\031\uff6f\033\uff6f\036\uff6f" +
    "\037\uff6f\001\002\000\020\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\032\uffe8\040\uff9a\001\002\000\040\053\uffa7" +
    "\054\uffa7\055\uffa7\057\uffa7\060\uffa7\061\uffa7\065\uffa7\067" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\100\uffa7\001\002\000\050\003\uffa2\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\032\uffeb\033\255\034\uffa2\035\uffa2" +
    "\040\uff9b\053\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\065\uffa2\067\uffa2\001\002\000\040\053\u013c\054\u0136" +
    "\055\u0138\057\u013d\060\u0139\061\u0135\065\u013b\067\u013a\072" +
    "\u0132\073\u0124\074\u011c\075\u0121\076\u012e\077\u0123\100\u012d" +
    "\001\002\000\004\040\u0133\001\002\000\072\002\uff92\003" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\036\uff92\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\043\uff92\045\uff92\047\uff92\050" +
    "\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\061\uff92\064\uff92\065\uff92\067\uff92\070" +
    "\uff92\001\002\000\072\002\uff94\003\uff94\031\uff94\032\uff94" +
    "\033\uff94\034\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\045\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\064\uff94\065\uff94\067\uff94\070\uff94\001\002\000\020" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\032\uffe5\040" +
    "\uff9d\001\002\000\040\053\uffa8\054\uffa8\055\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\065\uffa8\067\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\001\002\000\020" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\032\uffe6\040" +
    "\uff9e\001\002\000\072\002\uff98\003\uff98\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\043\uff98\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061" +
    "\uff98\064\uff98\065\uff98\067\uff98\070\uff98\001\002\000\070" +
    "\002\uffaf\003\031\031\uffaf\032\067\033\uffaf\034\020\036" +
    "\uffaf\037\uffaf\041\022\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\032\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uffb0\031\uffb0\033\uffb0\036" +
    "\uffb0\037\uffb0\001\002\000\072\002\uff9c\003\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\045\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\064\uff9c\065\uff9c\067\uff9c\070\uff9c\001\002" +
    "\000\072\002\uff9d\003\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\045\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\064\uff9d" +
    "\065\uff9d\067\uff9d\070\uff9d\001\002\000\004\040\u013f\001" +
    "\002\000\072\002\uff99\003\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\045\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\064" +
    "\uff99\065\uff99\067\uff99\070\uff99\001\002\000\072\002\uff9a" +
    "\003\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\045\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\064\uff9a\065\uff9a\067\uff9a" +
    "\070\uff9a\001\002\000\016\002\uff9f\031\uff9f\033\uff9f\036" +
    "\uff9f\037\uff9f\040\uffa5\001\002\000\016\002\uffa0\031\uffa0" +
    "\033\uffa0\036\uffa0\037\uffa0\040\uffa6\001\002\000\072\002" +
    "\uff9e\003\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\045\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\064\uff9e\065\uff9e\067" +
    "\uff9e\070\uff9e\001\002\000\016\002\uff9b\031\uff9b\033\uff9b" +
    "\036\uff9b\037\uff9b\040\uffa4\001\002\000\014\002\uffac\031" +
    "\uffac\033\uffac\036\uffac\037\uffac\001\002\000\070\002\uffba" +
    "\003\031\031\uffba\032\067\033\uffba\034\020\036\uffba\037" +
    "\uffba\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uffb8\031\uffb8\033\uffb8\036\uffb8\037" +
    "\uffb8\001\002\000\102\002\uff9f\003\uff9f\007\uff17\010\uff17" +
    "\011\uff17\012\uff17\031\uff9f\032\uff9f\033\uff9f\034\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\045\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\064\uff9f\065\uff9f" +
    "\067\uff9f\070\uff9f\001\002\000\004\040\u015a\001\002\000" +
    "\102\002\uffa0\003\uffa0\007\uff18\010\uff18\011\uff18\012\uff18" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\045\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\064\uffa0\065\uffa0\067\uffa0\070\uffa0" +
    "\001\002\000\012\007\u014d\010\u014e\011\u014c\012\u014f\001" +
    "\002\000\072\002\uff9b\003\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\064" +
    "\uff9b\065\uff9b\067\uff9b\070\uff9b\001\002\000\072\002\uffad" +
    "\003\031\031\uffad\032\067\033\uffad\034\020\036\uffad\037" +
    "\uffad\040\u0149\041\022\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\032\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\070\002\uffb5\003\031\031\uffb5\032" +
    "\067\033\uffb5\034\020\036\uffb5\037\uffb5\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uffb6\031\uffb6\033\uffb6\036\uffb6\037\uffb6\001\002\000\070" +
    "\002\uffbb\003\031\031\uffbb\032\067\033\uffbb\034\020\036" +
    "\uffbb\037\uffbb\041\022\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\032\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uffae\031\uffae\033\uffae\036" +
    "\uffae\037\uffae\001\002\000\014\002\uffb9\031\uffb9\033\uffb9" +
    "\036\uffb9\037\uffb9\001\002\000\006\065\u0150\067\u0151\001" +
    "\002\000\006\065\u0150\067\u0151\001\002\000\006\065\u0150" +
    "\067\u0151\001\002\000\006\065\u0150\067\u0151\001\002\000" +
    "\014\007\uff18\010\uff18\011\uff18\012\uff18\040\uff18\001\002" +
    "\000\014\007\uff17\010\uff17\011\uff17\012\uff17\040\uff17\001" +
    "\002\000\014\007\u014d\010\u014e\011\u014c\012\u014f\040\uff13" +
    "\001\002\000\004\040\uff0f\001\002\000\014\007\u014d\010" +
    "\u014e\011\u014c\012\u014f\040\uff14\001\002\000\004\040\uff10" +
    "\001\002\000\014\007\u014d\010\u014e\011\u014c\012\u014f\040" +
    "\uff16\001\002\000\004\040\uff12\001\002\000\014\007\u014d" +
    "\010\u014e\011\u014c\012\u014f\040\uff15\001\002\000\004\040" +
    "\uff11\001\002\000\014\002\uffb7\031\uffb7\033\uffb7\036\uffb7" +
    "\037\uffb7\001\002\000\006\033\uff9f\040\uff9f\001\002\000" +
    "\006\033\uffa0\040\uffa0\001\002\000\004\040\u0169\001\002" +
    "\000\072\002\uff06\003\031\031\uff06\032\067\033\uff06\034" +
    "\020\036\uff06\037\uff06\040\u0166\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\072\002\uff05\003" +
    "\031\031\uff05\032\067\033\uff05\034\020\036\uff05\037\uff05" +
    "\040\u0163\041\022\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\032\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\040\u0161\001\002\000\070\002\uff09" +
    "\003\031\031\uff09\032\067\033\uff09\034\020\036\uff09\037" +
    "\uff09\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff07\031\uff07\033\uff07\036\uff07\037" +
    "\uff07\001\002\000\070\002\uff0d\003\031\031\uff0d\032\067" +
    "\033\uff0d\034\020\036\uff0d\037\uff0d\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uff03" +
    "\031\uff03\033\uff03\036\uff03\037\uff03\001\002\000\014\002" +
    "\uff0b\031\uff0b\033\uff0b\036\uff0b\037\uff0b\001\002\000\070" +
    "\002\uff0e\003\031\031\uff0e\032\067\033\uff0e\034\020\036" +
    "\uff0e\037\uff0e\041\022\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\032\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uff04\031\uff04\033\uff04\036" +
    "\uff04\037\uff04\001\002\000\014\002\uff0c\031\uff0c\033\uff0c" +
    "\036\uff0c\037\uff0c\001\002\000\070\002\uff0a\003\031\031" +
    "\uff0a\032\067\033\uff0a\034\020\036\uff0a\037\uff0a\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff08\031\uff08\033\uff08\036\uff08\037\uff08\001\002" +
    "\000\004\040\u016c\001\002\000\070\002\uff6e\003\031\031" +
    "\uff6e\032\067\033\uff6e\034\020\036\uff6e\037\uff6e\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff6d\031\uff6d\033\uff6d\036\uff6d\037\uff6d\001\002" +
    "\000\014\002\uff72\031\uff72\033\uff72\036\uff72\037\uff72\001" +
    "\002\000\042\057\110\065\103\072\106\073\105\074\111" +
    "\075\104\076\077\077\107\100\100\101\113\102\074\103" +
    "\112\104\073\105\076\106\102\107\114\001\002\000\004" +
    "\033\u0173\001\002\000\070\002\uff5e\003\031\031\uff5e\032" +
    "\067\033\uff5e\034\020\036\uff5e\037\uff5e\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff58\031\uff58\033\uff58\036\uff58\037\uff58\001\002\000\004" +
    "\040\u0174\001\002\000\070\002\uff5f\003\031\031\uff5f\032" +
    "\067\033\uff5f\034\020\036\uff5f\037\uff5f\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff59\031\uff59\033\uff59\036\uff59\037\uff59\001\002\000\006" +
    "\033\u0177\040\u0178\001\002\000\004\040\u017a\001\002\000" +
    "\070\002\uff5d\003\031\031\uff5d\032\067\033\uff5d\034\020" +
    "\036\uff5d\037\uff5d\041\022\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uff57\031\uff57\033\uff57" +
    "\036\uff57\037\uff57\001\002\000\070\002\uff64\003\031\031" +
    "\uff64\032\067\033\uff64\034\020\036\uff64\037\uff64\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff63\031\uff63\033\uff63\036\uff63\037\uff63\001\002" +
    "\000\040\053\u013c\054\u0136\055\u0138\057\u0145\060\u0139\061" +
    "\u0135\065\u015c\067\u015b\072\u0132\073\u0124\074\u011c\075\u0121" +
    "\076\u012e\077\u0123\100\u012d\001\002\000\040\053\u013c\054" +
    "\u0136\055\u0138\057\u0145\060\u0139\061\u0135\065\u015c\067\u015b" +
    "\072\u0132\073\u0124\074\u011c\075\u0121\076\u012e\077\u0123\100" +
    "\u012d\001\002\000\004\040\u017f\001\002\000\070\002\uffb3" +
    "\003\031\031\uffb3\032\067\033\uffb3\034\020\036\uffb3\037" +
    "\uffb3\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uffb4\031\uffb4\033\uffb4\036\uffb4\037" +
    "\uffb4\001\002\000\004\040\u0182\001\002\000\070\002\uffb1" +
    "\003\031\031\uffb1\032\067\033\uffb1\034\020\036\uffb1\037" +
    "\uffb1\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uffb2\031\uffb2\033\uffb2\036\uffb2\037" +
    "\uffb2\001\002\000\010\033\u018d\040\u018e\067\u018c\001\002" +
    "\000\004\033\u0189\001\002\000\004\040\u0187\001\002\000" +
    "\070\002\uff37\003\031\031\uff37\032\067\033\uff37\034\020" +
    "\036\uff37\037\uff37\041\022\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uff31\031\uff31\033\uff31" +
    "\036\uff31\037\uff31\001\002\000\004\040\u018a\001\002\000" +
    "\070\002\uff36\003\031\031\uff36\032\067\033\uff36\034\020" +
    "\036\uff36\037\uff36\041\022\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uff30\031\uff30\033\uff30" +
    "\036\uff30\037\uff30\001\002\000\006\033\u0193\040\u0194\001" +
    "\002\000\072\002\uff3b\003\031\031\uff3b\032\067\033\uff3b" +
    "\034\020\036\uff3b\037\uff3b\040\u0190\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\070\002\uff39" +
    "\003\031\031\uff39\032\067\033\uff39\034\020\036\uff39\037" +
    "\uff39\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff33\031\uff33\033\uff33\036\uff33\037" +
    "\uff33\001\002\000\070\002\uff3f\003\031\031\uff3f\032\067" +
    "\033\uff3f\034\020\036\uff3f\037\uff3f\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uff35" +
    "\031\uff35\033\uff35\036\uff35\037\uff35\001\002\000\014\002" +
    "\uff3d\031\uff3d\033\uff3d\036\uff3d\037\uff3d\001\002\000\072" +
    "\002\uff3a\003\031\031\uff3a\032\067\033\uff3a\034\020\036" +
    "\uff3a\037\uff3a\040\u0196\041\022\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\032\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\070\002\uff38\003\031\031" +
    "\uff38\032\067\033\uff38\034\020\036\uff38\037\uff38\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff32\031\uff32\033\uff32\036\uff32\037\uff32\001\002" +
    "\000\070\002\uff3e\003\031\031\uff3e\032\067\033\uff3e\034" +
    "\020\036\uff3e\037\uff3e\041\022\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\032\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uff34\031\uff34\033" +
    "\uff34\036\uff34\037\uff34\001\002\000\014\002\uff3c\031\uff3c" +
    "\033\uff3c\036\uff3c\037\uff3c\001\002\000\004\002\ufff7\001" +
    "\002\000\014\002\uffab\031\uffab\033\uffab\036\uffab\037\uffab" +
    "\001\002\000\016\002\uff4b\031\uff4b\033\uff4b\036\uff4b\037" +
    "\uff4b\040\u019d\001\002\000\014\002\uff4a\031\uff4a\033\uff4a" +
    "\036\uff4a\037\uff4a\001\002\000\014\002\uff4c\031\uff4c\033" +
    "\uff4c\036\uff4c\037\uff4c\001\002\000\006\033\u01a2\040\u01a3" +
    "\001\002\000\004\040\u01a0\001\002\000\070\002\uff44\003" +
    "\031\031\uff44\032\067\033\uff44\034\020\036\uff44\037\uff44" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff40\031\uff40\033\uff40\036\uff40\037\uff40" +
    "\001\002\000\072\002\uff46\003\031\031\uff46\032\067\033" +
    "\uff46\034\020\036\uff46\037\uff46\040\u01a5\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\070\002" +
    "\uff45\003\031\031\uff45\032\067\033\uff45\034\020\036\uff45" +
    "\037\uff45\041\022\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\032\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uff41\031\uff41\033\uff41\036\uff41" +
    "\037\uff41\001\002\000\070\002\uff49\003\031\031\uff49\032" +
    "\067\033\uff49\034\020\036\uff49\037\uff49\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff42\031\uff42\033\uff42\036\uff42\037\uff42\001\002\000\014" +
    "\002\uff48\031\uff48\033\uff48\036\uff48\037\uff48\001\002\000" +
    "\026\006\142\033\u01b0\053\141\054\126\055\127\057\140" +
    "\060\130\061\125\065\134\067\133\001\002\000\004\033" +
    "\u01aa\001\002\000\004\036\u01ab\001\002\000\060\003\031" +
    "\032\067\034\020\037\u01ad\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\004\037\u01ae\001\002" +
    "\000\014\002\ufefb\031\ufefb\033\ufefb\036\ufefb\037\ufefb\001" +
    "\002\000\056\003\031\032\067\034\020\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufef5\031\ufef5\033\ufef5\036\ufef5\037\ufef5\001\002\000\004" +
    "\036\u01c1\001\002\000\006\033\u01b3\036\u01b2\001\002\000" +
    "\060\003\031\032\067\034\020\037\u01be\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\062\003" +
    "\031\032\067\034\020\036\u01b4\037\u01b6\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\060\003" +
    "\031\032\067\034\020\037\u01ba\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\004\037\u01b7\001" +
    "\002\000\014\002\ufef9\031\ufef9\033\ufef9\036\ufef9\037\ufef9" +
    "\001\002\000\056\003\031\032\067\034\020\041\022\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\032\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\ufef3\031\ufef3\033\ufef3\036\ufef3\037\ufef3\001\002\000" +
    "\004\037\u01bb\001\002\000\014\002\ufeff\031\ufeff\033\ufeff" +
    "\036\ufeff\037\ufeff\001\002\000\070\002\ufefe\003\031\031" +
    "\ufefe\032\067\033\ufefe\034\020\036\ufefe\037\ufefe\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufefd\031\ufefd\033\ufefd\036\ufefd\037\ufefd\001\002" +
    "\000\004\037\u01bf\001\002\000\014\002\ufefa\031\ufefa\033" +
    "\ufefa\036\ufefa\037\ufefa\001\002\000\056\003\031\032\067" +
    "\034\020\041\022\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\032\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\ufef4\031\ufef4\033\ufef4\036\ufef4" +
    "\037\ufef4\001\002\000\060\003\031\032\067\034\020\037" +
    "\u01c3\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\037\u01c4\001\002\000\014\002\ufefc\031" +
    "\ufefc\033\ufefc\036\ufefc\037\ufefc\001\002\000\056\003\031" +
    "\032\067\034\020\041\022\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\ufef6\031\ufef6\033\ufef6" +
    "\036\ufef6\037\ufef6\001\002\000\004\065\u01c7\001\002\000" +
    "\004\015\u01c8\001\002\000\004\034\u01c9\001\002\000\052" +
    "\053\326\054\335\057\336\061\322\065\327\067\317\072" +
    "\333\073\332\074\340\075\331\076\324\077\334\100\325" +
    "\101\342\102\320\103\341\104\321\105\323\106\330\107" +
    "\344\001\002\000\004\035\u01cb\001\002\000\004\040\u01cc" +
    "\001\002\000\056\003\031\032\067\034\020\041\022\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\032\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uffd3\031\uffd3\033\uffd3\036\uffd3\037\uffd3\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufff6\001\002\000\026" +
    "\006\142\033\u01dc\053\141\054\126\055\127\057\140\060" +
    "\130\061\125\065\134\067\133\001\002\000\004\033\u01d2" +
    "\001\002\000\004\036\u01d3\001\002\000\056\003\031\032" +
    "\067\034\020\041\022\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\032\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\004\037\u01d5\001\002\000\072\002" +
    "\ufeed\003\031\031\ufeed\032\067\033\ufeed\034\020\036\ufeed" +
    "\037\ufeed\041\022\042\045\043\013\044\u01d6\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\004\036\u01d8\001\002\000\014" +
    "\002\ufee9\031\ufee9\033\ufee9\036\ufee9\037\ufee9\001\002\000" +
    "\056\003\031\032\067\034\020\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\004\037\u01da\001" +
    "\002\000\056\003\031\032\067\034\020\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufee5\031\ufee5\033\ufee5\036\ufee5\037\ufee5\001\002\000\004" +
    "\036\u01fc\001\002\000\006\033\u01df\036\u01de\001\002\000" +
    "\056\003\031\032\067\034\020\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\060\003\031\032" +
    "\067\034\020\036\u01e0\041\022\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\032\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\056\003\031\032\067\034" +
    "\020\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\037\u01e2\001\002\000\072\002\ufeec\003" +
    "\031\031\ufeec\032\067\033\ufeec\034\020\036\ufeec\037\ufeec" +
    "\041\022\042\045\043\013\044\u01e3\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\032\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\036\u01e5\001\002\000\014\002\ufee8" +
    "\031\ufee8\033\ufee8\036\ufee8\037\ufee8\001\002\000\056\003" +
    "\031\032\067\034\020\041\022\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\032\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\004\037\u01e7\001\002\000" +
    "\056\003\031\032\067\034\020\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\ufee4\031" +
    "\ufee4\033\ufee4\036\ufee4\037\ufee4\001\002\000\004\037\u01ea" +
    "\001\002\000\072\002\ufef2\003\031\031\ufef2\032\067\033" +
    "\ufef2\034\020\036\ufef2\037\ufef2\041\022\042\045\043\013" +
    "\044\u01eb\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\060\003" +
    "\031\032\067\034\020\036\u01ed\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\ufef1\031" +
    "\ufef1\033\ufef1\036\ufef1\037\ufef1\001\002\000\056\003\031" +
    "\032\067\034\020\041\022\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\004\037\u01ef\001\002\000\056" +
    "\003\031\032\067\034\020\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\ufee3\031\ufee3" +
    "\033\ufee3\036\ufee3\037\ufee3\001\002\000\004\037\u01f2\001" +
    "\002\000\056\003\031\032\067\034\020\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufef0\031\ufef0\033\ufef0\036\ufef0\037\ufef0\001\002\000\004" +
    "\037\u01f5\001\002\000\072\002\ufeee\003\031\031\ufeee\032" +
    "\067\033\ufeee\034\020\036\ufeee\037\ufeee\041\022\042\045" +
    "\043\013\044\u01f6\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\004\036\u01f8\001\002\000\014\002\ufeea\031\ufeea\033\ufeea" +
    "\036\ufeea\037\ufeea\001\002\000\056\003\031\032\067\034" +
    "\020\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\037\u01fa\001\002\000\056\003\031\032" +
    "\067\034\020\041\022\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\032\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\ufee6\031\ufee6\033\ufee6\036" +
    "\ufee6\037\ufee6\001\002\000\056\003\031\032\067\034\020" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\037\u01fe\001\002\000\072\002\ufeef\003\031" +
    "\031\ufeef\032\067\033\ufeef\034\020\036\ufeef\037\ufeef\041" +
    "\022\042\045\043\013\044\u01ff\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\036\u0201\001\002\000\014\002\ufeeb\031" +
    "\ufeeb\033\ufeeb\036\ufeeb\037\ufeeb\001\002\000\056\003\031" +
    "\032\067\034\020\041\022\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\032" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\004\037\u0203\001\002\000\056" +
    "\003\031\032\067\034\020\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\ufee7\031\ufee7" +
    "\033\ufee7\036\ufee7\037\ufee7\001\002\000\042\033\u020a\053" +
    "\u013c\054\u0136\055\u0138\057\u0145\060\u0139\061\u0135\065\u015c" +
    "\067\u015b\072\u0132\073\u0124\074\u011c\075\u0121\076\u012e\077" +
    "\u0123\100\u012d\001\002\000\004\033\u0207\001\002\000\004" +
    "\040\u0208\001\002\000\070\002\uff51\003\031\031\uff51\032" +
    "\067\033\uff51\034\020\036\uff51\037\uff51\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff4d\031\uff4d\033\uff4d\036\uff4d\037\uff4d\001\002\000\004" +
    "\040\u0212\001\002\000\006\033\u020c\040\u020d\001\002\000" +
    "\072\002\uff54\003\031\031\uff54\032\067\033\uff54\034\020" +
    "\036\uff54\037\uff54\040\u020f\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\070\002\uff52\003\031" +
    "\031\uff52\032\067\033\uff52\034\020\036\uff52\037\uff52\041" +
    "\022\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\032\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff4e\031\uff4e\033\uff4e\036\uff4e\037\uff4e\001" +
    "\002\000\070\002\uff56\003\031\031\uff56\032\067\033\uff56" +
    "\034\020\036\uff56\037\uff56\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\uff4f\031\uff4f" +
    "\033\uff4f\036\uff4f\037\uff4f\001\002\000\014\002\uff55\031" +
    "\uff55\033\uff55\036\uff55\037\uff55\001\002\000\070\002\uff53" +
    "\003\031\031\uff53\032\067\033\uff53\034\020\036\uff53\037" +
    "\uff53\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff50\031\uff50\033\uff50\036\uff50\037" +
    "\uff50\001\002\000\006\036\u0215\040\115\001\002\000\060" +
    "\003\031\032\067\034\020\037\u0217\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\004\037\u0218" +
    "\001\002\000\004\002\ufff4\001\002\000\004\002\ufff3\001" +
    "\002\000\026\006\142\033\u021a\053\141\054\126\055\127" +
    "\057\140\060\130\061\125\065\134\067\133\001\002\000" +
    "\004\036\u021b\001\002\000\060\003\031\032\067\034\020" +
    "\037\u021d\041\022\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\032\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\037\u021e\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\ufffc\001\002\000\004\031\uff6c\001" +
    "\002\000\016\031\u0230\057\u0222\061\u0225\064\012\065\u021f" +
    "\067\u0221\001\002\000\004\065\u016b\001\002\000\024\003" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\065\uffa2\067\uffa2\001\002\000\004\031\u0226\001\002\000" +
    "\024\003\031\053\310\054\301\055\302\057\311\060\303" +
    "\061\277\065\305\067\304\001\002\000\024\003\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\061\uffa1\065\uffa1" +
    "\067\uffa1\001\002\000\024\006\142\053\141\054\126\055" +
    "\127\057\140\060\130\061\125\065\134\067\133\001\002" +
    "\000\004\031\u0228\001\002\000\024\003\031\053\310\054" +
    "\301\055\302\057\311\060\303\061\277\065\u022a\067\304" +
    "\001\002\000\004\033\u022b\001\002\000\052\015\u0122\016" +
    "\u011e\017\u011b\020\u0130\021\u0129\053\u013c\054\u0136\055\u0138" +
    "\057\u0145\060\u0139\061\u0135\065\u015c\067\u015b\072\u0132\073" +
    "\u0124\074\u011c\075\u0121\076\u012e\077\u0123\100\u012d\001\002" +
    "\000\004\036\u022c\001\002\000\056\003\031\032\067\034" +
    "\020\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\037\u022e\001\002\000\070\002\ufeda\003" +
    "\031\031\ufeda\032\067\033\ufeda\034\020\036\ufeda\037\ufeda" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\ufee0\031\ufee0\033\ufee0\036\ufee0\037\ufee0" +
    "\001\002\000\024\006\142\053\141\054\126\055\127\057" +
    "\140\060\130\061\125\065\134\067\133\001\002\000\004" +
    "\031\u0232\001\002\000\026\006\142\031\u0233\053\141\054" +
    "\126\055\127\057\140\060\130\061\125\065\134\067\133" +
    "\001\002\000\024\003\031\053\310\054\301\055\302\057" +
    "\311\060\303\061\277\065\u022a\067\304\001\002\000\004" +
    "\031\u0235\001\002\000\026\003\031\033\u0237\053\310\054" +
    "\301\055\302\057\311\060\303\061\277\065\u022a\067\304" +
    "\001\002\000\006\033\u023d\036\u023c\001\002\000\004\036" +
    "\u0238\001\002\000\056\003\031\032\067\034\020\041\022" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\032\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\004\037\u023a\001\002\000\070\002\ufed7\003\031\031\ufed7" +
    "\032\067\033\ufed7\034\020\036\ufed7\037\ufed7\041\022\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\032\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\ufedd\031\ufedd\033\ufedd\036\ufedd\037\ufedd\001\002\000" +
    "\056\003\031\032\067\034\020\041\022\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\032\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\060\003\031\032" +
    "\067\034\020\036\u023e\041\022\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\032\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\056\003\031\032\067\034" +
    "\020\041\022\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\032\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\037\u0240\001\002\000\070\002\ufed5\003" +
    "\031\031\ufed5\032\067\033\ufed5\034\020\036\ufed5\037\ufed5" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\ufedb\031\ufedb\033\ufedb\036\ufedb\037\ufedb" +
    "\001\002\000\004\037\u0243\001\002\000\070\002\ufee1\003" +
    "\031\031\ufee1\032\067\033\ufee1\034\020\036\ufee1\037\ufee1" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\ufee2\031\ufee2\033\ufee2\036\ufee2\037\ufee2" +
    "\001\002\000\004\037\u0246\001\002\000\070\002\ufed6\003" +
    "\031\031\ufed6\032\067\033\ufed6\034\020\036\ufed6\037\ufed6" +
    "\041\022\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\032\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\ufedc\031\ufedc\033\ufedc\036\ufedc\037\ufedc" +
    "\001\002\000\004\033\u0249\001\002\000\004\036\u024a\001" +
    "\002\000\056\003\031\032\067\034\020\041\022\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\032\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\037" +
    "\u024c\001\002\000\070\002\ufed8\003\031\031\ufed8\032\067" +
    "\033\ufed8\034\020\036\ufed8\037\ufed8\041\022\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\032\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufede" +
    "\031\ufede\033\ufede\036\ufede\037\ufede\001\002\000\004\031" +
    "\u024f\001\002\000\024\003\031\053\310\054\301\055\302" +
    "\057\311\060\303\061\277\065\u022a\067\304\001\002\000" +
    "\004\033\u0251\001\002\000\004\036\u0252\001\002\000\056" +
    "\003\031\032\067\034\020\041\022\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\032\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\004\037\u0254\001\002" +
    "\000\070\002\ufed9\003\031\031\ufed9\032\067\033\ufed9\034" +
    "\020\036\ufed9\037\ufed9\041\022\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\032\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\ufedf\031\ufedf\033" +
    "\ufedf\036\ufedf\037\ufedf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0253\000\054\002\014\003\035\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\006\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0222\040\u0223\001\001\000" +
    "\002\001\001\000\004\057\074\001\001\000\004\006\u0205" +
    "\001\001\000\002\001\001\000\016\010\u01d0\011\136\012" +
    "\130\014\131\044\142\047\134\001\001\000\052\003\u01ce" +
    "\005\056\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\u01a8\011" +
    "\136\012\130\014\131\044\142\047\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u012b\036\u012a\001\001" +
    "\000\052\003\u0199\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u017b\001\001\000" +
    "\004\057\u016f\001\001\000\002\001\001\000\006\017\277" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\067\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\004\057\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\115\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\120\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\122\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\016\010\135\011\136\012\130\014" +
    "\131\044\142\047\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\211\001\001\000\002\001\001\000\006" +
    "\012\204\047\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\156\001\001\000\004\053\144\001\001\000" +
    "\002\001\001\000\006\014\131\044\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\157" +
    "\014\131\044\163\047\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\157\047\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\174\047\175\001\001\000\006\012\172\047\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\201\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\203\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\206\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\217\044\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\211\001\001\000\002\001\001\000\052\003" +
    "\232\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\052\003\224\005\056\007\003\017\032\024" +
    "\034\025\015\026\042\027\041\030\022\031\040\032\023" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\052\003\227\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\241\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\245\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\252\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\052\003\250\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\253" +
    "\005\056\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\256\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\263\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\267\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\274\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\052\003\272\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\275" +
    "\005\056\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\u0126\005\056" +
    "\006\u012b\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\036\u012a\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\336" +
    "\060\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\052\345\060\342\001" +
    "\001\000\002\001\001\000\006\052\346\060\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\351\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\006\052\353\060" +
    "\342\001\001\000\002\001\001\000\006\052\355\060\342" +
    "\001\001\000\002\001\001\000\006\052\357\060\342\001" +
    "\001\000\002\001\001\000\006\052\361\060\342\001\001" +
    "\000\002\001\001\000\006\052\363\060\342\001\001\000" +
    "\002\001\001\000\006\052\365\060\342\001\001\000\002" +
    "\001\001\000\006\052\u0109\060\342\001\001\000\052\003" +
    "\u0108\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\006\052\372\060\342\001\001\000\006\052" +
    "\377\060\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\375\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u0104\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\052\003\u0102" +
    "\005\056\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\052\003\u0105\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u0107\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u010c\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\u010f\060\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0112\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\u0116\060\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u0119\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\u016d\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u012b\036\u012a\001\001\000\002\001\001" +
    "\000\010\006\u0145\043\u0141\045\u0143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u013d\037\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u0133\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u013f\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u0149\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\052\003\u0147\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\052\003\u014a\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\u0158\045\u0157\001\001\000\006\043\u0156" +
    "\045\u0155\001\001\000\006\043\u0154\045\u0153\001\001\000" +
    "\006\043\u0152\045\u0151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0166\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\052\003\u0163\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\u0161\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\u0164\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u0167\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u0169\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u016c\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u0175\001" +
    "\001\000\002\001\001\000\052\003\u0171\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u0174\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u0178" +
    "\005\056\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\052\003\u017a\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\004\006\u0180\001\001\000\004\006\u017d\001\001" +
    "\000\002\001\001\000\052\003\u017f\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u0182\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u0187\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u018a\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u0190\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\052\003\u018e\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\u0191\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u0196\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\052\003\u0194\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\052\003\u0197\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u01a0\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\u01a5\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\052\003\u01a3\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\u01a6\005\056\007\003\017\032\024\034\025" +
    "\015\026\042\027\041\030\022\031\040\032\023\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\u01b0\011\136\012\130\014\131\044\142\047" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u01ab\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u01ae\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u01bc\005\056\007\003\017\032\024" +
    "\034\025\015\026\042\027\041\030\022\031\040\032\023" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\052\003\u01b4\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\052\003\u01b8\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u01b7\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u01bb\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u01bf\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u01c1\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u01c4\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\052\u01c9\060\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\u01cc\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\u01dc\011\136\012\130" +
    "\014\131\044\142\047\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u01d3\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\u01d6\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u01d8\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\u01da\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u01f3\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\052\003\u01e0\005\056\007\003\017" +
    "\032\024\034\025\015\026\042\027\041\030\022\031\040" +
    "\032\023\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\052\003\u01e8" +
    "\005\056\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\052\003\u01e3\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u01e5\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\052\003\u01e7\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\u01eb\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\052\003\u01ed\005\056\007" +
    "\003\017\032\024\034\025\015\026\042\027\041\030\022" +
    "\031\040\032\023\033\060\034\051\035\024\040\046\041" +
    "\004\046\016\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u01f0\005\056\007\003\017\032\024" +
    "\034\025\015\026\042\027\041\030\022\031\040\032\023" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\052" +
    "\003\u01ef\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u01f2\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u01f6\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u01f8\005\056\007\003\017\032\024\034\025\015\026" +
    "\042\027\041\030\022\031\040\032\023\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\u01fa\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u01fc\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\u01ff\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u0201\005\056\007\003\017\032\024\034\025\015" +
    "\026\042\027\041\030\022\031\040\032\023\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\u0203\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\004\006\u020a\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u0208\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u020f" +
    "\005\056\007\003\017\032\024\034\025\015\026\042\027" +
    "\041\030\022\031\040\032\023\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\052\003\u020d\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\052\003" +
    "\u0210\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u0212\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u0215\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\135\011\136\012\130\014\131\044\142" +
    "\047\134\001\001\000\002\001\001\000\052\003\u021b\005" +
    "\056\007\003\017\032\024\034\025\015\026\042\027\041" +
    "\030\022\031\040\032\023\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u0230\040\u0223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\277\055\043\001\001\000\002\001\001\000\016\010\u0226" +
    "\011\136\012\130\014\131\044\142\047\134\001\001\000" +
    "\002\001\001\000\006\017\u0228\055\043\001\001\000\002" +
    "\001\001\000\006\006\u012b\036\u012a\001\001\000\002\001" +
    "\001\000\052\003\u022c\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\052\003" +
    "\u022e\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\016\010\u024d\011\136\012" +
    "\130\014\131\044\142\047\134\001\001\000\002\001\001" +
    "\000\016\010\u0233\011\136\012\130\014\131\044\142\047" +
    "\134\001\001\000\006\017\u0247\055\043\001\001\000\002" +
    "\001\001\000\006\017\u0235\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u0238\005\056\007\003" +
    "\017\032\024\034\025\015\026\042\027\041\030\022\031" +
    "\040\032\023\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\052\003\u023a\005\056\007\003\017\032\024\034" +
    "\025\015\026\042\027\041\030\022\031\040\032\023\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\052\003" +
    "\u0244\005\056\007\003\017\032\024\034\025\015\026\042" +
    "\027\041\030\022\031\040\032\023\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\052\003\u023e\005\056\007\003\017\032\024" +
    "\034\025\015\026\042\027\041\030\022\031\040\032\023" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\052\003\u0241\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u0240\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0243\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0246\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u024a\005\056" +
    "\007\003\017\032\024\034\025\015\026\042\027\041\030" +
    "\022\031\040\032\023\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u024c\005\056\007\003\017\032" +
    "\024\034\025\015\026\042\027\041\030\022\031\040\032" +
    "\023\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\u024f\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u0252\005\056\007" +
    "\003\017\032\024\034\025\015\026\042\027\041\030\022" +
    "\031\040\032\023\033\060\034\051\035\024\040\046\041" +
    "\004\046\016\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u0254\005\056\007\003\017\032\024" +
    "\034\025\015\026\042\027\041\030\022\031\040\032\023" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AnalizadorLexico  les;
    public void setLex(AnalizadorLexico le){
        les =le;
    }
public static String errores = "";
StringBuilder m = new StringBuilder("");
/* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
            if (info instanceof java_cup.runtime.Symbol){
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                m=new StringBuilder("Error Critico "+s+" : ");
                if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                    if (s.right >= 0)m.append(" Columna: "+(s.right+1)+"\nRepare antes de Continuar");}
                if(m.length()!=0)
                    errores+=m+"\n";
        }
        
        errores += m.append("    antes de    " + les.lexeme  + "  \n");
        System.err.println(m+info.toString());
    }
    
   
public void syntax_error(Symbol s){
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto.");
}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto (ERROR CRITICO SE DEBE SOLUCIONAR ANTES DE CONTINUAR, NO SE IDENTIFICO ).");
}

public static void append(String mensaje){
StringBuilder me;
    me = new StringBuilder("Error sintactico: "+" ");
    me.append(mensaje);
    
    errores+=mensaje+"\n";
    System.out.println(me);
}

    public static void main(String[] args){
        try {
                ASintactico sintactico = new ASintactico(new AnalizadorLexico(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
        } catch (Exception ex) {
           // ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {
  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= errores PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= errores PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= PAROPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= KEYOPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= KEYOPEN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la estructura de inicio";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= INICIO PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ( después de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= INICIO PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ( después de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= INICIO PAROPEN KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ) después de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= INICIO PAROPEN KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		System.out.println("Linea: "+(eright+1)+" - Se esperaba un ) después de ( \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= INICIO PAROPEN PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un { después de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= INICIO PAROPEN PARCLOSE KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un { después de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // errores ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // errores ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // errores ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // errores ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // errores ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // errores ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // errores ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // errores ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // errores1 ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // errores1 ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // errores1 ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // errores1 ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // errores1 ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // errores1 ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // errores1 ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ciclos_errores ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos_errores",44, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ciclos_errores ::= SI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos_errores",44, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= asignar 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= decvariables 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= funcionesDo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= ciclos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= incrementar_var 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= arreglo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arreglo ::= tipo COROPEN CORCLOSE ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arreglo ::= COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un tipo de dato antes de '[' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arreglo ::= tipo CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un '[' despues de el tipo de dato' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arreglo ::= tipo COROPEN ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ']' despues de '[' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arreglo ::= tipo COROPEN CORCLOSE ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un 'identificador' despues de ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arreglo ::= tipo COROPEN CORCLOSE ID COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ' = ' despues de el 'identificador' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ' [ ' despues de el ' = ' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaban datos dentro de '[' ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // datos ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // datos ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // datos ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // datos ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // datos ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // datos ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // datos ::= notapuras 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // datos ::= ID COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // datos ::= numEntero COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // datos ::= VERDADERO COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // datos ::= FALSO COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // datos ::= CADENA COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // datos ::= NOTA COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // datos ::= notapuras COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // datos ::= notapuras datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ',' para la separacion de los datos \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignar ::= ID ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignar ::= ID opasig datoasig PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignar ::= ID ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignar ::= ID opasig datoasig PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignar ::= ID ASIG ari PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignar ::= ID ASIG PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un ' valor de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignar ::= ID ASIG PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignar ::= errores1 ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignar ::= errores1 ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignar ::= errores1 opasig dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asignar ::= errores1 opasig dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignar ::= ID dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignar ::= ID dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignar ::= ID ASIG dato cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un ';' al final de la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignar ::= ID ASIG dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un ';' al final de la asignacion  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignar ::= ID opasig dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignar ::= error cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opasig ::= ADDASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opasig ::= MINASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opasig ::= DIVASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opasig ::= MULASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // datoasig ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // datoasig ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // datoasig ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipo ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dato ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dato ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dato ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dato ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // dato ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // dato ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // dato ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // dato ::= DO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // dato ::= RE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // dato ::= MI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // dato ::= FA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // dato ::= SOL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // dato ::= LA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // dato ::= SII 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // notas ::= RE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // notas ::= MI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // notas ::= FA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // notas ::= SOL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // notas ::= LA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // notas ::= SII 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // notas ::= DO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // notas ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // notas ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // notas ::= DOS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // notas ::= RES 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // notas ::= MIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // notas ::= FAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // notas ::= SOLS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // notas ::= LAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // notas ::= SIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // notapuras ::= RE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // notapuras ::= MI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // notapuras ::= FA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // notapuras ::= SOL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // notapuras ::= LA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // notapuras ::= SII 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // notapuras ::= DO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // notapuras ::= DOS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // notapuras ::= RES 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // notapuras ::= MIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // notapuras ::= FAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // notapuras ::= SOLS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // notapuras ::= LAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // notapuras ::= SIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // decvariables ::= tipo ID PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // decvariables ::= tipo ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // decvariables ::= tipo asignar 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // decvariables ::= tipo ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" -  falta el ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // decvariables ::= tipo ID cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" -  falta el ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // decvariables ::= numEntero ID PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // decvariables ::= numEntero ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // decvariables ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una tipo de dato \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // funcionesDo ::= declaraReproduce 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // funcionesDo ::= declaraImprimir 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // funcionesDo ::= declaraImportar 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // funcionesDo ::= declaraContinuar 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // funcionesDo ::= declaraSilencio 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // funcionesDo ::= declaraVolumen 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // funcionesDo ::= declaraFrecuencia 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declaraReproduce ::= REPRODUCE PAROPEN notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // declaraReproduce ::= REPRODUCE PAROPEN notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declaraReproduce ::= PAROPEN notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declaraReproduce ::= NOTA PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que abre  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // declaraReproduce ::= PAROPEN notas PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que cierra   \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declaraReproduce ::= REPRODUCE notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declaraReproduce ::= REPRODUCE PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta el (  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declaraReproduce ::= REPRODUCE PAROPEN notas PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta el )  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declaraReproduce ::= PAROPEN notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // declaraReproduce ::= NOTA PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentesis que abre  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declaraReproduce ::= PAROPEN notas PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'   \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // declaraReproduce ::= REPRODUCE notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // declaraReproduce ::= REPRODUCE PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta el (  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaraReproduce ::= REPRODUCE PAROPEN notas PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Hace falta el )  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // declaraImprimir ::= IMPRIMIR PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // declaraImprimir ::= IMPRIMIR PAROPEN dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta el ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // declaraImprimir ::= IMPRIMIR dato PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta el ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // declaraImprimir ::= IMPRIMIR PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // declaraImprimir ::= IMPRIMIR PAROPEN dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta el ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // declaraImprimir ::= IMPRIMIR dato PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error sintatactico Linea: "+(eright+1)+" - Falta el ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // declaraImportar ::= IMPORTAR ID PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // declaraImportar ::= IMPORTAR ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // declaraImportar ::= IMPORTAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el argumento en importar \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // declaraContinuar ::= PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declaraContinuar ::= CONTINUAR PAROPEN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // declaraContinuar ::= CONTINUAR PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // declaraContinuar ::= PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // declaraContinuar ::= CONTINUAR PAROPEN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // declaraContinuar ::= CONTINUAR PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // declaraSilencio ::= SILENCIO PAROPEN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // declaraSilencio ::= SILENCIO PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues de numero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // declaraSilencio ::= SILENCIO PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de silencio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // declaraSilencio ::= SILENCIO numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // declaraSilencio ::= SILENCIO PAROPEN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // declaraSilencio ::= SILENCIO PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues de numero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // declaraSilencio ::= SILENCIO PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de silencio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // declaraSilencio ::= SILENCIO numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // declaraVolumen ::= VOLUMEN PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // declaraVolumen ::= VOLUMEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // declaraVolumen ::= VOLUMEN PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // declaraVolumen ::= VOLUMEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // declaraFrecuencia ::= FRECUENCIA PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // declaraFrecuencia ::= FRECUENCIA numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // declaraFrecuencia ::= FRECUENCIA PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // declaraFrecuencia ::= FRECUENCIA numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // operacion ::= ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // operacion ::= log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // operacion ::= rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // opers ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opers",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // opers ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opers",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ari ::= opers ADD opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ari ::= opers MIN opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ari ::= opers MUL opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // ari ::= opers DIV opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ari ::= opers ADD ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ari ::= opers MIN ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ari ::= opers MUL ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ari ::= opers DIV ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // incrementar_var ::= ID PLUSPLUS PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // incrementar_var ::= ID MINMIN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // incrementar_var ::= ID PLUSPLUS PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // incrementar_var ::= ID MINMIN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // incrementar_var ::= ID ADD PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // incrementar_var ::= ID MIN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // incrementar_var ::= ID ADD PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // incrementar_var ::= ID MIN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // incrementar_var ::= ID PLUSPLUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta punto y coma.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // incrementar_var ::= ID MINMIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta punto y coma.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // incrementar_var ::= ID PLUSPLUS cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta punto y coma.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // incrementar_var ::= ID MINMIN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta punto y coma.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ciclos ::= sentencia_mientras 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ciclos ::= sentencia_por 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ciclos ::= sentencia_si 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // sentencia_mientras ::= MIENTRAS PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una condición \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // sentencia_mientras ::= MIENTRAS condicion PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // sentencia_mientras ::= MIENTRAS PAROPEN condicion KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // sentencia_mientras ::= errores PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // sentencia_mientras ::= errores PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // sentencia_mientras ::= MIENTRAS PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una condición \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // sentencia_mientras ::= MIENTRAS condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // sentencia_mientras ::= MIENTRAS PAROPEN condicion KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-11)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una ')' despues de 'la condicon' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una ')' despues de la 'condicion' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una ')' despues de una  'condicion' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una '{' despues de 'SINO' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-11)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // sentencia_por ::= POR decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // sentencia_por ::= POR PAROPEN COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // sentencia_por ::= POR PAROPEN decvariables COMA COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una condicion  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // sentencia_por ::= POR decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // sentencia_por ::= POR PAROPEN COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // sentencia_por ::= POR PAROPEN decvariables COMA COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una condicion  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba una asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000001(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // condicion ::= log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // condicion ::= cond 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // condicion ::= rel log2 rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // condicion ::= ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // condicion ::= ID log ENTERO cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - No es una operacion logica valida, hace falta de uso de op. relacionales \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // condicion ::= NOT PAROPEN rel PARCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // rel ::= op_rel sig_rel op_rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("rel",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // rel ::= op_rel sig_rel rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("rel",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // op_rel ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // op_rel ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // op_rel ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // op_rel ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // op_rel ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // op_rel ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // op_rel ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // op_rel ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // cond ::= rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // log ::= ope_logico AND ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // log ::= ope_logico OR ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // log ::= NOT ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // log ::= ope_logico AND log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // log ::= ope_logico OR log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // log ::= NOT PAROPEN log PARCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // log ::= NOT PAROPEN ID PARCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // log2 ::= AND 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log2",41, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // log2 ::= OR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log2",41, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ope_logico ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ope_logico",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ope_logico ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ope_logico",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ope_logico ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ope_logico",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // sig_rel ::= MAYTHAN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // sig_rel ::= MINTHAN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // sig_rel ::= MINEQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // sig_rel ::= MAYEQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // sig_rel ::= EQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // sig_rel ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // sig_rel ::= ASIG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - No se puede hacer una asignación en una condición";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$ASintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$ASintactico$do_action_part00000001(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
