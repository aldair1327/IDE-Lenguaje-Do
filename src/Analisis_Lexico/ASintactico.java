
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis_Lexico;

import java_cup.runtime.*;
import java.io.FileReader;
import Analisis_Lexico.Token_;
import Analisis_Lexico.AnalizadorLexico;
import Analisis_Lexico.EstiloDocumento;
import Analisis_Lexico.Interfaz;
import Analisis_Lexico.InterfazTablaSimbolos;
import Analisis_Lexico.OpeTabla;
import Archivos.Archivos;
import Manejador_errores.Manejador_Errores;
import Miscelaneos.Miscelaneo;
import Tabla_Simbolos.Tabla_Simbolos;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import Analisis_Lexico.OpeTabla;
import Analisis_Lexico.InterfazTablaSimbolos;
import Ventanas.Inicio;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\006\000\002\002\010" +
    "\000\002\002\007\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\003\000\002\002\006\000\002\002\007\000\002\002" +
    "\006\000\002\002\007\000\002\002\007\000\002\002\006" +
    "\000\002\002\007\000\002\002\006\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\050\014" +
    "\000\002\050\010\000\002\050\013\000\002\050\013\000" +
    "\002\050\013\000\002\050\013\000\002\050\013\000\002" +
    "\050\013\000\002\050\013\000\002\050\013\000\002\050" +
    "\013\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\004\000\002\017\006" +
    "\000\002\017\006\000\002\017\007\000\002\017\007\000" +
    "\002\017\006\000\002\017\006\000\002\017\005\000\002" +
    "\017\007\000\002\017\006\000\002\017\007\000\002\017" +
    "\006\000\002\017\006\000\002\017\005\000\002\017\006" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\061\006\000\002\061\006\000\002\061\007\000\002" +
    "\061\007\000\002\061\006\000\002\061\006\000\002\061" +
    "\005\000\002\061\007\000\002\061\006\000\002\061\007" +
    "\000\002\061\006\000\002\061\006\000\002\061\005\000" +
    "\002\061\006\000\002\061\005\000\002\061\005\000\002" +
    "\061\004\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\005\005\000\002\005\006\000\002\005\004" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\007" +
    "\000\002\027\010\000\002\027\006\000\002\027\005\000" +
    "\002\027\005\000\002\027\006\000\002\027\004\000\002" +
    "\027\006\000\002\027\007\000\002\027\006\000\002\027" +
    "\006\000\002\027\007\000\002\027\005\000\002\027\007" +
    "\000\002\030\007\000\002\030\010\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\030\007\000\002\030\007\000\002\030\007\000\002\030" +
    "\007\000\002\031\005\000\002\031\004\000\002\031\004" +
    "\000\002\032\006\000\002\032\007\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\006\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\033\006\000\002\033\007\000\002\033\007" +
    "\000\002\033\010\000\002\033\005\000\002\033\006\000" +
    "\002\033\005\000\002\033\006\000\002\033\005\000\002" +
    "\033\006\000\002\033\006\000\002\033\007\000\002\033" +
    "\006\000\002\033\007\000\002\033\006\000\002\033\007" +
    "\000\002\034\007\000\002\034\010\000\002\034\006\000" +
    "\002\034\006\000\002\034\006\000\002\034\006\000\002" +
    "\034\007\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\035\007\000\002\035\010\000\002\035\006" +
    "\000\002\035\006\000\002\035\006\000\002\035\006\000" +
    "\002\035\007\000\002\035\007\000\002\035\007\000\002" +
    "\035\007\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\045\003\000\002\045\003\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\006\000\002\025\006\000\002\025\005\000\002\025\005" +
    "\000\002\025\006\000\002\025\006\000\002\025\004\000" +
    "\002\025\004\000\002\025\005\000\002\025\005\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\024" +
    "\010\000\002\024\011\000\002\024\012\000\002\024\007" +
    "\000\002\024\007\000\002\024\007\000\002\024\007\000" +
    "\002\024\011\000\002\024\012\000\002\024\011\000\002" +
    "\024\011\000\002\024\011\000\002\024\011\000\002\007" +
    "\011\000\002\007\012\000\002\007\016\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\011\000\002\007\011\000\002\007\011\000\002" +
    "\007\011\000\002\007\015\000\002\007\015\000\002\007" +
    "\015\000\002\007\015\000\002\007\015\000\002\046\016" +
    "\000\002\046\015\000\002\046\015\000\002\046\015\000" +
    "\002\046\015\000\002\046\015\000\002\046\015\000\002" +
    "\046\015\000\002\046\014\000\002\046\014\000\002\046" +
    "\014\000\002\046\014\000\002\046\014\000\002\046\014" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\003\000\002\010\006\000\002\010\006\000\002" +
    "\044\005\000\002\044\005\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\006\000\002\012\006\000\002\053\003\000\002\053\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u026f\000\066\003\031\032\010\033\040\034\020\036" +
    "\014\037\055\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\062\057\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\ufeef\031\ufeef\033" +
    "\ufeef\036\ufeef\037\ufeef\001\002\000\014\002\uffd8\031\uffd8" +
    "\033\uffd8\036\uffd8\037\uffd8\001\002\000\016\032\u023c\057" +
    "\u023e\061\u0241\064\012\065\u023b\067\u023d\001\002\000\004" +
    "\032\u0235\001\002\000\046\002\ufff9\033\u0230\057\110\065" +
    "\102\072\106\073\105\074\111\075\104\076\077\077\107" +
    "\100\100\101\113\102\074\103\112\104\073\105\076\106" +
    "\103\107\114\001\002\000\042\032\u0221\053\u013f\054\u0139" +
    "\055\u013b\057\u0148\060\u013c\061\u0138\065\u0160\067\u015e\072" +
    "\u0135\073\u0127\074\u0120\075\u0124\076\u0131\077\u0126\100\u012f" +
    "\001\002\000\030\003\uff92\034\uff92\035\uff92\053\uff92\054" +
    "\uff92\055\uff92\057\uff92\060\uff92\061\uff92\065\uff92\067\uff92" +
    "\001\002\000\026\006\142\032\u01ec\053\141\054\126\055" +
    "\127\057\140\060\130\061\125\065\134\067\133\001\002" +
    "\000\060\002\ufff8\003\031\032\067\034\020\041\024\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\004" +
    "\002\u01ea\001\002\000\014\002\uffd7\031\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\001\002\000\014\002\ufef0\031\ufef0\033\ufef0" +
    "\036\ufef0\037\ufef0\001\002\000\004\035\u01e2\001\002\000" +
    "\020\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\032\uffea" +
    "\065\u017f\001\002\000\014\002\uff57\031\uff57\033\uff57\036" +
    "\uff57\037\uff57\001\002\000\014\002\uff59\031\uff59\033\uff59" +
    "\036\uff59\037\uff59\001\002\000\026\006\142\032\u01c4\053" +
    "\141\054\126\055\127\057\140\060\130\061\125\065\134" +
    "\067\133\001\002\000\014\002\uff54\031\uff54\033\uff54\036" +
    "\uff54\037\uff54\001\002\000\006\032\u01ba\033\u01bb\001\002" +
    "\000\006\040\u01b8\065\u01b7\001\002\000\076\002\uff5b\007" +
    "\u0161\011\u0165\013\u0163\014\u0164\015\u0166\016\u0121\017\u011e" +
    "\020\u0133\021\u012c\031\uff5b\032\uffec\033\uff5b\036\uff5b\037" +
    "\uff5b\053\u013f\054\u0139\055\u013b\057\u0148\060\u013c\061\u0138" +
    "\065\u0160\067\u015e\072\u0135\073\u0127\074\u0120\075\u0124\076" +
    "\u0131\077\u0126\100\u012f\001\002\000\056\003\031\032\067" +
    "\034\020\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uffda\031\uffda\033\uffda\036\uffda" +
    "\037\uffda\001\002\000\016\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\032\uffe7\001\002\000\044\003\uff90\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\032\uffe9\034\uff90\035" +
    "\uff90\053\uff90\054\uff90\055\uff90\057\uff90\060\uff90\061\uff90" +
    "\065\uff90\067\uff90\001\002\000\014\002\ufef1\031\ufef1\033" +
    "\ufef1\036\ufef1\037\ufef1\001\002\000\004\037\u01b5\001\002" +
    "\000\010\032\u01a0\033\u01a2\067\u01a1\001\002\000\004\002" +
    "\ufffa\001\002\000\014\002\uff5a\031\uff5a\033\uff5a\036\uff5a" +
    "\037\uff5a\001\002\000\014\002\uff58\031\uff58\033\uff58\036" +
    "\uff58\037\uff58\001\002\000\014\002\uffd9\031\uffd9\033\uffd9" +
    "\036\uffd9\037\uffd9\001\002\000\014\015\u0199\016\u0121\017" +
    "\u011e\020\u0133\021\u012c\001\002\000\046\032\u018b\033\u018d" +
    "\057\110\065\102\072\106\073\105\074\111\075\104\076" +
    "\077\077\107\100\100\101\113\102\074\103\112\104\073" +
    "\105\076\106\103\107\114\001\002\000\016\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\032\uffe8\001\002\000\030" +
    "\003\307\034\311\035\310\053\312\054\301\055\302\057" +
    "\313\060\303\061\277\065\306\067\304\001\002\000\006" +
    "\032\260\067\261\001\002\000\046\003\uff91\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\032\uffeb\033\255\034\uff91" +
    "\035\uff91\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91\061" +
    "\uff91\065\uff91\067\uff91\001\002\000\014\002\uff55\031\uff55" +
    "\033\uff55\036\uff55\037\uff55\001\002\000\016\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\032\uffe5\001\002\000\006" +
    "\032\236\067\237\001\002\000\004\002\ufff5\001\002\000" +
    "\016\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\032\uffe6" +
    "\001\002\000\006\032\063\033\064\001\002\000\014\002" +
    "\uffdb\031\uffdb\033\uffdb\036\uffdb\037\uffdb\001\002\000\014" +
    "\002\uff56\031\uff56\033\uff56\036\uff56\037\uff56\001\002\000" +
    "\014\002\uffd6\031\uffd6\033\uffd6\036\uffd6\037\uffd6\001\002" +
    "\000\006\033\223\036\222\001\002\000\004\036\065\001" +
    "\002\000\060\003\031\032\067\034\020\037\071\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\004\032\124\001\002\000\044\033\101\057\110\065\102" +
    "\072\106\073\105\074\111\075\104\076\077\077\107\100" +
    "\100\101\113\102\074\103\112\104\073\105\076\106\103" +
    "\107\114\001\002\000\004\037\072\001\002\000\004\002" +
    "\ufff2\001\002\000\004\002\ufff1\001\002\000\006\033\uff74" +
    "\040\uff74\001\002\000\006\033\uff76\040\uff76\001\002\000" +
    "\006\033\117\040\120\001\002\000\006\033\uff73\040\uff73" +
    "\001\002\000\006\033\uff7d\040\uff7d\001\002\000\006\033" +
    "\uff7b\040\uff7b\001\002\000\004\040\115\001\002\000\006" +
    "\033\uff78\040\uff78\001\002\000\006\033\uff72\040\uff72\001" +
    "\002\000\006\033\uff7e\040\uff7e\001\002\000\006\033\uff80" +
    "\040\uff80\001\002\000\006\033\uff7a\040\uff7a\001\002\000" +
    "\006\033\uff7c\040\uff7c\001\002\000\006\033\uff79\040\uff79" +
    "\001\002\000\006\033\uff7f\040\uff7f\001\002\000\006\033" +
    "\uff75\040\uff75\001\002\000\006\033\uff77\040\uff77\001\002" +
    "\000\006\033\uff71\040\uff71\001\002\000\070\002\uff36\003" +
    "\031\031\uff36\032\067\033\uff36\034\020\036\uff36\037\uff36" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff32\031\uff32\033\uff32\036\uff32\037\uff32" +
    "\001\002\000\004\040\122\001\002\000\070\002\uff4f\003" +
    "\031\031\uff4f\032\067\033\uff4f\034\020\036\uff4f\037\uff4f" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff49\031\uff49\033\uff49\036\uff49\037\uff49" +
    "\001\002\000\070\002\uff51\003\031\031\uff51\032\067\033" +
    "\uff51\034\020\036\uff51\037\uff51\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff4b\031" +
    "\uff4b\033\uff4b\036\uff4b\037\uff4b\001\002\000\024\006\142" +
    "\053\141\054\126\055\127\057\140\060\130\061\125\065" +
    "\134\067\133\001\002\000\032\004\ufeb7\005\ufeb7\015\ufeb7" +
    "\022\ufeb7\023\ufeb7\024\ufeb7\025\ufeb7\026\ufeb7\027\ufeb7\031" +
    "\ufeb7\033\ufeb7\036\ufeb7\001\002\000\032\004\ufea7\005\ufea7" +
    "\015\ufeb9\022\ufeb9\023\ufeb9\024\ufeb9\025\ufeb9\026\ufeb9\027" +
    "\ufeb9\031\ufea7\033\ufea7\036\ufea7\001\002\000\032\004\ufeb5" +
    "\005\ufeb5\015\ufeb5\022\ufeb5\023\ufeb5\024\ufeb5\025\ufeb5\026" +
    "\ufeb5\027\ufeb5\031\ufeb5\033\ufeb5\036\ufeb5\001\002\000\032" +
    "\004\ufeb4\005\ufeb4\015\ufeb4\022\ufeb4\023\ufeb4\024\ufeb4\025" +
    "\ufeb4\026\ufeb4\027\ufeb4\031\ufeb4\033\ufeb4\036\ufeb4\001\002" +
    "\000\010\031\ufec3\033\ufec3\036\ufec3\001\002\000\020\015" +
    "\217\022\210\023\211\024\215\025\214\026\213\027\216" +
    "\001\002\000\032\004\ufeb8\005\ufeb8\015\ufeb8\022\ufeb8\023" +
    "\ufeb8\024\ufeb8\025\ufeb8\026\ufeb8\027\ufeb8\031\ufeb8\033\ufeb8" +
    "\036\ufeb8\001\002\000\042\004\ufea9\005\ufea9\006\163\015" +
    "\ufebb\022\ufebb\023\ufebb\024\ufebb\025\ufebb\026\ufebb\027\ufebb" +
    "\031\ufea9\033\ufea9\036\ufea9\053\156\054\155\065\153\001" +
    "\002\000\010\031\ufec2\033\ufec2\036\ufec2\001\002\000\014" +
    "\004\171\005\172\031\ufec0\033\ufec0\036\ufec0\001\002\000" +
    "\004\033\200\001\002\000\032\004\ufeb6\005\ufeb6\015\ufeb6" +
    "\022\ufeb6\023\ufeb6\024\ufeb6\025\ufeb6\026\ufeb6\027\ufeb6\031" +
    "\ufeb6\033\ufeb6\036\ufeb6\001\002\000\032\004\ufea8\005\ufea8" +
    "\015\ufeba\022\ufeba\023\ufeba\024\ufeba\025\ufeba\026\ufeba\027" +
    "\ufeba\031\ufea8\033\ufea8\036\ufea8\001\002\000\012\032\154" +
    "\053\156\054\155\065\153\001\002\000\014\004\144\005" +
    "\146\031\ufeb3\033\ufeb3\036\ufeb3\001\002\000\022\053\ufeab" +
    "\054\ufeab\055\ufeab\057\ufeab\060\ufeab\061\ufeab\065\ufeab\067" +
    "\ufeab\001\002\000\022\053\151\054\147\055\127\057\140" +
    "\060\130\061\125\065\150\067\133\001\002\000\022\053" +
    "\ufeaa\054\ufeaa\055\ufeaa\057\ufeaa\060\ufeaa\061\ufeaa\065\ufeaa" +
    "\067\ufeaa\001\002\000\032\004\ufeb9\005\ufeb9\015\ufeb9\022" +
    "\ufeb9\023\ufeb9\024\ufeb9\025\ufeb9\026\ufeb9\027\ufeb9\031\ufeb9" +
    "\033\ufeb9\036\ufeb9\001\002\000\032\004\ufebb\005\ufebb\015" +
    "\ufebb\022\ufebb\023\ufebb\024\ufebb\025\ufebb\026\ufebb\027\ufebb" +
    "\031\ufebb\033\ufebb\036\ufebb\001\002\000\032\004\ufeba\005" +
    "\ufeba\015\ufeba\022\ufeba\023\ufeba\024\ufeba\025\ufeba\026\ufeba" +
    "\027\ufeba\031\ufeba\033\ufeba\036\ufeba\001\002\000\010\031" +
    "\ufec1\033\ufec1\036\ufec1\001\002\000\016\004\ufea9\005\ufea9" +
    "\031\ufea9\033\ufea9\036\ufea9\064\ufea9\001\002\000\024\006" +
    "\163\053\141\054\126\055\127\057\140\060\130\061\125" +
    "\065\161\067\133\001\002\000\016\004\ufea7\005\ufea7\031" +
    "\ufea7\033\ufea7\036\ufea7\064\ufea7\001\002\000\016\004\ufea8" +
    "\005\ufea8\031\ufea8\033\ufea8\036\ufea8\064\ufea8\001\002\000" +
    "\012\031\ufeb0\033\ufeb0\036\ufeb0\064\ufeb0\001\002\000\004" +
    "\033\177\001\002\000\026\004\ufea9\005\ufea9\015\ufebb\022" +
    "\ufebb\023\ufebb\024\ufebb\025\ufebb\026\ufebb\027\ufebb\033\170" +
    "\001\002\000\006\004\171\005\172\001\002\000\012\032" +
    "\166\053\156\054\155\065\153\001\002\000\004\033\165" +
    "\001\002\000\010\031\ufebe\033\ufebe\036\ufebe\001\002\000" +
    "\012\006\163\053\156\054\155\065\167\001\002\000\010" +
    "\004\ufea9\005\ufea9\033\170\001\002\000\012\031\ufeac\033" +
    "\ufeac\036\ufeac\064\ufeac\001\002\000\012\006\163\053\156" +
    "\054\155\065\153\001\002\000\012\006\163\053\156\054" +
    "\155\065\153\001\002\000\012\031\ufeae\033\ufeae\036\ufeae" +
    "\064\ufeae\001\002\000\016\004\171\005\172\031\ufeb1\033" +
    "\ufeb1\036\ufeb1\064\ufeb1\001\002\000\012\031\ufeaf\033\ufeaf" +
    "\036\ufeaf\064\ufeaf\001\002\000\016\004\171\005\172\031" +
    "\ufeb2\033\ufeb2\036\ufeb2\064\ufeb2\001\002\000\012\031\ufead" +
    "\033\ufead\036\ufead\064\ufead\001\002\000\004\036\201\001" +
    "\002\000\056\003\031\032\067\034\020\041\024\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\037" +
    "\203\001\002\000\070\002\ufee7\003\031\031\ufee7\032\067" +
    "\033\ufee7\034\020\036\ufee7\037\ufee7\041\024\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufee6" +
    "\031\ufee6\033\ufee6\036\ufee6\037\ufee6\001\002\000\004\064" +
    "\206\001\002\000\056\003\031\032\067\034\020\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\010\031\ufebf\033\ufebf\036\ufebf\001\002\000\022\053\ufea6" +
    "\054\ufea6\055\ufea6\057\ufea6\060\ufea6\061\ufea6\065\ufea6\067" +
    "\ufea6\001\002\000\022\053\ufea5\054\ufea5\055\ufea5\057\ufea5" +
    "\060\ufea5\061\ufea5\065\ufea5\067\ufea5\001\002\000\022\053" +
    "\151\054\147\055\127\057\140\060\130\061\125\065\150" +
    "\067\133\001\002\000\022\053\ufea2\054\ufea2\055\ufea2\057" +
    "\ufea2\060\ufea2\061\ufea2\065\ufea2\067\ufea2\001\002\000\022" +
    "\053\ufea4\054\ufea4\055\ufea4\057\ufea4\060\ufea4\061\ufea4\065" +
    "\ufea4\067\ufea4\001\002\000\022\053\ufea3\054\ufea3\055\ufea3" +
    "\057\ufea3\060\ufea3\061\ufea3\065\ufea3\067\ufea3\001\002\000" +
    "\022\053\ufea1\054\ufea1\055\ufea1\057\ufea1\060\ufea1\061\ufea1" +
    "\065\ufea1\067\ufea1\001\002\000\022\053\ufea0\054\ufea0\055" +
    "\ufea0\057\ufea0\060\ufea0\061\ufea0\065\ufea0\067\ufea0\001\002" +
    "\000\032\004\ufebd\005\ufebd\015\217\022\210\023\211\024" +
    "\215\025\214\026\213\027\216\031\ufebd\033\ufebd\036\ufebd" +
    "\001\002\000\014\004\ufebc\005\ufebc\031\ufebc\033\ufebc\036" +
    "\ufebc\001\002\000\060\003\031\032\067\034\020\037\234" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\062\003\031\032\067\034\020\036\224\037\226" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\062\002\ufffd\003\031\032\067\034\020\037\231" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\037\227\001\002\000\004\002\uffed\001\002" +
    "\000\004\002\uffee\001\002\000\006\002\ufffe\037\232\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "\000\004\037\235\001\002\000\004\002\uffef\001\002\000" +
    "\004\002\ufff0\001\002\000\006\033\244\067\243\001\002" +
    "\000\004\033\240\001\002\000\004\040\241\001\002\000" +
    "\070\002\uff19\003\031\031\uff19\032\067\033\uff19\034\020" +
    "\036\uff19\037\uff19\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uff15\031\uff15\033\uff15" +
    "\036\uff15\037\uff15\001\002\000\006\033\247\040\250\001" +
    "\002\000\004\040\245\001\002\000\070\002\uff1b\003\031" +
    "\031\uff1b\032\067\033\uff1b\034\020\036\uff1b\037\uff1b\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff17\031\uff17\033\uff17\036\uff17\037\uff17\001" +
    "\002\000\072\002\uff1c\003\031\031\uff1c\032\067\033\uff1c" +
    "\034\020\036\uff1c\037\uff1c\040\252\041\024\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\070\002\uff1a" +
    "\003\031\031\uff1a\032\067\033\uff1a\034\020\036\uff1a\037" +
    "\uff1a\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff16\031\uff16\033\uff16\036\uff16\037" +
    "\uff16\001\002\000\070\002\uff1e\003\031\031\uff1e\032\067" +
    "\033\uff1e\034\020\036\uff1e\037\uff1e\041\024\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uff18" +
    "\031\uff18\033\uff18\036\uff18\037\uff18\001\002\000\014\002" +
    "\uff1d\031\uff1d\033\uff1d\036\uff1d\037\uff1d\001\002\000\004" +
    "\040\256\001\002\000\070\002\uff50\003\031\031\uff50\032" +
    "\067\033\uff50\034\020\036\uff50\037\uff50\041\024\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff4a\031\uff4a\033\uff4a\036\uff4a\037\uff4a\001\002\000\006" +
    "\033\266\067\265\001\002\000\004\033\262\001\002\000" +
    "\004\040\263\001\002\000\070\002\uff0f\003\031\031\uff0f" +
    "\032\067\033\uff0f\034\020\036\uff0f\037\uff0f\041\024\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uff0b\031\uff0b\033\uff0b\036\uff0b\037\uff0b\001\002\000" +
    "\006\033\271\040\272\001\002\000\004\040\267\001\002" +
    "\000\070\002\uff11\003\031\031\uff11\032\067\033\uff11\034" +
    "\020\036\uff11\037\uff11\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uff0d\031\uff0d\033" +
    "\uff0d\036\uff0d\037\uff0d\001\002\000\072\002\uff12\003\031" +
    "\031\uff12\032\067\033\uff12\034\020\036\uff12\037\uff12\040" +
    "\274\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\070\002\uff10\003\031\031\uff10\032\067\033" +
    "\uff10\034\020\036\uff10\037\uff10\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff0c\031" +
    "\uff0c\033\uff0c\036\uff0c\037\uff0c\001\002\000\070\002\uff14" +
    "\003\031\031\uff14\032\067\033\uff14\034\020\036\uff14\037" +
    "\uff14\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff0e\031\uff0e\033\uff0e\036\uff0e\037" +
    "\uff0e\001\002\000\014\002\uff13\031\uff13\033\uff13\036\uff13" +
    "\037\uff13\001\002\000\014\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\001\002\000\014\015\u0184\016\u0121\017\u011e" +
    "\020\u0133\021\u012c\001\002\000\014\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\001\002\000\014\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\001\002\000\014\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\001\002\000\014\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\001\002\000\014\002" +
    "\uff60\031\uff60\033\uff60\036\uff60\037\uff60\001\002\000\122" +
    "\002\uff5f\003\031\015\u0125\016\u0121\017\u011e\020\u0133\021" +
    "\u012c\031\uff5f\032\067\033\uff5f\034\020\036\uff5f\037\uff5f" +
    "\040\u011f\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\u0134\054\u0132\055\u0128\056\011" +
    "\057\u012d\060\u012b\061\u0129\064\012\065\u0123\067\u0122\070" +
    "\006\072\u0135\073\u0127\074\u0120\075\u0124\076\u0131\077\u0126" +
    "\100\u012f\001\002\000\056\003\031\032\067\034\020\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\065\u0116\001\002\000\006\035\315\065\314\001" +
    "\002\000\014\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\001\002\000\014\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\001\002\000\004\015\u0110\001\002\000\006\015\317" +
    "\065\316\001\002\000\010\015\373\034\371\040\372\001" +
    "\002\000\004\034\320\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\010\031\367\035\uffc9\040\uffc9\001\002\000\060\031\uff68" +
    "\035\uff68\040\uff68\053\uff68\054\uff68\057\uff68\061\uff68\065" +
    "\uff68\067\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076\uff68" +
    "\077\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105" +
    "\uff68\106\uff68\107\uff68\001\002\000\060\031\uff66\035\uff66" +
    "\040\uff66\053\uff66\054\uff66\057\uff66\061\uff66\065\uff66\067" +
    "\uff66\072\uff66\073\uff66\074\uff66\075\uff66\076\uff66\077\uff66" +
    "\100\uff66\101\uff66\102\uff66\103\uff66\104\uff66\105\uff66\106" +
    "\uff66\107\uff66\001\002\000\010\031\365\035\uffc6\040\uffc6" +
    "\001\002\000\060\031\uff65\035\uff65\040\uff65\053\uff65\054" +
    "\uff65\057\uff65\061\uff65\065\uff65\067\uff65\072\uff65\073\uff65" +
    "\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65\102" +
    "\uff65\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65\001\002" +
    "\000\060\031\uff6d\035\uff6d\040\uff6d\053\uff6d\054\uff6d\057" +
    "\uff6d\061\uff6d\065\uff6d\067\uff6d\072\uff6d\073\uff6d\074\uff6d" +
    "\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103" +
    "\uff6d\104\uff6d\105\uff6d\106\uff6d\107\uff6d\001\002\000\060" +
    "\031\uff6b\035\uff6b\040\uff6b\053\uff6b\054\uff6b\057\uff6b\061" +
    "\uff6b\065\uff6b\067\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b" +
    "\076\uff6b\077\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104" +
    "\uff6b\105\uff6b\106\uff6b\107\uff6b\001\002\000\010\031\363" +
    "\035\uffc8\040\uffc8\001\002\000\010\031\361\035\uffca\040" +
    "\uffca\001\002\000\060\031\uff64\035\uff64\040\uff64\053\uff64" +
    "\054\uff64\057\uff64\061\uff64\065\uff64\067\uff64\072\uff64\073" +
    "\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64\101\uff64" +
    "\102\uff64\103\uff64\104\uff64\105\uff64\106\uff64\107\uff64\001" +
    "\002\000\060\031\uff6e\035\uff6e\040\uff6e\053\uff6e\054\uff6e" +
    "\057\uff6e\061\uff6e\065\uff6e\067\uff6e\072\uff6e\073\uff6e\074" +
    "\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e" +
    "\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\001\002\000" +
    "\060\031\uff70\035\uff70\040\uff70\053\uff70\054\uff70\057\uff70" +
    "\061\uff70\065\uff70\067\uff70\072\uff70\073\uff70\074\uff70\075" +
    "\uff70\076\uff70\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70" +
    "\104\uff70\105\uff70\106\uff70\107\uff70\001\002\000\060\031" +
    "\uff6a\035\uff6a\040\uff6a\053\uff6a\054\uff6a\057\uff6a\061\uff6a" +
    "\065\uff6a\067\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076" +
    "\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a" +
    "\105\uff6a\106\uff6a\107\uff6a\001\002\000\060\031\uff6c\035" +
    "\uff6c\040\uff6c\053\uff6c\054\uff6c\057\uff6c\061\uff6c\065\uff6c" +
    "\067\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077" +
    "\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c" +
    "\106\uff6c\107\uff6c\001\002\000\010\031\357\035\uffc7\040" +
    "\uffc7\001\002\000\010\031\355\035\uffc5\040\uffc5\001\002" +
    "\000\004\035\352\001\002\000\060\031\uff6f\035\uff6f\040" +
    "\uff6f\053\uff6f\054\uff6f\057\uff6f\061\uff6f\065\uff6f\067\uff6f" +
    "\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100" +
    "\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f" +
    "\107\uff6f\001\002\000\060\031\uff67\035\uff67\040\uff67\053" +
    "\uff67\054\uff67\057\uff67\061\uff67\065\uff67\067\uff67\072\uff67" +
    "\073\uff67\074\uff67\075\uff67\076\uff67\077\uff67\100\uff67\101" +
    "\uff67\102\uff67\103\uff67\104\uff67\105\uff67\106\uff67\107\uff67" +
    "\001\002\000\060\031\uff69\035\uff69\040\uff69\053\uff69\054" +
    "\uff69\057\uff69\061\uff69\065\uff69\067\uff69\072\uff69\073\uff69" +
    "\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101\uff69\102" +
    "\uff69\103\uff69\104\uff69\105\uff69\106\uff69\107\uff69\001\002" +
    "\000\060\031\347\035\uffc4\040\uffc4\053\330\054\337\057" +
    "\340\061\324\065\331\067\321\072\335\073\334\074\342" +
    "\075\333\076\326\077\336\100\327\101\344\102\322\103" +
    "\343\104\323\105\325\106\332\107\346\001\002\000\060" +
    "\031\uff63\035\uff63\040\uff63\053\uff63\054\uff63\057\uff63\061" +
    "\uff63\065\uff63\067\uff63\072\uff63\073\uff63\074\uff63\075\uff63" +
    "\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104" +
    "\uff63\105\uff63\106\uff63\107\uff63\001\002\000\052\053\330" +
    "\054\337\057\340\061\324\065\331\067\321\072\335\073" +
    "\334\074\342\075\333\076\326\077\336\100\327\101\344" +
    "\102\322\103\343\104\323\105\325\106\332\107\346\001" +
    "\002\000\006\035\uffbc\040\uffbc\001\002\000\006\035\uffbd" +
    "\040\uffbd\001\002\000\004\040\353\001\002\000\056\003" +
    "\031\032\067\034\020\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uffd0\031\uffd0\033" +
    "\uffd0\036\uffd0\037\uffd0\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\006\035\uffbe\040\uffbe\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\006\035\uffc0\040\uffc0\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\006\035\uffc3\040\uffc3\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\006\035\uffc1\040\uffc1\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\006\035\uffbf\040\uffbf\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\006\035\uffc2\040\uffc2\001\002\000\052\053\330\054\337" +
    "\057\340\061\324\065\331\067\321\072\335\073\334\074" +
    "\342\075\333\076\326\077\336\100\327\101\344\102\322" +
    "\103\343\104\323\105\325\106\332\107\346\001\002\000" +
    "\056\003\031\032\067\034\020\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\054\034\374\053" +
    "\330\054\337\057\340\061\324\065\331\067\321\072\335" +
    "\073\334\074\342\075\333\076\326\077\336\100\327\101" +
    "\344\102\322\103\343\104\323\105\325\106\332\107\346" +
    "\001\002\000\054\035\u0101\053\330\054\337\057\340\061" +
    "\324\065\331\067\321\072\335\073\334\074\342\075\333" +
    "\076\326\077\336\100\327\101\344\102\322\103\343\104" +
    "\323\105\325\106\332\107\346\001\002\000\004\035\376" +
    "\001\002\000\004\040\377\001\002\000\056\003\031\032" +
    "\067\034\020\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uffce\031\uffce\033\uffce\036" +
    "\uffce\037\uffce\001\002\000\004\040\u0109\001\002\000\006" +
    "\035\u0103\040\u0104\001\002\000\060\003\031\032\067\034" +
    "\020\040\u0106\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\056\003\031\032\067\034\020\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uffcc\031\uffcc\033\uffcc\036\uffcc\037\uffcc\001" +
    "\002\000\056\003\031\032\067\034\020\041\024\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uffcb\031\uffcb\033\uffcb\036\uffcb\037\uffcb\001\002\000\014" +
    "\002\uffd5\031\uffd5\033\uffd5\036\uffd5\037\uffd5\001\002\000" +
    "\056\003\031\032\067\034\020\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uffcd\031" +
    "\uffcd\033\uffcd\036\uffcd\037\uffcd\001\002\000\014\002\uffd4" +
    "\031\uffd4\033\uffd4\036\uffd4\037\uffd4\001\002\000\004\035" +
    "\u010d\001\002\000\004\040\u010e\001\002\000\056\003\031" +
    "\032\067\034\020\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uffcf\031\uffcf\033\uffcf" +
    "\036\uffcf\037\uffcf\001\002\000\004\034\u0111\001\002\000" +
    "\052\053\330\054\337\057\340\061\324\065\331\067\321" +
    "\072\335\073\334\074\342\075\333\076\326\077\336\100" +
    "\327\101\344\102\322\103\343\104\323\105\325\106\332" +
    "\107\346\001\002\000\004\035\u0113\001\002\000\004\040" +
    "\u0114\001\002\000\056\003\031\032\067\034\020\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uffd1\031\uffd1\033\uffd1\036\uffd1\037\uffd1\001\002" +
    "\000\004\015\u0117\001\002\000\004\034\u0118\001\002\000" +
    "\052\053\330\054\337\057\340\061\324\065\331\067\321" +
    "\072\335\073\334\074\342\075\333\076\326\077\336\100" +
    "\327\101\344\102\322\103\343\104\323\105\325\106\332" +
    "\107\346\001\002\000\004\035\u011a\001\002\000\004\040" +
    "\u011b\001\002\000\056\003\031\032\067\034\020\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uffd2\031\uffd2\033\uffd2\036\uffd2\037\uffd2\001\002" +
    "\000\014\002\uff9a\031\uff9a\033\uff9a\036\uff9a\037\uff9a\001" +
    "\002\000\040\053\uff98\054\uff98\055\uff98\057\uff98\060\uff98" +
    "\061\uff98\065\uff98\067\uff98\072\uff98\073\uff98\074\uff98\075" +
    "\uff98\076\uff98\077\uff98\100\uff98\001\002\000\070\002\uff62" +
    "\003\031\031\uff62\032\067\033\uff62\034\020\036\uff62\037" +
    "\uff62\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\072\002\uff85\003\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\045\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85" +
    "\064\uff85\065\uff85\067\uff85\070\uff85\001\002\000\040\053" +
    "\uff99\054\uff99\055\uff99\057\uff99\060\uff99\061\uff99\065\uff99" +
    "\067\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077" +
    "\uff99\100\uff99\001\002\000\022\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\032\uffea\040\uff8e\065\u017f\001\002\000" +
    "\100\002\uff5b\007\u0161\011\u0165\013\u0163\014\u0164\015\u0166" +
    "\016\u0121\017\u011e\020\u0133\021\u012c\031\uff5b\032\uffec\033" +
    "\uff5b\036\uff5b\037\uff5b\040\uff8f\053\u013f\054\u0139\055\u013b" +
    "\057\u0148\060\u013c\061\u0138\065\u0160\067\u015e\072\u0135\073" +
    "\u0127\074\u0120\075\u0124\076\u0131\077\u0126\100\u012f\001\002" +
    "\000\072\002\uff84\003\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\045\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\064\uff84" +
    "\065\uff84\067\uff84\070\uff84\001\002\000\042\040\u014a\053" +
    "\u013f\054\u0139\055\u013b\057\u0148\060\u013c\061\u0138\065\u0146" +
    "\067\u0144\072\u0135\073\u0127\074\u0120\075\u0124\076\u0131\077" +
    "\u0126\100\u012f\001\002\000\072\002\uff82\003\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\045\uff82\047\uff82\050\uff82\051\uff82" +
    "\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060" +
    "\uff82\061\uff82\064\uff82\065\uff82\067\uff82\070\uff82\001\002" +
    "\000\072\002\uff86\003\uff86\031\uff86\032\uff86\033\uff86\034" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
    "\045\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\064\uff86" +
    "\065\uff86\067\uff86\070\uff86\001\002\000\020\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\032\uffe7\040\uff88\001\002" +
    "\000\046\003\uff90\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\032\uffe9\034\uff90\035\uff90\040\uff8b\053\uff90\054\uff90" +
    "\055\uff90\057\uff90\060\uff90\061\uff90\065\uff90\067\uff90\001" +
    "\002\000\014\002\uff5e\031\uff5e\033\uff5e\036\uff5e\037\uff5e" +
    "\001\002\000\020\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\032\uffe8\040\uff89\001\002\000\040\053\uff96\054\uff96" +
    "\055\uff96\057\uff96\060\uff96\061\uff96\065\uff96\067\uff96\072" +
    "\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96" +
    "\001\002\000\050\003\uff91\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\032\uffeb\033\255\034\uff91\035\uff91\040\uff8a" +
    "\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91\061\uff91\065" +
    "\uff91\067\uff91\001\002\000\040\053\u013f\054\u0139\055\u013b" +
    "\057\u0140\060\u013c\061\u0138\065\u013e\067\u013d\072\u0135\073" +
    "\u0127\074\u0120\075\u0124\076\u0131\077\u0126\100\u012f\001\002" +
    "\000\072\002\uff81\003\uff81\031\uff81\032\uff81\033\uff81\034" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\045\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\064\uff81" +
    "\065\uff81\067\uff81\070\uff81\001\002\000\004\040\u0136\001" +
    "\002\000\072\002\uff83\003\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\045\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\064" +
    "\uff83\065\uff83\067\uff83\070\uff83\001\002\000\020\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\032\uffe5\040\uff8c\001" +
    "\002\000\040\053\uff97\054\uff97\055\uff97\057\uff97\060\uff97" +
    "\061\uff97\065\uff97\067\uff97\072\uff97\073\uff97\074\uff97\075" +
    "\uff97\076\uff97\077\uff97\100\uff97\001\002\000\020\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\032\uffe6\040\uff8d\001" +
    "\002\000\072\002\uff87\003\uff87\031\uff87\032\uff87\033\uff87" +
    "\034\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\045\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\064" +
    "\uff87\065\uff87\067\uff87\070\uff87\001\002\000\070\002\uff9e" +
    "\003\031\031\uff9e\032\067\033\uff9e\034\020\036\uff9e\037" +
    "\uff9e\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff9f\031\uff9f\033\uff9f\036\uff9f\037" +
    "\uff9f\001\002\000\072\002\uff8b\003\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\045\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\064\uff8b\065\uff8b\067\uff8b\070\uff8b\001\002\000\072" +
    "\002\uff8c\003\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c" +
    "\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\064\uff8c\065\uff8c" +
    "\067\uff8c\070\uff8c\001\002\000\004\040\u0142\001\002\000" +
    "\072\002\uff88\003\uff88\031\uff88\032\uff88\033\uff88\034\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\045" +
    "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\064\uff88\065" +
    "\uff88\067\uff88\070\uff88\001\002\000\072\002\uff89\003\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\045\uff89\047\uff89\050\uff89" +
    "\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\064\uff89\065\uff89\067\uff89\070\uff89" +
    "\001\002\000\016\002\uff8e\031\uff8e\033\uff8e\036\uff8e\037" +
    "\uff8e\040\uff94\001\002\000\016\002\uff8f\031\uff8f\033\uff8f" +
    "\036\uff8f\037\uff8f\040\uff95\001\002\000\072\002\uff8d\003" +
    "\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\045\uff8d\047\uff8d\050" +
    "\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d" +
    "\057\uff8d\060\uff8d\061\uff8d\064\uff8d\065\uff8d\067\uff8d\070" +
    "\uff8d\001\002\000\016\002\uff8a\031\uff8a\033\uff8a\036\uff8a" +
    "\037\uff8a\040\uff93\001\002\000\014\002\uff9b\031\uff9b\033" +
    "\uff9b\036\uff9b\037\uff9b\001\002\000\070\002\uffa9\003\031" +
    "\031\uffa9\032\067\033\uffa9\034\020\036\uffa9\037\uffa9\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uffa7\031\uffa7\033\uffa7\036\uffa7\037\uffa7\001" +
    "\002\000\102\002\uff8e\003\uff8e\007\uff06\010\uff06\011\uff06" +
    "\012\uff06\031\uff8e\032\uff8e\033\uff8e\034\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\045\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\064\uff8e\065\uff8e\067\uff8e" +
    "\070\uff8e\001\002\000\004\040\u015d\001\002\000\102\002" +
    "\uff8f\003\uff8f\007\uff07\010\uff07\011\uff07\012\uff07\031\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\045\uff8f\047\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060" +
    "\uff8f\061\uff8f\064\uff8f\065\uff8f\067\uff8f\070\uff8f\001\002" +
    "\000\012\007\u0150\010\u0151\011\u014f\012\u0152\001\002\000" +
    "\072\002\uff8a\003\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\045" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\064\uff8a\065" +
    "\uff8a\067\uff8a\070\uff8a\001\002\000\072\002\uff9c\003\031" +
    "\031\uff9c\032\067\033\uff9c\034\020\036\uff9c\037\uff9c\040" +
    "\u014c\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\070\002\uffa4\003\031\031\uffa4\032\067\033" +
    "\uffa4\034\020\036\uffa4\037\uffa4\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uffa5\031" +
    "\uffa5\033\uffa5\036\uffa5\037\uffa5\001\002\000\070\002\uffaa" +
    "\003\031\031\uffaa\032\067\033\uffaa\034\020\036\uffaa\037" +
    "\uffaa\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff9d\031\uff9d\033\uff9d\036\uff9d\037" +
    "\uff9d\001\002\000\014\002\uffa8\031\uffa8\033\uffa8\036\uffa8" +
    "\037\uffa8\001\002\000\006\065\u0153\067\u0154\001\002\000" +
    "\006\065\u0153\067\u0154\001\002\000\006\065\u0153\067\u0154" +
    "\001\002\000\006\065\u0153\067\u0154\001\002\000\014\007" +
    "\uff07\010\uff07\011\uff07\012\uff07\040\uff07\001\002\000\014" +
    "\007\uff06\010\uff06\011\uff06\012\uff06\040\uff06\001\002\000" +
    "\014\007\u0150\010\u0151\011\u014f\012\u0152\040\uff02\001\002" +
    "\000\004\040\ufefe\001\002\000\014\007\u0150\010\u0151\011" +
    "\u014f\012\u0152\040\uff03\001\002\000\004\040\ufeff\001\002" +
    "\000\014\007\u0150\010\u0151\011\u014f\012\u0152\040\uff05\001" +
    "\002\000\004\040\uff01\001\002\000\014\007\u0150\010\u0151" +
    "\011\u014f\012\u0152\040\uff04\001\002\000\004\040\uff00\001" +
    "\002\000\014\002\uffa6\031\uffa6\033\uffa6\036\uffa6\037\uffa6" +
    "\001\002\000\006\033\uff8e\040\uff8e\001\002\000\040\053" +
    "\u013f\054\u0139\055\u013b\057\u0140\060\u013c\061\u0138\065\u013e" +
    "\067\u013d\072\u0135\073\u0127\074\u0120\075\u0124\076\u0131\077" +
    "\u0126\100\u012f\001\002\000\006\033\uff8f\040\uff8f\001\002" +
    "\000\004\040\u0179\001\002\000\004\040\u0177\001\002\000" +
    "\072\002\ufef5\003\031\031\ufef5\032\067\033\ufef5\034\020" +
    "\036\ufef5\037\ufef5\040\u0174\041\024\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\072\002\ufef4\003\031" +
    "\031\ufef4\032\067\033\ufef4\034\020\036\ufef4\037\ufef4\040" +
    "\u0171\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\040\u016f\001\002\000\042\040\u0169\053" +
    "\u013f\054\u0139\055\u013b\057\u0148\060\u013c\061\u0138\065\u0146" +
    "\067\u0144\072\u0135\073\u0127\074\u0120\075\u0124\076\u0131\077" +
    "\u0126\100\u012f\001\002\000\004\040\u016e\001\002\000\072" +
    "\002\uffad\003\031\031\uffad\032\067\033\uffad\034\020\036" +
    "\uffad\037\uffad\040\u016b\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\070\002\uffb5\003\031\031" +
    "\uffb5\032\067\033\uffb5\034\020\036\uffb5\037\uffb5\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uffb6\031\uffb6\033\uffb6\036\uffb6\037\uffb6\001\002" +
    "\000\070\002\uffbb\003\031\031\uffbb\032\067\033\uffbb\034" +
    "\020\036\uffbb\037\uffbb\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uffae\031\uffae\033" +
    "\uffae\036\uffae\037\uffae\001\002\000\014\002\uffb9\031\uffb9" +
    "\033\uffb9\036\uffb9\037\uffb9\001\002\000\014\002\uffb7\031" +
    "\uffb7\033\uffb7\036\uffb7\037\uffb7\001\002\000\070\002\ufef8" +
    "\003\031\031\ufef8\032\067\033\ufef8\034\020\036\ufef8\037" +
    "\ufef8\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\ufef6\031\ufef6\033\ufef6\036\ufef6\037" +
    "\ufef6\001\002\000\070\002\ufefc\003\031\031\ufefc\032\067" +
    "\033\ufefc\034\020\036\ufefc\037\ufefc\041\024\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufef2" +
    "\031\ufef2\033\ufef2\036\ufef2\037\ufef2\001\002\000\014\002" +
    "\ufefa\031\ufefa\033\ufefa\036\ufefa\037\ufefa\001\002\000\070" +
    "\002\ufefd\003\031\031\ufefd\032\067\033\ufefd\034\020\036" +
    "\ufefd\037\ufefd\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\ufef3\031\ufef3\033\ufef3\036" +
    "\ufef3\037\ufef3\001\002\000\014\002\ufefb\031\ufefb\033\ufefb" +
    "\036\ufefb\037\ufefb\001\002\000\070\002\uffaf\003\031\031" +
    "\uffaf\032\067\033\uffaf\034\020\036\uffaf\037\uffaf\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uffb0\031\uffb0\033\uffb0\036\uffb0\037\uffb0\001\002" +
    "\000\070\002\ufef9\003\031\031\ufef9\032\067\033\ufef9\034" +
    "\020\036\ufef9\037\ufef9\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\ufef7\031\ufef7\033" +
    "\ufef7\036\ufef7\037\ufef7\001\002\000\004\040\u017d\001\002" +
    "\000\014\002\uffac\031\uffac\033\uffac\036\uffac\037\uffac\001" +
    "\002\000\070\002\uffba\003\031\031\uffba\032\067\033\uffba" +
    "\034\020\036\uffba\037\uffba\041\024\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\uffb8\031\uffb8" +
    "\033\uffb8\036\uffb8\037\uffb8\001\002\000\004\040\u0180\001" +
    "\002\000\070\002\uff5d\003\031\031\uff5d\032\067\033\uff5d" +
    "\034\020\036\uff5d\037\uff5d\041\024\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\uff5c\031\uff5c" +
    "\033\uff5c\036\uff5c\037\uff5c\001\002\000\014\002\uff61\031" +
    "\uff61\033\uff61\036\uff61\037\uff61\001\002\000\040\053\u013f" +
    "\054\u0139\055\u013b\057\u0148\060\u013c\061\u0138\065\u0160\067" +
    "\u015e\072\u0135\073\u0127\074\u0120\075\u0124\076\u0131\077\u0126" +
    "\100\u012f\001\002\000\040\053\u013f\054\u0139\055\u013b\057" +
    "\u0148\060\u013c\061\u0138\065\u0160\067\u015e\072\u0135\073\u0127" +
    "\074\u0120\075\u0124\076\u0131\077\u0126\100\u012f\001\002\000" +
    "\004\040\u0186\001\002\000\070\002\uffa2\003\031\031\uffa2" +
    "\032\067\033\uffa2\034\020\036\uffa2\037\uffa2\041\024\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uffa3\031\uffa3\033\uffa3\036\uffa3\037\uffa3\001\002\000" +
    "\004\040\u0189\001\002\000\070\002\uffa0\003\031\031\uffa0" +
    "\032\067\033\uffa0\034\020\036\uffa0\037\uffa0\041\024\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uffa1\031\uffa1\033\uffa1\036\uffa1\037\uffa1\001\002\000" +
    "\042\057\110\065\102\072\106\073\105\074\111\075\104" +
    "\076\077\077\107\100\100\101\113\102\074\103\112\104" +
    "\073\105\076\106\103\107\114\001\002\000\004\033\u018f" +
    "\001\002\000\070\002\uff4d\003\031\031\uff4d\032\067\033" +
    "\uff4d\034\020\036\uff4d\037\uff4d\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff47\031" +
    "\uff47\033\uff47\036\uff47\037\uff47\001\002\000\004\040\u0190" +
    "\001\002\000\070\002\uff4e\003\031\031\uff4e\032\067\033" +
    "\uff4e\034\020\036\uff4e\037\uff4e\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff48\031" +
    "\uff48\033\uff48\036\uff48\037\uff48\001\002\000\006\033\u0193" +
    "\040\u0194\001\002\000\004\040\u0196\001\002\000\070\002" +
    "\uff4c\003\031\031\uff4c\032\067\033\uff4c\034\020\036\uff4c" +
    "\037\uff4c\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uff46\031\uff46\033\uff46\036\uff46" +
    "\037\uff46\001\002\000\070\002\uff53\003\031\031\uff53\032" +
    "\067\033\uff53\034\020\036\uff53\037\uff53\041\024\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff52\031\uff52\033\uff52\036\uff52\037\uff52\001\002\000\040" +
    "\053\u013f\054\u0139\055\u013b\057\u0148\060\u013c\061\u0138\065" +
    "\u0160\067\u015e\072\u0135\073\u0127\074\u0120\075\u0124\076\u0131" +
    "\077\u0126\100\u012f\001\002\000\040\053\u013f\054\u0139\055" +
    "\u013b\057\u0148\060\u013c\061\u0138\065\u0160\067\u015e\072\u0135" +
    "\073\u0127\074\u0120\075\u0124\076\u0131\077\u0126\100\u012f\001" +
    "\002\000\004\040\u019b\001\002\000\070\002\uffb3\003\031" +
    "\031\uffb3\032\067\033\uffb3\034\020\036\uffb3\037\uffb3\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uffb4\031\uffb4\033\uffb4\036\uffb4\037\uffb4\001" +
    "\002\000\004\040\u019e\001\002\000\070\002\uffb1\003\031" +
    "\031\uffb1\032\067\033\uffb1\034\020\036\uffb1\037\uffb1\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uffb2\031\uffb2\033\uffb2\036\uffb2\037\uffb2\001" +
    "\002\000\010\033\u01a9\040\u01aa\067\u01a8\001\002\000\004" +
    "\033\u01a5\001\002\000\004\040\u01a3\001\002\000\070\002" +
    "\uff26\003\031\031\uff26\032\067\033\uff26\034\020\036\uff26" +
    "\037\uff26\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uff20\031\uff20\033\uff20\036\uff20" +
    "\037\uff20\001\002\000\004\040\u01a6\001\002\000\070\002" +
    "\uff25\003\031\031\uff25\032\067\033\uff25\034\020\036\uff25" +
    "\037\uff25\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uff1f\031\uff1f\033\uff1f\036\uff1f" +
    "\037\uff1f\001\002\000\006\033\u01af\040\u01b0\001\002\000" +
    "\072\002\uff2a\003\031\031\uff2a\032\067\033\uff2a\034\020" +
    "\036\uff2a\037\uff2a\040\u01ac\041\024\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\070\002\uff28\003\031" +
    "\031\uff28\032\067\033\uff28\034\020\036\uff28\037\uff28\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff22\031\uff22\033\uff22\036\uff22\037\uff22\001" +
    "\002\000\070\002\uff2e\003\031\031\uff2e\032\067\033\uff2e" +
    "\034\020\036\uff2e\037\uff2e\041\024\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\uff24\031\uff24" +
    "\033\uff24\036\uff24\037\uff24\001\002\000\014\002\uff2c\031" +
    "\uff2c\033\uff2c\036\uff2c\037\uff2c\001\002\000\072\002\uff29" +
    "\003\031\031\uff29\032\067\033\uff29\034\020\036\uff29\037" +
    "\uff29\040\u01b2\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\070\002\uff27\003\031\031\uff27\032" +
    "\067\033\uff27\034\020\036\uff27\037\uff27\041\024\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uff21\031\uff21\033\uff21\036\uff21\037\uff21\001\002\000\070" +
    "\002\uff2d\003\031\031\uff2d\032\067\033\uff2d\034\020\036" +
    "\uff2d\037\uff2d\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uff23\031\uff23\033\uff23\036" +
    "\uff23\037\uff23\001\002\000\014\002\uff2b\031\uff2b\033\uff2b" +
    "\036\uff2b\037\uff2b\001\002\000\004\002\ufff7\001\002\000" +
    "\014\002\uffab\031\uffab\033\uffab\036\uffab\037\uffab\001\002" +
    "\000\016\002\uff3a\031\uff3a\033\uff3a\036\uff3a\037\uff3a\040" +
    "\u01b9\001\002\000\014\002\uff39\031\uff39\033\uff39\036\uff39" +
    "\037\uff39\001\002\000\014\002\uff3b\031\uff3b\033\uff3b\036" +
    "\uff3b\037\uff3b\001\002\000\006\033\u01be\040\u01bf\001\002" +
    "\000\004\040\u01bc\001\002\000\070\002\uff33\003\031\031" +
    "\uff33\032\067\033\uff33\034\020\036\uff33\037\uff33\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff2f\031\uff2f\033\uff2f\036\uff2f\037\uff2f\001\002" +
    "\000\072\002\uff35\003\031\031\uff35\032\067\033\uff35\034" +
    "\020\036\uff35\037\uff35\040\u01c1\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\070\002\uff34\003" +
    "\031\031\uff34\032\067\033\uff34\034\020\036\uff34\037\uff34" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff30\031\uff30\033\uff30\036\uff30\037\uff30" +
    "\001\002\000\070\002\uff38\003\031\031\uff38\032\067\033" +
    "\uff38\034\020\036\uff38\037\uff38\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff31\031" +
    "\uff31\033\uff31\036\uff31\037\uff31\001\002\000\014\002\uff37" +
    "\031\uff37\033\uff37\036\uff37\037\uff37\001\002\000\026\006" +
    "\142\033\u01cc\053\141\054\126\055\127\057\140\060\130" +
    "\061\125\065\134\067\133\001\002\000\004\033\u01c6\001" +
    "\002\000\004\036\u01c7\001\002\000\060\003\031\032\067" +
    "\034\020\037\u01c9\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\004\037\u01ca\001\002\000\014" +
    "\002\ufeea\031\ufeea\033\ufeea\036\ufeea\037\ufeea\001\002\000" +
    "\056\003\031\032\067\034\020\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\ufee4\031" +
    "\ufee4\033\ufee4\036\ufee4\037\ufee4\001\002\000\004\036\u01dd" +
    "\001\002\000\006\033\u01cf\036\u01ce\001\002\000\060\003" +
    "\031\032\067\034\020\037\u01da\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\062\003\031\032" +
    "\067\034\020\036\u01d0\037\u01d2\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\060\003\031\032" +
    "\067\034\020\037\u01d6\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\004\037\u01d3\001\002\000" +
    "\014\002\ufee8\031\ufee8\033\ufee8\036\ufee8\037\ufee8\001\002" +
    "\000\056\003\031\032\067\034\020\041\024\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufee2" +
    "\031\ufee2\033\ufee2\036\ufee2\037\ufee2\001\002\000\004\037" +
    "\u01d7\001\002\000\014\002\ufeee\031\ufeee\033\ufeee\036\ufeee" +
    "\037\ufeee\001\002\000\070\002\ufeed\003\031\031\ufeed\032" +
    "\067\033\ufeed\034\020\036\ufeed\037\ufeed\041\024\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufeec\031\ufeec\033\ufeec\036\ufeec\037\ufeec\001\002\000\004" +
    "\037\u01db\001\002\000\014\002\ufee9\031\ufee9\033\ufee9\036" +
    "\ufee9\037\ufee9\001\002\000\056\003\031\032\067\034\020" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\ufee3\031\ufee3\033\ufee3\036\ufee3\037\ufee3" +
    "\001\002\000\060\003\031\032\067\034\020\037\u01df\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\037\u01e0\001\002\000\014\002\ufeeb\031\ufeeb\033" +
    "\ufeeb\036\ufeeb\037\ufeeb\001\002\000\056\003\031\032\067" +
    "\034\020\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\ufee5\031\ufee5\033\ufee5\036\ufee5" +
    "\037\ufee5\001\002\000\004\065\u01e3\001\002\000\004\015" +
    "\u01e4\001\002\000\004\034\u01e5\001\002\000\052\053\330" +
    "\054\337\057\340\061\324\065\331\067\321\072\335\073" +
    "\334\074\342\075\333\076\326\077\336\100\327\101\344" +
    "\102\322\103\343\104\323\105\325\106\332\107\346\001" +
    "\002\000\004\035\u01e7\001\002\000\004\040\u01e8\001\002" +
    "\000\056\003\031\032\067\034\020\041\024\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uffd3" +
    "\031\uffd3\033\uffd3\036\uffd3\037\uffd3\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufff6\001\002\000\026\006\142" +
    "\033\u01f8\053\141\054\126\055\127\057\140\060\130\061" +
    "\125\065\134\067\133\001\002\000\004\033\u01ee\001\002" +
    "\000\004\036\u01ef\001\002\000\056\003\031\032\067\034" +
    "\020\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\037\u01f1\001\002\000\072\002\ufedc\003" +
    "\031\031\ufedc\032\067\033\ufedc\034\020\036\ufedc\037\ufedc" +
    "\041\024\042\045\043\013\044\u01f2\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\036\u01f4\001\002\000\014\002\ufed8" +
    "\031\ufed8\033\ufed8\036\ufed8\037\ufed8\001\002\000\056\003" +
    "\031\032\067\034\020\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\004\037\u01f6\001\002\000" +
    "\056\003\031\032\067\034\020\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\ufed4\031" +
    "\ufed4\033\ufed4\036\ufed4\037\ufed4\001\002\000\004\036\u0218" +
    "\001\002\000\006\033\u01fb\036\u01fa\001\002\000\056\003" +
    "\031\032\067\034\020\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\060\003\031\032\067\034" +
    "\020\036\u01fc\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\056\003\031\032\067\034\020\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\037\u01fe\001\002\000\072\002\ufedb\003\031\031" +
    "\ufedb\032\067\033\ufedb\034\020\036\ufedb\037\ufedb\041\024" +
    "\042\045\043\013\044\u01ff\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\036\u0201\001\002\000\014\002\ufed7\031\ufed7" +
    "\033\ufed7\036\ufed7\037\ufed7\001\002\000\056\003\031\032" +
    "\067\034\020\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\004\037\u0203\001\002\000\056\003" +
    "\031\032\067\034\020\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\ufed3\031\ufed3\033" +
    "\ufed3\036\ufed3\037\ufed3\001\002\000\004\037\u0206\001\002" +
    "\000\072\002\ufee1\003\031\031\ufee1\032\067\033\ufee1\034" +
    "\020\036\ufee1\037\ufee1\041\024\042\045\043\013\044\u0207" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\060\003\031\032" +
    "\067\034\020\036\u0209\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\ufee0\031\ufee0\033" +
    "\ufee0\036\ufee0\037\ufee0\001\002\000\056\003\031\032\067" +
    "\034\020\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\037\u020b\001\002\000\056\003\031" +
    "\032\067\034\020\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\ufed2\031\ufed2\033\ufed2" +
    "\036\ufed2\037\ufed2\001\002\000\004\037\u020e\001\002\000" +
    "\056\003\031\032\067\034\020\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\ufedf\031" +
    "\ufedf\033\ufedf\036\ufedf\037\ufedf\001\002\000\004\037\u0211" +
    "\001\002\000\072\002\ufedd\003\031\031\ufedd\032\067\033" +
    "\ufedd\034\020\036\ufedd\037\ufedd\041\024\042\045\043\013" +
    "\044\u0212\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\036" +
    "\u0214\001\002\000\014\002\ufed9\031\ufed9\033\ufed9\036\ufed9" +
    "\037\ufed9\001\002\000\056\003\031\032\067\034\020\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\037\u0216\001\002\000\056\003\031\032\067\034" +
    "\020\041\024\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\ufed5\031\ufed5\033\ufed5\036\ufed5\037" +
    "\ufed5\001\002\000\056\003\031\032\067\034\020\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\004\037\u021a\001\002\000\072\002\ufede\003\031\031\ufede" +
    "\032\067\033\ufede\034\020\036\ufede\037\ufede\041\024\042" +
    "\045\043\013\044\u021b\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\036\u021d\001\002\000\014\002\ufeda\031\ufeda\033" +
    "\ufeda\036\ufeda\037\ufeda\001\002\000\056\003\031\032\067" +
    "\034\020\041\024\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\037\u021f\001\002\000\056\003\031" +
    "\032\067\034\020\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\ufed6\031\ufed6\033\ufed6" +
    "\036\ufed6\037\ufed6\001\002\000\042\033\u0226\053\u013f\054" +
    "\u0139\055\u013b\057\u0148\060\u013c\061\u0138\065\u0160\067\u015e" +
    "\072\u0135\073\u0127\074\u0120\075\u0124\076\u0131\077\u0126\100" +
    "\u012f\001\002\000\004\033\u0223\001\002\000\004\040\u0224" +
    "\001\002\000\070\002\uff40\003\031\031\uff40\032\067\033" +
    "\uff40\034\020\036\uff40\037\uff40\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff3c\031" +
    "\uff3c\033\uff3c\036\uff3c\037\uff3c\001\002\000\004\040\u022e" +
    "\001\002\000\006\033\u0228\040\u0229\001\002\000\072\002" +
    "\uff43\003\031\031\uff43\032\067\033\uff43\034\020\036\uff43" +
    "\037\uff43\040\u022b\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\070\002\uff41\003\031\031\uff41" +
    "\032\067\033\uff41\034\020\036\uff41\037\uff41\041\024\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uff3d\031\uff3d\033\uff3d\036\uff3d\037\uff3d\001\002\000" +
    "\070\002\uff45\003\031\031\uff45\032\067\033\uff45\034\020" +
    "\036\uff45\037\uff45\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uff3e\031\uff3e\033\uff3e" +
    "\036\uff3e\037\uff3e\001\002\000\014\002\uff44\031\uff44\033" +
    "\uff44\036\uff44\037\uff44\001\002\000\070\002\uff42\003\031" +
    "\031\uff42\032\067\033\uff42\034\020\036\uff42\037\uff42\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff3f\031\uff3f\033\uff3f\036\uff3f\037\uff3f\001" +
    "\002\000\006\036\u0231\040\115\001\002\000\060\003\031" +
    "\032\067\034\020\037\u0233\041\024\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\004\037\u0234\001\002" +
    "\000\004\002\ufff4\001\002\000\004\002\ufff3\001\002\000" +
    "\026\006\142\033\u0236\053\141\054\126\055\127\057\140" +
    "\060\130\061\125\065\134\067\133\001\002\000\004\036" +
    "\u0237\001\002\000\060\003\031\032\067\034\020\037\u0239" +
    "\041\024\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\037\u023a\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\ufffc\001\002\000\004\031\uff5b\001\002\000" +
    "\016\031\u024c\057\u023e\061\u0241\064\012\065\u023b\067\u023d" +
    "\001\002\000\004\065\u017f\001\002\000\024\003\uff91\053" +
    "\uff91\054\uff91\055\uff91\057\uff91\060\uff91\061\uff91\065\uff91" +
    "\067\uff91\001\002\000\004\031\u0242\001\002\000\024\003" +
    "\307\053\312\054\301\055\302\057\313\060\303\061\277" +
    "\065\306\067\304\001\002\000\024\003\uff90\053\uff90\054" +
    "\uff90\055\uff90\057\uff90\060\uff90\061\uff90\065\uff90\067\uff90" +
    "\001\002\000\024\006\142\053\141\054\126\055\127\057" +
    "\140\060\130\061\125\065\134\067\133\001\002\000\004" +
    "\031\u0244\001\002\000\024\003\031\053\312\054\301\055" +
    "\302\057\313\060\303\061\277\065\u0246\067\304\001\002" +
    "\000\004\033\u0247\001\002\000\052\015\u0166\016\u0121\017" +
    "\u011e\020\u0133\021\u012c\053\u013f\054\u0139\055\u013b\057\u0148" +
    "\060\u013c\061\u0138\065\u0160\067\u015e\072\u0135\073\u0127\074" +
    "\u0120\075\u0124\076\u0131\077\u0126\100\u012f\001\002\000\004" +
    "\036\u0248\001\002\000\056\003\031\032\067\034\020\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\037\u024a\001\002\000\070\002\ufec9\003\031\031" +
    "\ufec9\032\067\033\ufec9\034\020\036\ufec9\037\ufec9\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufecf\031\ufecf\033\ufecf\036\ufecf\037\ufecf\001\002" +
    "\000\024\006\142\053\141\054\126\055\127\057\140\060" +
    "\130\061\125\065\134\067\133\001\002\000\004\031\u024e" +
    "\001\002\000\026\006\142\031\u024f\053\141\054\126\055" +
    "\127\057\140\060\130\061\125\065\134\067\133\001\002" +
    "\000\024\003\031\053\312\054\301\055\302\057\313\060" +
    "\303\061\277\065\u0246\067\304\001\002\000\004\031\u0251" +
    "\001\002\000\026\003\031\033\u0253\053\312\054\301\055" +
    "\302\057\313\060\303\061\277\065\u0246\067\304\001\002" +
    "\000\006\033\u0259\036\u0258\001\002\000\004\036\u0254\001" +
    "\002\000\056\003\031\032\067\034\020\041\024\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\037" +
    "\u0256\001\002\000\070\002\ufec6\003\031\031\ufec6\032\067" +
    "\033\ufec6\034\020\036\ufec6\037\ufec6\041\024\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufecc" +
    "\031\ufecc\033\ufecc\036\ufecc\037\ufecc\001\002\000\056\003" +
    "\031\032\067\034\020\041\024\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\060\003\031\032\067\034" +
    "\020\036\u025a\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\056\003\031\032\067\034\020\041" +
    "\024\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\037\u025c\001\002\000\070\002\ufec4\003\031\031" +
    "\ufec4\032\067\033\ufec4\034\020\036\ufec4\037\ufec4\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufeca\031\ufeca\033\ufeca\036\ufeca\037\ufeca\001\002" +
    "\000\004\037\u025f\001\002\000\070\002\ufed0\003\031\031" +
    "\ufed0\032\067\033\ufed0\034\020\036\ufed0\037\ufed0\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufed1\031\ufed1\033\ufed1\036\ufed1\037\ufed1\001\002" +
    "\000\004\037\u0262\001\002\000\070\002\ufec5\003\031\031" +
    "\ufec5\032\067\033\ufec5\034\020\036\ufec5\037\ufec5\041\024" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufecb\031\ufecb\033\ufecb\036\ufecb\037\ufecb\001\002" +
    "\000\004\033\u0265\001\002\000\004\036\u0266\001\002\000" +
    "\056\003\031\032\067\034\020\041\024\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\004\037\u0268\001" +
    "\002\000\070\002\ufec7\003\031\031\ufec7\032\067\033\ufec7" +
    "\034\020\036\ufec7\037\ufec7\041\024\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\ufecd\031\ufecd" +
    "\033\ufecd\036\ufecd\037\ufecd\001\002\000\004\031\u026b\001" +
    "\002\000\024\003\031\053\312\054\301\055\302\057\313" +
    "\060\303\061\277\065\u0246\067\304\001\002\000\004\033" +
    "\u026d\001\002\000\004\036\u026e\001\002\000\056\003\031" +
    "\032\067\034\020\041\024\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\004\037\u0270\001\002\000\070" +
    "\002\ufec8\003\031\031\ufec8\032\067\033\ufec8\034\020\036" +
    "\ufec8\037\ufec8\041\024\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\ufece\031\ufece\033\ufece\036" +
    "\ufece\037\ufece\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u026f\000\054\002\014\003\035\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\006\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u023e\040\u023f\001\001\000" +
    "\002\001\001\000\004\057\074\001\001\000\004\006\u0221" +
    "\001\001\000\002\001\001\000\016\010\u01ec\011\134\012" +
    "\130\014\131\044\142\047\135\001\001\000\052\003\u01ea" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\u01c4\011\134\012\130\014\131" +
    "\044\142\047\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0161\036\u015e\001\001" +
    "\000\052\003\u01b5\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u0197\001\001\000" +
    "\004\057\u018b\001\001\000\002\001\001\000\006\055\277" +
    "\061\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\067\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\004\057\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\115\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\120\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\122\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\016\010\136\011\134\012\130\014" +
    "\131\044\142\047\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\211\001\001\000\002\001\001\000\006" +
    "\012\204\047\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\156\001\001\000\004\053\144\001\001\000" +
    "\002\001\001\000\006\014\131\044\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\157" +
    "\014\131\044\163\047\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\157\047\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\174\047\175\001\001\000\006\012\172\047\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\201\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\203\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\206\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\217\044\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\211\001\001\000\002\001\001\000\052\003" +
    "\232\005\057\007\003\017\031\024\034\025\015\026\042" +
    "\027\040\030\022\031\041\032\021\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\052\003\224\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\052\003\227\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\241\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\245\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\252\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\052\003\250\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\253" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\256\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\263\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\267\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\274\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\052\003\272\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\275" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\u0182\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\u0129\005\057\006\u012f\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\036\u012d\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\052\003\u011c" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\340\060\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\347\060\344\001\001\000" +
    "\002\001\001\000\006\052\350\060\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\353\005\057\007\003\017\031\024\034\025\015\026\042" +
    "\027\040\030\022\031\041\032\021\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\006\052\355\060\344\001" +
    "\001\000\002\001\001\000\006\052\357\060\344\001\001" +
    "\000\002\001\001\000\006\052\361\060\344\001\001\000" +
    "\002\001\001\000\006\052\363\060\344\001\001\000\002" +
    "\001\001\000\006\052\365\060\344\001\001\000\002\001" +
    "\001\000\006\052\367\060\344\001\001\000\002\001\001" +
    "\000\006\052\u010b\060\344\001\001\000\052\003\u010a\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\006\052\374\060\344\001\001\000\006\052\u0101\060" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\377\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0106\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\052\003\u0104\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u0107\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0109\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u010e\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\052\u0111\060\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\u0114\005\057\007\003\017\031\024\034" +
    "\025\015\026\042\027\040\030\022\031\041\032\021\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\u0118\060\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u011b\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u0181\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\u0161\036\u015e\001\001\000\002" +
    "\001\001\000\010\006\u0148\043\u0144\045\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0140\037\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0136\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u0142\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u014c\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\052\003\u014a\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u014d\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\u015b\045\u015a\001\001\000\006" +
    "\043\u0159\045\u0158\001\001\000\006\043\u0157\045\u0156\001" +
    "\001\000\006\043\u0155\045\u0154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u017b\037\u017a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u0174\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\052\003\u0171\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\010\006\u0167\043\u0166\045\u0146\001\001\000\002\001" +
    "\001\000\052\003\u016b\005\057\007\003\017\031\024\034" +
    "\025\015\026\042\027\040\030\022\031\041\032\021\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\052\003\u0169\005\057\007" +
    "\003\017\031\024\034\025\015\026\042\027\040\030\022" +
    "\031\041\032\021\033\060\034\051\035\024\040\046\041" +
    "\004\046\016\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u016c\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u016f\005\057\007" +
    "\003\017\031\024\034\025\015\026\042\027\040\030\022" +
    "\031\041\032\021\033\060\034\051\035\024\040\046\041" +
    "\004\046\016\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u0172\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0175\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0177\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\052" +
    "\003\u0179\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u017d\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0180\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0187\001\001\000\004\006\u0184\001" +
    "\001\000\002\001\001\000\052\003\u0186\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u0189\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\004\057\u0191\001\001\000\002\001\001\000\052" +
    "\003\u018d\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0190\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0194\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\052" +
    "\003\u0196\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\004\006\u019c\001\001" +
    "\000\004\006\u0199\001\001\000\002\001\001\000\052\003" +
    "\u019b\005\057\007\003\017\031\024\034\025\015\026\042" +
    "\027\040\030\022\031\041\032\021\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u019e\005\057\007\003\017\031\024\034\025\015\026\042" +
    "\027\040\030\022\031\041\032\021\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u01a3\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u01a6\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u01ac\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\052\003" +
    "\u01aa\005\057\007\003\017\031\024\034\025\015\026\042" +
    "\027\040\030\022\031\041\032\021\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\052\003\u01ad\005\057\007" +
    "\003\017\031\024\034\025\015\026\042\027\040\030\022" +
    "\031\041\032\021\033\060\034\051\035\024\040\046\041" +
    "\004\046\016\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u01b2\005\057\007" +
    "\003\017\031\024\034\025\015\026\042\027\040\030\022" +
    "\031\041\032\021\033\060\034\051\035\024\040\046\041" +
    "\004\046\016\050\061\054\065\055\043\001\001\000\052" +
    "\003\u01b0\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\u01b3\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u01bc" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\052\003\u01c1\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\052\003" +
    "\u01bf\005\057\007\003\017\031\024\034\025\015\026\042" +
    "\027\040\030\022\031\041\032\021\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\052\003\u01c2\005\057\007" +
    "\003\017\031\024\034\025\015\026\042\027\040\030\022" +
    "\031\041\032\021\033\060\034\051\035\024\040\046\041" +
    "\004\046\016\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\u01cc\011\134\012" +
    "\130\014\131\044\142\047\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u01c7\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u01ca\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u01d8\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\052\003\u01d0\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\052\003\u01d4\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u01d3\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u01d7" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u01db\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\u01dd" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u01e0" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\u01e5\060\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u01e8\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\u01f8\011\134\012\130\014\131\044\142\047\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u01ef" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\052\003\u01f2\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u01f4\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\052\003\u01f6\005\057\007\003\017\031\024\034" +
    "\025\015\026\042\027\040\030\022\031\041\032\021\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u020f\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\052\003" +
    "\u01fc\005\057\007\003\017\031\024\034\025\015\026\042" +
    "\027\040\030\022\031\041\032\021\033\060\034\051\035" +
    "\024\040\046\041\004\046\016\050\061\054\065\055\043" +
    "\001\001\000\052\003\u0204\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\052" +
    "\003\u01ff\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0201\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\u0203\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u0207\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\052\003\u0209\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\u020c\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\052\003\u020b\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u020e\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u0212\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u0214\005\057\007\003\017" +
    "\031\024\034\025\015\026\042\027\040\030\022\031\041" +
    "\032\021\033\060\034\051\035\024\040\046\041\004\046" +
    "\016\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\u0216\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\u0218" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\052\003\u021b\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u021d\005\057\007\003" +
    "\017\031\024\034\025\015\026\042\027\040\030\022\031" +
    "\041\032\021\033\060\034\051\035\024\040\046\041\004" +
    "\046\016\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\052\003\u021f\005\057\007\003\017\031\024\034" +
    "\025\015\026\042\027\040\030\022\031\041\032\021\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\004\006" +
    "\u0226\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0224\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u022b\005\057\007\003\017\031\024" +
    "\034\025\015\026\042\027\040\030\022\031\041\032\021" +
    "\033\060\034\051\035\024\040\046\041\004\046\016\050" +
    "\061\054\065\055\043\001\001\000\052\003\u0229\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u022c\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u022e\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0231\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\136\011\134" +
    "\012\130\014\131\044\142\047\135\001\001\000\002\001" +
    "\001\000\052\003\u0237\005\057\007\003\017\031\024\034" +
    "\025\015\026\042\027\040\030\022\031\041\032\021\033" +
    "\060\034\051\035\024\040\046\041\004\046\016\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\u024c" +
    "\040\u023f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\055\277\061\304\001\001\000\002" +
    "\001\001\000\016\010\u0242\011\134\012\130\014\131\044" +
    "\142\047\135\001\001\000\002\001\001\000\006\017\u0244" +
    "\055\043\001\001\000\002\001\001\000\006\006\u0161\036" +
    "\u015e\001\001\000\002\001\001\000\052\003\u0248\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u024a\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\016\010\u0269\011\134\012\130\014\131\044\142\047\135" +
    "\001\001\000\002\001\001\000\016\010\u024f\011\134\012" +
    "\130\014\131\044\142\047\135\001\001\000\006\017\u0263" +
    "\055\043\001\001\000\002\001\001\000\006\017\u0251\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0254\005\057\007\003\017\031\024\034\025\015\026" +
    "\042\027\040\030\022\031\041\032\021\033\060\034\051" +
    "\035\024\040\046\041\004\046\016\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\u0256\005\057" +
    "\007\003\017\031\024\034\025\015\026\042\027\040\030" +
    "\022\031\041\032\021\033\060\034\051\035\024\040\046" +
    "\041\004\046\016\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u0260\005\057\007\003\017\031" +
    "\024\034\025\015\026\042\027\040\030\022\031\041\032" +
    "\021\033\060\034\051\035\024\040\046\041\004\046\016" +
    "\050\061\054\065\055\043\001\001\000\052\003\u025a\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\052\003\u025d\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\u025c" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u025f" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u0262" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u0266\005\057\007\003\017\031\024\034\025" +
    "\015\026\042\027\040\030\022\031\041\032\021\033\060" +
    "\034\051\035\024\040\046\041\004\046\016\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\052\003\u0268" +
    "\005\057\007\003\017\031\024\034\025\015\026\042\027" +
    "\040\030\022\031\041\032\021\033\060\034\051\035\024" +
    "\040\046\041\004\046\016\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u026b" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u026e\005\057\007\003\017\031\024\034\025\015" +
    "\026\042\027\040\030\022\031\041\032\021\033\060\034" +
    "\051\035\024\040\046\041\004\046\016\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\u0270\005" +
    "\057\007\003\017\031\024\034\025\015\026\042\027\040" +
    "\030\022\031\041\032\021\033\060\034\051\035\024\040" +
    "\046\041\004\046\016\050\061\054\065\055\043\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AnalizadorLexico  les;
    public ArrayList<Token_> ls;
    public OpeTabla optab = new OpeTabla();
    public ArrayList<String> arbolesAsignacion = new ArrayList<String> ();

    public void setList( ArrayList<Token_> ls){
        this.ls = ls;
    }
    
    public void setLex(AnalizadorLexico le){
        les =le;
    }
public static String anterior = "";
public static String errores = "";
StringBuilder m = new StringBuilder("");
/* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
            if (info instanceof java_cup.runtime.Symbol){
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                m=new StringBuilder("Error Critico "+s+" : ");
                if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                    if (s.right >= 0)m.append(" Columna: "+(s.right+1)+"\nRepare antes de Continuar");}
                if(m.length()!=0)
                    errores+=m+"\n";
        }
        
        errores += m.append("    antes de    " + les.lexeme  + "  \n");
        System.err.println(m+info.toString());
    }
    
   
public void syntax_error(Symbol s){
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto.");
}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto (ERROR CRITICO SE DEBE SOLUCIONAR ANTES DE CONTINUAR, NO SE IDENTIFICO ).");
}

public static void append(String mensaje){
StringBuilder me;
    me = new StringBuilder("Error sintactico: "+" ");
    me.append(mensaje);
    
    errores+=mensaje+"\n";
    System.out.println(me);
}

    public static void main(String[] args){
        try {
                ASintactico sintactico = new ASintactico(new AnalizadorLexico(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
        } catch (Exception ex) {
           // ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {
  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= errores PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= errores PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= PAROPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= KEYOPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= KEYOPEN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 2 en la linea: "+(eright+1)+" - se esperaba la palabra inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= INICIO PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= INICIO PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= INICIO PAROPEN KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 4 en la linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= INICIO PAROPEN KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 4 en la linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= INICIO PAROPEN PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 5 en la linea: "+(eright+1)+" - se esperaba un { despu�s de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= INICIO PAROPEN PARCLOSE KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 5 en la linea: "+(eright+1)+" - Se esperaba un { despu�s de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // errores ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // errores ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // errores ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // errores ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // errores ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // errores ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // errores ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // errores ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // errores1 ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // errores1 ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // errores1 ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // errores1 ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // errores1 ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // errores1 ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // errores1 ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ciclos_errores ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos_errores",44, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ciclos_errores ::= SI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos_errores",44, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= decvariables 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= asignar 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= funcionesDo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= ciclos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= incrementar_var 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= arreglo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arreglo ::= tipo COROPEN CORCLOSE ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arreglo ::= COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Error: 8 en la linea: "+(eright+1)+" - Se esperaba un tipo de dato antes de '[' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arreglo ::= tipo CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Error: 8 en la linea: "+(eright+1)+" - Se esperaba un '[' despues de el tipo de dato' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arreglo ::= tipo COROPEN ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" - Se esperaba un ']' despues de '[' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arreglo ::= tipo COROPEN CORCLOSE ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		this.parser.errores+="Error: 10 en la linea:"+(eright+1)+" - Se esperaba un 'identificador' despues de ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arreglo ::= tipo COROPEN CORCLOSE ID COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Error: 11 en la linea: "+(eright+1)+" - Se esperaba un ' = ' despues de el 'identificador' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 12 en la linea: "+(eright+1)+" - Se esperaba un ' [ ' despues de el ' = ' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 13 en la linea: "+(eright+1)+" - Se esperaban datos dentro de '[' ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 14 en la linea: "+(eright+1)+" - Se esperaba un ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 15 en la linea: "+(eright+1)+" - Se esperaba un ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // datos ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // datos ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // datos ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // datos ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // datos ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // datos ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // datos ::= notapuras 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // datos ::= ID COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // datos ::= numEntero COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // datos ::= VERDADERO COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // datos ::= FALSO COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // datos ::= CADENA COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // datos ::= NOTA COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // datos ::= notapuras COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // datos ::= notapuras datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ',' para la separacion de los datos \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignar ::= ID ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignar ::= ID opasig datoasig PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignar ::= ID ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                        arbolesAsignacion.add(id.toString()+"!=!"+dato.toString()+"!;");
                        System.out.println("Lista que no entra: \n"+dato.toString());
                        for(int i = 0; i<ls.size(); i++){
                            if (ls.get(i).numero_linea == 7) {
                                System.out.println(ls.get(i).toString());
                            }
                        }
                        Token_ idAAsig = optab.buscarIDCup(id.toString(),ls);
                        Token_ idAComp = optab.buscarIDCup(dato.toString(),ls);
                        if(idAAsig == null)
                            System.out.println(idAAsig);
                            //System.out.println(idAComp);
                            this.parser.append("Error idAAsig: en la linea: "+(idright+1)+" El dato  no ha sido declarado. \n");
                        if(idAComp == null)
                            this.parser.append("Error idAComp: en la linea: "+(datoright+1)+" El dato  no ha sido declarado. \n");
                        if(idAAsig != null && idAComp != null){
                            String tipo = optab.verificarTipo(dato.toString() , ls);
                        }

                    RESULT= dato+"."+id; 
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignar ::= ID opasig datoasig PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignar ::= ID ASIG ari PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		 RESULT=0; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignar ::= ID ASIG PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append("Error: 7 en la linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignar ::= ID ASIG PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error";this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignar ::= errores1 ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignar ::= errores1 ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignar ::= errores1 opasig dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea:"+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asignar ::= errores1 opasig dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignar ::= ID dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append(" Error: 17 en la linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignar ::= ID dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignar ::= ID ASIG dato cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignar ::= ID ASIG dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignar ::= ID opasig dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignar ::= error cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignarDeclaracion ::= ID ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignarDeclaracion ::= ID opasig datoasig PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignarDeclaracion ::= ID ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignarDeclaracion ::= ID opasig datoasig PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignarDeclaracion ::= ID ASIG ari PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		 RESULT=0; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignarDeclaracion ::= ID ASIG PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append("Error: 7 en la linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignarDeclaracion ::= ID ASIG PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error";this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignarDeclaracion ::= errores1 ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // asignarDeclaracion ::= errores1 ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // asignarDeclaracion ::= errores1 opasig dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea:"+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asignarDeclaracion ::= errores1 opasig dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asignarDeclaracion ::= ID dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append(" Error: 17 en la linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignarDeclaracion ::= ID dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignarDeclaracion ::= ID ASIG dato cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asignarDeclaracion ::= ID ASIG dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asignarDeclaracion ::= ID opasig dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignarDeclaracion ::= error cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opasig ::= ADDASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opasig ::= MINASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opasig ::= DIVASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opasig ::= MULASIG 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // datoasig ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // datoasig ::= numEntero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // datoasig ::= NOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= entero; System.out.println("El tipo es: " + entero.toString()); 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo ::= NOTA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= entero; System.out.println("El tipo es: " + entero.toString()); 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo ::= CADENA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= entero; System.out.println("El tipo es: " + entero.toString()); 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dato ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // dato ::= numEntero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dato ::= VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // dato ::= FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dato ::= CADENA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dato ::= NOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dato ::= VACIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // dato ::= NULO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // dato ::= DO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // dato ::= RE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // dato ::= MI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // dato ::= FA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // dato ::= SOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // dato ::= LA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dato ::= SII 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // notas ::= RE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // notas ::= MI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // notas ::= FA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // notas ::= SOL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // notas ::= LA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // notas ::= SII 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // notas ::= DO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // notas ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // notas ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // notas ::= DOS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // notas ::= RES 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // notas ::= MIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // notas ::= FAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // notas ::= SOLS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // notas ::= LAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // notas ::= SIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // notapuras ::= RE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // notapuras ::= MI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // notapuras ::= FA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // notapuras ::= SOL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // notapuras ::= LA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // notapuras ::= SII 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // notapuras ::= DO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // notapuras ::= DOS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // notapuras ::= RES 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // notapuras ::= MIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // notapuras ::= FAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // notapuras ::= SOLS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // notapuras ::= LAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // notapuras ::= SIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // decvariables ::= tipo ID PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 //this.parser.errores+= id.toString()+ " TIPO: " + tipo.toString()  + "\n"; 
                    
                 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // decvariables ::= tipo ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 //this.parser.errores += id.toString()+ " TIPO: " + tipo.toString()  +"\n"; 
                        ls = optab.buscarID(id.toString(),tipo.toString(),null,ls);
                
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // decvariables ::= tipo asignarDeclaracion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		//System.out.println(asignacion,tipo.toString(),asignacion,ls); 
                    try { 
                        //System.out.println("asignacion:" + asignacion);
                        //System.out.println("tipo: " + tipo.toString());
                        //System.out.println("ls: " + ls);
                        String asigTemp = asignacion.toString();
                        String[] temp = asigTemp.split("\\.");
                        //System.out.println("asigTemp: " + asigTemp);
                        //System.out.println("temp : " + temp.toString());
                        try { 
                            if(tipo.toString() == "entero" && (Integer.parseInt(temp[0])/Integer.parseInt(temp[0]))==1)
                                System.out.println("Es entero");

                        } catch ( Exception d) {
                            System.err.println("Exception :" + d.getMessage());
                            this.parser.append("Error: 50 de Excepcion en la linea: "+(tiporight+1)+" El dato "+temp[0]+" Se esperaba un "+tipo.toString()+"\n");
                        }
                        //Aqui si tiene los tipo de datos
                        ls = optab.buscarID(temp[1],tipo.toString(),temp[0],ls);
                        
                        //System.out.println("Tabla de eric:" + ls.toString());
                    } catch ( Exception d) {
                      System.out.println(d.getMessage());
                    }
                    //ls = optab.buscarID(sep[1],tipo.toString(),sep[0],ls); 
                    //this.parser.errores+= tipo.toString()+ " asignacion: " + asignacion.toString()  + "\n"; 
                  
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // decvariables ::= tipo ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 18 en la linea: "+(eright+1)+" -  falta el ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // decvariables ::= tipo ID cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 18 en la linea: "+(eright+1)+" -  falta el ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // decvariables ::= numEntero ID PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // decvariables ::= numEntero ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // decvariables ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 19 en la linea: "+(eright+1)+" - Se esperaba una tipo de dato \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // funcionesDo ::= declaraReproduce 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // funcionesDo ::= declaraImprimir 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // funcionesDo ::= declaraImportar 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // funcionesDo ::= declaraContinuar 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // funcionesDo ::= declaraSilencio 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // funcionesDo ::= declaraVolumen 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // funcionesDo ::= declaraFrecuencia 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // declaraReproduce ::= REPRODUCE PAROPEN notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // declaraReproduce ::= REPRODUCE PAROPEN notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // declaraReproduce ::= PAROPEN notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 20 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // declaraReproduce ::= NOTA PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 21 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que abre  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // declaraReproduce ::= PAROPEN notas PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 22 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que cierra   \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // declaraReproduce ::= REPRODUCE notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 23 en la linea:"+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // declaraReproduce ::= REPRODUCE PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el (  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // declaraReproduce ::= REPRODUCE PAROPEN notas PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el )  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // declaraReproduce ::= PAROPEN notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 20 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // declaraReproduce ::= NOTA PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 21 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentesis que abre  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // declaraReproduce ::= PAROPEN notas PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 22 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'   \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // declaraReproduce ::= REPRODUCE notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 23 en la linea: "+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // declaraReproduce ::= REPRODUCE PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el (  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declaraReproduce ::= REPRODUCE PAROPEN notas PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el )  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // declaraImprimir ::= IMPRIMIR PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 25 en la linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // declaraImprimir ::= IMPRIMIR PAROPEN dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 26 en la linea: "+(eright+1)+" - Falta el ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // declaraImprimir ::= IMPRIMIR dato PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 27 en la linea: "+(eright+1)+" - Falta el ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // declaraImprimir ::= IMPRIMIR PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 25 en la linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // declaraImprimir ::= IMPRIMIR PAROPEN dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 26 en la linea: "+(eright+1)+" - Falta el ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // declaraImprimir ::= IMPRIMIR dato PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 27 en la linea: "+(eright+1)+" - Falta el ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // declaraImportar ::= IMPORTAR ID PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // declaraImportar ::= IMPORTAR ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // declaraImportar ::= IMPORTAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el argumento en importar \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // declaraContinuar ::= PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 28 en la linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // declaraContinuar ::= CONTINUAR PAROPEN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 29 en la linea: "+(eright+1)+" - Falta el ) despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // declaraContinuar ::= CONTINUAR PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 30 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // declaraContinuar ::= PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 28 en la linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // declaraContinuar ::= CONTINUAR PAROPEN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 29 en la linea: "+(eright+1)+" - Falta el ) despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // declaraContinuar ::= CONTINUAR PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 30 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea:"+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // declaraSilencio ::= SILENCIO PAROPEN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 31 en la linea: "+(eright+1)+" - Falta el ) despues de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // declaraSilencio ::= SILENCIO PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de numero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // declaraSilencio ::= SILENCIO PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 33 en la linea: "+(eright+1)+" - Falta el ( despues de silencio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // declaraSilencio ::= SILENCIO numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 34 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // declaraSilencio ::= SILENCIO PAROPEN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // declaraSilencio ::= SILENCIO PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de numero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // declaraSilencio ::= SILENCIO PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 33 en la linea:"+(eright+1)+" - Falta el ( despues de silencio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // declaraSilencio ::= SILENCIO numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 34 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // declaraVolumen ::= VOLUMEN PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // declaraVolumen ::= VOLUMEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 37 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // declaraVolumen ::= VOLUMEN PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 35 en la linea:: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // declaraVolumen ::= VOLUMEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 37 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // declaraFrecuencia ::= FRECUENCIA PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // declaraFrecuencia ::= FRECUENCIA numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 38 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // declaraFrecuencia ::= FRECUENCIA PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // declaraFrecuencia ::= FRECUENCIA numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 38 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // operacion ::= ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // operacion ::= log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // operacion ::= rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // opers ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opers",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // opers ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opers",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ari ::= opers ADD opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ari ::= opers MIN opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ari ::= opers MUL opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ari ::= opers DIV opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ari ::= opers ADD ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ari ::= opers MIN ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ari ::= opers MUL ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ari ::= opers DIV ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // incrementar_var ::= ID PLUSPLUS PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // incrementar_var ::= ID MINMIN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // incrementar_var ::= ID PLUSPLUS PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // incrementar_var ::= ID MINMIN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // incrementar_var ::= ID ADD PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 39 en la linea:"+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // incrementar_var ::= ID MIN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 40 en la linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // incrementar_var ::= ID ADD PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 39 en la linea: "+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // incrementar_var ::= ID MIN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 40 en la linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // incrementar_var ::= ID PLUSPLUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // incrementar_var ::= ID MINMIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // incrementar_var ::= ID PLUSPLUS cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // incrementar_var ::= ID MINMIN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ciclos ::= sentencia_mientras 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ciclos ::= sentencia_por 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ciclos ::= sentencia_si 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // sentencia_mientras ::= MIENTRAS PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 41 en la linea: "+(eright+1)+" - Se esperaba una condici�n \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // sentencia_mientras ::= MIENTRAS condicion PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // sentencia_mientras ::= MIENTRAS PAROPEN condicion KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // sentencia_mientras ::= errores PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // sentencia_mientras ::= errores PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 46 en la linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // sentencia_mientras ::= MIENTRAS PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Error: 41 en la linea: "+(eright+1)+" - Se esperaba una condici�n \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // sentencia_mientras ::= MIENTRAS condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // sentencia_mientras ::= MIENTRAS PAROPEN condicion KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-11)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de 'la condicon' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de la 'condicion' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000001(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de una  'condicion' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 46 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de 'SINO' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-11)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // sentencia_por ::= POR decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).value;
		this.parser.errores+="Error: 47 en la linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // sentencia_por ::= POR PAROPEN COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		this.parser.errores+="Error: 48 en la linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // sentencia_por ::= POR PAROPEN decvariables COMA COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 49 en la linea: "+(eright+1)+" - Se esperaba una condicion  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Error: 50 en la linea: "+(eright+1)+" - Se esperaba una asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 55 en la linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 52 en la linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // sentencia_por ::= POR decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		this.parser.errores+="Error: 47 en la linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // sentencia_por ::= POR PAROPEN COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Error: 48 en la linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // sentencia_por ::= POR PAROPEN decvariables COMA COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		this.parser.errores+="Error: 49 en la linea: "+(eright+1)+" - Se esperaba una condicion  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 50 en la linea: "+(eright+1)+" - Se esperaba una asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 55 en la linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 52 en la linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // condicion ::= log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // condicion ::= cond 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // condicion ::= rel log2 rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // condicion ::= ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // condicion ::= ID log ENTERO cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 53 en la linea: "+(eright+1)+" - No es una operacion logica valida, hace falta de uso de op. relacionales \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // condicion ::= NOT PAROPEN rel PARCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // rel ::= op_rel sig_rel op_rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("rel",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // rel ::= op_rel sig_rel rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("rel",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // op_rel ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // op_rel ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // op_rel ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // op_rel ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // op_rel ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // op_rel ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // op_rel ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // op_rel ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // cond ::= rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // log ::= ope_logico AND ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // log ::= ope_logico OR ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // log ::= NOT ope_logico 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // log ::= ope_logico AND log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // log ::= ope_logico OR log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // log ::= NOT PAROPEN log PARCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // log ::= NOT PAROPEN ID PARCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // log2 ::= AND 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log2",41, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // log2 ::= OR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log2",41, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ope_logico ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ope_logico",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ope_logico ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ope_logico",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ope_logico ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ope_logico",37, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // sig_rel ::= MAYTHAN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // sig_rel ::= MINTHAN 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // sig_rel ::= MINEQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // sig_rel ::= MAYEQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // sig_rel ::= EQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // sig_rel ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // sig_rel ::= ASIG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 54 en la linea: "+(eright+1)+" - No se puede hacer una asignaci�n en una condici�n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$ASintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$ASintactico$do_action_part00000001(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
