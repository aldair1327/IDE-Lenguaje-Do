
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analisis_Lexico;

import java_cup.runtime.*;
import java.io.FileReader;
import Analisis_Lexico.Token_;
import Analisis_Lexico.AnalizadorLexico;
import Analisis_Lexico.EstiloDocumento;
import Analisis_Lexico.Interfaz;
import Analisis_Lexico.InterfazTablaSimbolos;
import Analisis_Lexico.OpeTabla;
import Archivos.Archivos;
import Manejador_errores.Manejador_Errores;
import Miscelaneos.Miscelaneo;
import Tabla_Simbolos.Tabla_Simbolos;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import Analisis_Lexico.OpeTabla;
import Analisis_Lexico.InterfazTablaSimbolos;
import Ventanas.Inicio;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\006\000\002\002\010" +
    "\000\002\002\007\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\004\000\002" +
    "\002\003\000\002\002\006\000\002\002\007\000\002\002" +
    "\006\000\002\002\007\000\002\002\007\000\002\002\006" +
    "\000\002\002\007\000\002\002\006\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\050\014" +
    "\000\002\050\010\000\002\050\013\000\002\050\013\000" +
    "\002\050\013\000\002\050\013\000\002\050\013\000\002" +
    "\050\013\000\002\050\013\000\002\050\013\000\002\050" +
    "\013\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\004\000\002\017\006" +
    "\000\002\017\006\000\002\017\007\000\002\017\007\000" +
    "\002\017\006\000\002\017\006\000\002\017\005\000\002" +
    "\017\007\000\002\017\006\000\002\017\007\000\002\017" +
    "\006\000\002\017\006\000\002\017\005\000\002\017\006" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\061\006\000\002\061\006\000\002\061\007\000\002" +
    "\061\007\000\002\061\006\000\002\061\006\000\002\061" +
    "\005\000\002\061\007\000\002\061\006\000\002\061\007" +
    "\000\002\061\006\000\002\061\006\000\002\061\005\000" +
    "\002\061\006\000\002\061\005\000\002\061\005\000\002" +
    "\061\004\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\005\005\000\002\005\006\000\002\005\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\006\000\002\005\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\007\000\002" +
    "\027\010\000\002\027\006\000\002\027\005\000\002\027" +
    "\005\000\002\027\006\000\002\027\004\000\002\027\006" +
    "\000\002\027\007\000\002\027\006\000\002\027\006\000" +
    "\002\027\007\000\002\027\005\000\002\027\007\000\002" +
    "\030\007\000\002\030\010\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\006\000\002\030\007" +
    "\000\002\030\007\000\002\030\007\000\002\030\007\000" +
    "\002\031\005\000\002\031\004\000\002\031\004\000\002" +
    "\032\007\000\002\032\010\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\006" +
    "\000\002\032\006\000\002\032\006\000\002\032\006\000" +
    "\002\033\006\000\002\033\007\000\002\033\007\000\002" +
    "\033\010\000\002\033\005\000\002\033\006\000\002\033" +
    "\005\000\002\033\006\000\002\033\005\000\002\033\006" +
    "\000\002\033\006\000\002\033\007\000\002\033\006\000" +
    "\002\033\007\000\002\033\006\000\002\033\007\000\002" +
    "\034\007\000\002\034\010\000\002\034\006\000\002\034" +
    "\006\000\002\034\006\000\002\034\006\000\002\034\007" +
    "\000\002\034\007\000\002\034\007\000\002\034\007\000" +
    "\002\035\007\000\002\035\010\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\035\006\000\002\035" +
    "\007\000\002\035\007\000\002\035\007\000\002\035\007" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\045\003\000\002\045\003\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\006\000" +
    "\002\025\006\000\002\025\005\000\002\025\005\000\002" +
    "\025\006\000\002\025\006\000\002\025\004\000\002\025" +
    "\004\000\002\025\005\000\002\025\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\024\010\000" +
    "\002\024\011\000\002\024\012\000\002\024\007\000\002" +
    "\024\007\000\002\024\007\000\002\024\007\000\002\024" +
    "\011\000\002\024\012\000\002\024\011\000\002\024\011" +
    "\000\002\024\011\000\002\024\011\000\002\007\011\000" +
    "\002\007\012\000\002\007\016\000\002\007\015\000\002" +
    "\007\010\000\002\007\010\000\002\007\010\000\002\007" +
    "\010\000\002\007\011\000\002\007\011\000\002\007\011" +
    "\000\002\007\011\000\002\007\015\000\002\007\015\000" +
    "\002\007\015\000\002\007\015\000\002\007\015\000\002" +
    "\046\016\000\002\046\015\000\002\046\015\000\002\046" +
    "\015\000\002\046\015\000\002\046\015\000\002\046\015" +
    "\000\002\046\015\000\002\046\014\000\002\046\014\000" +
    "\002\046\014\000\002\046\014\000\002\046\014\000\002" +
    "\046\014\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\003\000\002\010\006\000\002\010\006" +
    "\000\002\044\005\000\002\044\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\006\000\002\012\006\000\002\053\003\000\002" +
    "\053\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0268\000\066\003\031\032\010\033\040\034\020\036" +
    "\014\037\055\041\023\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\062\060\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\ufef6\031\ufef6\033" +
    "\ufef6\036\ufef6\037\ufef6\001\002\000\014\002\uffd8\031\uffd8" +
    "\033\uffd8\036\uffd8\037\uffd8\001\002\000\016\032\u0232\057" +
    "\u0234\061\u0237\064\012\065\u0231\067\u0233\001\002\000\004" +
    "\032\u022b\001\002\000\030\002\ufff9\033\u0226\057\102\065" +
    "\100\072\104\073\075\074\073\075\103\076\074\077\101" +
    "\100\076\001\002\000\042\032\u0217\053\u0133\054\u012d\055" +
    "\u012f\057\u013c\060\u0130\061\u012c\065\u0154\067\u0152\072\u0129" +
    "\073\u011b\074\u0114\075\u0118\076\u0125\077\u011a\100\u0123\001" +
    "\002\000\030\003\uff92\034\uff92\035\uff92\053\uff92\054\uff92" +
    "\055\uff92\057\uff92\060\uff92\061\uff92\065\uff92\067\uff92\001" +
    "\002\000\026\006\133\032\u01e2\053\131\054\117\055\120" +
    "\057\132\060\121\061\116\065\125\067\124\001\002\000" +
    "\060\002\ufff8\003\031\032\067\034\020\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\002" +
    "\u01e0\001\002\000\014\002\ufef7\031\ufef7\033\ufef7\036\ufef7" +
    "\037\ufef7\001\002\000\014\002\uffd7\031\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\001\002\000\004\035\u01d8\001\002\000\020" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\032\uffea\065" +
    "\u0173\001\002\000\014\002\uff60\031\uff60\033\uff60\036\uff60" +
    "\037\uff60\001\002\000\026\006\133\032\u01ba\053\131\054" +
    "\117\055\120\057\132\060\121\061\116\065\125\067\124" +
    "\001\002\000\014\002\uff5e\031\uff5e\033\uff5e\036\uff5e\037" +
    "\uff5e\001\002\000\014\002\uff5b\031\uff5b\033\uff5b\036\uff5b" +
    "\037\uff5b\001\002\000\006\032\u01ae\033\u01af\001\002\000" +
    "\006\040\u01ac\065\u01ab\001\002\000\076\002\uff62\007\u0155" +
    "\011\u0159\013\u0157\014\u0158\015\u015a\016\u0115\017\u0112\020" +
    "\u0127\021\u0120\031\uff62\032\uffec\033\uff62\036\uff62\037\uff62" +
    "\053\u0133\054\u012d\055\u012f\057\u013c\060\u0130\061\u012c\065" +
    "\u0154\067\u0152\072\u0129\073\u011b\074\u0114\075\u0118\076\u0125" +
    "\077\u011a\100\u0123\001\002\000\056\003\031\032\067\034" +
    "\020\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uffda\031\uffda\033\uffda\036\uffda\037" +
    "\uffda\001\002\000\016\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\032\uffe7\001\002\000\044\003\uff90\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\032\uffe9\034\uff90\035\uff90" +
    "\053\uff90\054\uff90\055\uff90\057\uff90\060\uff90\061\uff90\065" +
    "\uff90\067\uff90\001\002\000\014\002\ufef8\031\ufef8\033\ufef8" +
    "\036\ufef8\037\ufef8\001\002\000\004\037\u01a9\001\002\000" +
    "\010\032\u0194\033\u0196\067\u0195\001\002\000\004\002\ufffa" +
    "\001\002\000\014\002\uff61\031\uff61\033\uff61\036\uff61\037" +
    "\uff61\001\002\000\014\002\uff5f\031\uff5f\033\uff5f\036\uff5f" +
    "\037\uff5f\001\002\000\014\002\uffd9\031\uffd9\033\uffd9\036" +
    "\uffd9\037\uffd9\001\002\000\014\015\u018d\016\u0115\017\u0112" +
    "\020\u0127\021\u0120\001\002\000\030\032\u017f\033\u0180\057" +
    "\102\065\100\072\104\073\075\074\073\075\103\076\074" +
    "\077\101\100\076\001\002\000\016\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\032\uffe8\001\002\000\030\003\273" +
    "\034\275\035\274\053\276\054\265\055\266\057\277\060" +
    "\267\061\263\065\272\067\270\001\002\000\006\032\244" +
    "\067\245\001\002\000\046\003\uff91\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\032\uffeb\033\241\034\uff91\035\uff91" +
    "\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91\061\uff91\065" +
    "\uff91\067\uff91\001\002\000\014\002\uff5c\031\uff5c\033\uff5c" +
    "\036\uff5c\037\uff5c\001\002\000\016\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\032\uffe5\001\002\000\006\032\222" +
    "\067\223\001\002\000\004\002\ufff5\001\002\000\016\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\032\uffe6\001\002" +
    "\000\014\002\uff5d\031\uff5d\033\uff5d\036\uff5d\037\uff5d\001" +
    "\002\000\006\032\063\033\064\001\002\000\014\002\uffdb" +
    "\031\uffdb\033\uffdb\036\uffdb\037\uffdb\001\002\000\014\002" +
    "\uffd6\031\uffd6\033\uffd6\036\uffd6\037\uffd6\001\002\000\006" +
    "\033\207\036\206\001\002\000\004\036\065\001\002\000" +
    "\060\003\031\032\067\034\020\037\071\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\032" +
    "\115\001\002\000\026\033\077\057\102\065\100\072\104" +
    "\073\075\074\073\075\103\076\074\077\101\100\076\001" +
    "\002\000\004\037\072\001\002\000\004\002\ufff2\001\002" +
    "\000\004\002\ufff1\001\002\000\006\033\uff7f\040\uff7f\001" +
    "\002\000\006\033\uff7d\040\uff7d\001\002\000\006\033\uff80" +
    "\040\uff80\001\002\000\006\033\uff7b\040\uff7b\001\002\000" +
    "\004\040\113\001\002\000\006\033\uff78\040\uff78\001\002" +
    "\000\006\033\uff7c\040\uff7c\001\002\000\006\033\uff79\040" +
    "\uff79\001\002\000\006\033\uff7e\040\uff7e\001\002\000\006" +
    "\033\uff7a\040\uff7a\001\002\000\006\033\106\040\107\001" +
    "\002\000\004\040\111\001\002\000\070\002\uff56\003\031" +
    "\031\uff56\032\067\033\uff56\034\020\036\uff56\037\uff56\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff50\031\uff50\033\uff50\036\uff50\037\uff50\001" +
    "\002\000\070\002\uff58\003\031\031\uff58\032\067\033\uff58" +
    "\034\020\036\uff58\037\uff58\041\023\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\uff52\031\uff52" +
    "\033\uff52\036\uff52\037\uff52\001\002\000\070\002\uff3d\003" +
    "\031\031\uff3d\032\067\033\uff3d\034\020\036\uff3d\037\uff3d" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff39\031\uff39\033\uff39\036\uff39\037\uff39" +
    "\001\002\000\024\006\133\053\131\054\117\055\120\057" +
    "\132\060\121\061\116\065\125\067\124\001\002\000\032" +
    "\004\ufebd\005\ufebd\015\ufebd\022\ufebd\023\ufebd\024\ufebd\025" +
    "\ufebd\026\ufebd\027\ufebd\031\ufebd\033\ufebd\036\ufebd\001\002" +
    "\000\032\004\ufebf\005\ufebf\015\ufebf\022\ufebf\023\ufebf\024" +
    "\ufebf\025\ufebf\026\ufebf\027\ufebf\031\ufebf\033\ufebf\036\ufebf" +
    "\001\002\000\032\004\ufebb\005\ufebb\015\ufebb\022\ufebb\023" +
    "\ufebb\024\ufebb\025\ufebb\026\ufebb\027\ufebb\031\ufebb\033\ufebb" +
    "\036\ufebb\001\002\000\032\004\ufeba\005\ufeba\015\ufeba\022" +
    "\ufeba\023\ufeba\024\ufeba\025\ufeba\026\ufeba\027\ufeba\031\ufeba" +
    "\033\ufeba\036\ufeba\001\002\000\010\031\ufec9\033\ufec9\036" +
    "\ufec9\001\002\000\020\015\203\022\174\023\175\024\201" +
    "\025\200\026\177\027\202\001\002\000\032\004\ufebe\005" +
    "\ufebe\015\ufebe\022\ufebe\023\ufebe\024\ufebe\025\ufebe\026\ufebe" +
    "\027\ufebe\031\ufebe\033\ufebe\036\ufebe\001\002\000\022\006" +
    "\147\015\ufec1\022\ufec1\023\ufec1\024\ufec1\025\ufec1\026\ufec1" +
    "\027\ufec1\001\002\000\010\031\ufec8\033\ufec8\036\ufec8\001" +
    "\002\000\014\004\155\005\156\031\ufec6\033\ufec6\036\ufec6" +
    "\001\002\000\004\033\164\001\002\000\032\004\ufec0\005" +
    "\ufec0\015\ufec0\022\ufec0\023\ufec0\024\ufec0\025\ufec0\026\ufec0" +
    "\027\ufec0\031\ufec0\033\ufec0\036\ufec0\001\002\000\032\004" +
    "\ufebc\005\ufebc\015\ufebc\022\ufebc\023\ufebc\024\ufebc\025\ufebc" +
    "\026\ufebc\027\ufebc\031\ufebc\033\ufebc\036\ufebc\001\002\000" +
    "\004\032\142\001\002\000\014\004\135\005\137\031\ufeb9" +
    "\033\ufeb9\036\ufeb9\001\002\000\022\053\ufeb1\054\ufeb1\055" +
    "\ufeb1\057\ufeb1\060\ufeb1\061\ufeb1\065\ufeb1\067\ufeb1\001\002" +
    "\000\022\053\131\054\117\055\120\057\132\060\121\061" +
    "\116\065\140\067\124\001\002\000\022\053\ufeb0\054\ufeb0" +
    "\055\ufeb0\057\ufeb0\060\ufeb0\061\ufeb0\065\ufeb0\067\ufeb0\001" +
    "\002\000\032\004\ufec1\005\ufec1\015\ufec1\022\ufec1\023\ufec1" +
    "\024\ufec1\025\ufec1\026\ufec1\027\ufec1\031\ufec1\033\ufec1\036" +
    "\ufec1\001\002\000\010\031\ufec7\033\ufec7\036\ufec7\001\002" +
    "\000\024\006\147\053\131\054\117\055\120\057\132\060" +
    "\121\061\116\065\145\067\124\001\002\000\012\031\ufeb6" +
    "\033\ufeb6\036\ufeb6\064\ufeb6\001\002\000\004\033\163\001" +
    "\002\000\022\015\ufec1\022\ufec1\023\ufec1\024\ufec1\025\ufec1" +
    "\026\ufec1\027\ufec1\033\154\001\002\000\006\004\155\005" +
    "\156\001\002\000\004\032\152\001\002\000\004\033\151" +
    "\001\002\000\010\031\ufec4\033\ufec4\036\ufec4\001\002\000" +
    "\006\006\147\065\153\001\002\000\004\033\154\001\002" +
    "\000\012\031\ufeb2\033\ufeb2\036\ufeb2\064\ufeb2\001\002\000" +
    "\004\006\147\001\002\000\004\006\147\001\002\000\012" +
    "\031\ufeb4\033\ufeb4\036\ufeb4\064\ufeb4\001\002\000\016\004" +
    "\155\005\156\031\ufeb7\033\ufeb7\036\ufeb7\064\ufeb7\001\002" +
    "\000\012\031\ufeb5\033\ufeb5\036\ufeb5\064\ufeb5\001\002\000" +
    "\016\004\155\005\156\031\ufeb8\033\ufeb8\036\ufeb8\064\ufeb8" +
    "\001\002\000\012\031\ufeb3\033\ufeb3\036\ufeb3\064\ufeb3\001" +
    "\002\000\004\036\165\001\002\000\056\003\031\032\067" +
    "\034\020\041\023\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\037\167\001\002\000\070\002\ufeee" +
    "\003\031\031\ufeee\032\067\033\ufeee\034\020\036\ufeee\037" +
    "\ufeee\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\ufeed\031\ufeed\033\ufeed\036\ufeed\037" +
    "\ufeed\001\002\000\004\064\172\001\002\000\056\003\031" +
    "\032\067\034\020\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\010\031\ufec5\033\ufec5\036\ufec5" +
    "\001\002\000\022\053\ufeaf\054\ufeaf\055\ufeaf\057\ufeaf\060" +
    "\ufeaf\061\ufeaf\065\ufeaf\067\ufeaf\001\002\000\022\053\ufeae" +
    "\054\ufeae\055\ufeae\057\ufeae\060\ufeae\061\ufeae\065\ufeae\067" +
    "\ufeae\001\002\000\022\053\131\054\117\055\120\057\132" +
    "\060\121\061\116\065\140\067\124\001\002\000\022\053" +
    "\ufeab\054\ufeab\055\ufeab\057\ufeab\060\ufeab\061\ufeab\065\ufeab" +
    "\067\ufeab\001\002\000\022\053\ufead\054\ufead\055\ufead\057" +
    "\ufead\060\ufead\061\ufead\065\ufead\067\ufead\001\002\000\022" +
    "\053\ufeac\054\ufeac\055\ufeac\057\ufeac\060\ufeac\061\ufeac\065" +
    "\ufeac\067\ufeac\001\002\000\022\053\ufeaa\054\ufeaa\055\ufeaa" +
    "\057\ufeaa\060\ufeaa\061\ufeaa\065\ufeaa\067\ufeaa\001\002\000" +
    "\022\053\ufea9\054\ufea9\055\ufea9\057\ufea9\060\ufea9\061\ufea9" +
    "\065\ufea9\067\ufea9\001\002\000\032\004\ufec3\005\ufec3\015" +
    "\203\022\174\023\175\024\201\025\200\026\177\027\202" +
    "\031\ufec3\033\ufec3\036\ufec3\001\002\000\014\004\ufec2\005" +
    "\ufec2\031\ufec2\033\ufec2\036\ufec2\001\002\000\060\003\031" +
    "\032\067\034\020\037\220\041\023\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\062\003\031\032\067" +
    "\034\020\036\210\037\212\041\023\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\062\002\ufffd\003\031" +
    "\032\067\034\020\037\215\041\023\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\004\037\213\001\002" +
    "\000\004\002\uffed\001\002\000\004\002\uffee\001\002\000" +
    "\006\002\ufffe\037\216\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\037\221\001\002\000" +
    "\004\002\uffef\001\002\000\004\002\ufff0\001\002\000\006" +
    "\033\230\067\227\001\002\000\004\033\224\001\002\000" +
    "\004\040\225\001\002\000\070\002\uff20\003\031\031\uff20" +
    "\032\067\033\uff20\034\020\036\uff20\037\uff20\041\023\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uff1c\031\uff1c\033\uff1c\036\uff1c\037\uff1c\001\002\000" +
    "\006\033\233\040\234\001\002\000\004\040\231\001\002" +
    "\000\070\002\uff22\003\031\031\uff22\032\067\033\uff22\034" +
    "\020\036\uff22\037\uff22\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uff1e\031\uff1e\033" +
    "\uff1e\036\uff1e\037\uff1e\001\002\000\072\002\uff23\003\031" +
    "\031\uff23\032\067\033\uff23\034\020\036\uff23\037\uff23\040" +
    "\236\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\070\002\uff21\003\031\031\uff21\032\067\033" +
    "\uff21\034\020\036\uff21\037\uff21\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff1d\031" +
    "\uff1d\033\uff1d\036\uff1d\037\uff1d\001\002\000\070\002\uff25" +
    "\003\031\031\uff25\032\067\033\uff25\034\020\036\uff25\037" +
    "\uff25\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff1f\031\uff1f\033\uff1f\036\uff1f\037" +
    "\uff1f\001\002\000\014\002\uff24\031\uff24\033\uff24\036\uff24" +
    "\037\uff24\001\002\000\004\040\242\001\002\000\070\002" +
    "\uff57\003\031\031\uff57\032\067\033\uff57\034\020\036\uff57" +
    "\037\uff57\041\023\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uff51\031\uff51\033\uff51\036\uff51" +
    "\037\uff51\001\002\000\006\033\252\067\251\001\002\000" +
    "\004\033\246\001\002\000\004\040\247\001\002\000\070" +
    "\002\uff16\003\031\031\uff16\032\067\033\uff16\034\020\036" +
    "\uff16\037\uff16\041\023\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uff12\031\uff12\033\uff12\036" +
    "\uff12\037\uff12\001\002\000\006\033\255\040\256\001\002" +
    "\000\004\040\253\001\002\000\070\002\uff18\003\031\031" +
    "\uff18\032\067\033\uff18\034\020\036\uff18\037\uff18\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff14\031\uff14\033\uff14\036\uff14\037\uff14\001\002" +
    "\000\072\002\uff19\003\031\031\uff19\032\067\033\uff19\034" +
    "\020\036\uff19\037\uff19\040\260\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\070\002\uff17\003" +
    "\031\031\uff17\032\067\033\uff17\034\020\036\uff17\037\uff17" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff13\031\uff13\033\uff13\036\uff13\037\uff13" +
    "\001\002\000\070\002\uff1b\003\031\031\uff1b\032\067\033" +
    "\uff1b\034\020\036\uff1b\037\uff1b\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff15\031" +
    "\uff15\033\uff15\036\uff15\037\uff15\001\002\000\014\002\uff1a" +
    "\031\uff1a\033\uff1a\036\uff1a\037\uff1a\001\002\000\014\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\001\002\000\014" +
    "\015\u0178\016\u0115\017\u0112\020\u0127\021\u0120\001\002\000" +
    "\014\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\001\002" +
    "\000\014\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\001" +
    "\002\000\014\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\001\002\000\014\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\001\002\000\014\002\uff67\031\uff67\033\uff67\036\uff67" +
    "\037\uff67\001\002\000\122\002\uff66\003\031\015\u0119\016" +
    "\u0115\017\u0112\020\u0127\021\u0120\031\uff66\032\067\033\uff66" +
    "\034\020\036\uff66\037\uff66\040\u0113\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\u0128" +
    "\054\u0126\055\u011c\056\011\057\u0121\060\u011f\061\u011d\064" +
    "\012\065\u0117\067\u0116\070\006\072\u0129\073\u011b\074\u0114" +
    "\075\u0118\076\u0125\077\u011a\100\u0123\001\002\000\056\003" +
    "\031\032\067\034\020\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\004\065\u010a\001\002\000" +
    "\006\035\301\065\300\001\002\000\014\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\001\002\000\014\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\001\002\000\004\015\u0104" +
    "\001\002\000\006\015\303\065\302\001\002\000\010\015" +
    "\357\034\355\040\356\001\002\000\004\034\304\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\010\031\353\035\uffc9\040\uffc9" +
    "\001\002\000\060\031\uff6d\035\uff6d\040\uff6d\053\uff6d\054" +
    "\uff6d\057\uff6d\061\uff6d\065\uff6d\067\uff6d\072\uff6d\073\uff6d" +
    "\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\102" +
    "\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d\107\uff6d\001\002" +
    "\000\060\031\uff6f\035\uff6f\040\uff6f\053\uff6f\054\uff6f\057" +
    "\uff6f\061\uff6f\065\uff6f\067\uff6f\072\uff6f\073\uff6f\074\uff6f" +
    "\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103" +
    "\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\001\002\000\010" +
    "\031\351\035\uffc6\040\uffc6\001\002\000\060\031\uff6c\035" +
    "\uff6c\040\uff6c\053\uff6c\054\uff6c\057\uff6c\061\uff6c\065\uff6c" +
    "\067\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077" +
    "\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c" +
    "\106\uff6c\107\uff6c\001\002\000\060\031\uff74\035\uff74\040" +
    "\uff74\053\uff74\054\uff74\057\uff74\061\uff74\065\uff74\067\uff74" +
    "\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100" +
    "\uff74\101\uff74\102\uff74\103\uff74\104\uff74\105\uff74\106\uff74" +
    "\107\uff74\001\002\000\060\031\uff72\035\uff72\040\uff72\053" +
    "\uff72\054\uff72\057\uff72\061\uff72\065\uff72\067\uff72\072\uff72" +
    "\073\uff72\074\uff72\075\uff72\076\uff72\077\uff72\100\uff72\101" +
    "\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72" +
    "\001\002\000\010\031\347\035\uffc8\040\uffc8\001\002\000" +
    "\010\031\345\035\uffca\040\uffca\001\002\000\060\031\uff6b" +
    "\035\uff6b\040\uff6b\053\uff6b\054\uff6b\057\uff6b\061\uff6b\065" +
    "\uff6b\067\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076\uff6b" +
    "\077\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b\105" +
    "\uff6b\106\uff6b\107\uff6b\001\002\000\060\031\uff77\035\uff77" +
    "\040\uff77\053\uff77\054\uff77\057\uff77\061\uff77\065\uff77\067" +
    "\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77" +
    "\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106" +
    "\uff77\107\uff77\001\002\000\060\031\uff75\035\uff75\040\uff75" +
    "\053\uff75\054\uff75\057\uff75\061\uff75\065\uff75\067\uff75\072" +
    "\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75" +
    "\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75\107" +
    "\uff75\001\002\000\060\031\uff71\035\uff71\040\uff71\053\uff71" +
    "\054\uff71\057\uff71\061\uff71\065\uff71\067\uff71\072\uff71\073" +
    "\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\101\uff71" +
    "\102\uff71\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\001" +
    "\002\000\060\031\uff73\035\uff73\040\uff73\053\uff73\054\uff73" +
    "\057\uff73\061\uff73\065\uff73\067\uff73\072\uff73\073\uff73\074" +
    "\uff73\075\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102\uff73" +
    "\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\001\002\000" +
    "\010\031\343\035\uffc7\040\uffc7\001\002\000\010\031\341" +
    "\035\uffc5\040\uffc5\001\002\000\004\035\336\001\002\000" +
    "\060\031\uff76\035\uff76\040\uff76\053\uff76\054\uff76\057\uff76" +
    "\061\uff76\065\uff76\067\uff76\072\uff76\073\uff76\074\uff76\075" +
    "\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76\103\uff76" +
    "\104\uff76\105\uff76\106\uff76\107\uff76\001\002\000\060\031" +
    "\uff6e\035\uff6e\040\uff6e\053\uff6e\054\uff6e\057\uff6e\061\uff6e" +
    "\065\uff6e\067\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076" +
    "\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e" +
    "\105\uff6e\106\uff6e\107\uff6e\001\002\000\060\031\uff70\035" +
    "\uff70\040\uff70\053\uff70\054\uff70\057\uff70\061\uff70\065\uff70" +
    "\067\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70\077" +
    "\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70\105\uff70" +
    "\106\uff70\107\uff70\001\002\000\060\031\333\035\uffc4\040" +
    "\uffc4\053\314\054\323\057\324\061\310\065\315\067\305" +
    "\072\321\073\317\074\326\075\320\076\312\077\322\100" +
    "\313\101\330\102\307\103\327\104\306\105\311\106\316" +
    "\107\332\001\002\000\060\031\uff6a\035\uff6a\040\uff6a\053" +
    "\uff6a\054\uff6a\057\uff6a\061\uff6a\065\uff6a\067\uff6a\072\uff6a" +
    "\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101" +
    "\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a" +
    "\001\002\000\052\053\314\054\323\057\324\061\310\065" +
    "\315\067\305\072\321\073\317\074\326\075\320\076\312" +
    "\077\322\100\313\101\330\102\307\103\327\104\306\105" +
    "\311\106\316\107\332\001\002\000\006\035\uffbc\040\uffbc" +
    "\001\002\000\006\035\uffbd\040\uffbd\001\002\000\004\040" +
    "\337\001\002\000\056\003\031\032\067\034\020\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uffd0\031\uffd0\033\uffd0\036\uffd0\037\uffd0\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\006\035\uffbe\040\uffbe\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\006\035\uffc0\040\uffc0\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\006\035\uffc3\040\uffc3\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\006\035\uffc1\040\uffc1\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\006\035\uffbf\040\uffbf\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\006\035\uffc2\040\uffc2\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\056\003\031\032\067\034\020" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\054\034\360\053\314\054\323\057\324\061\310" +
    "\065\315\067\305\072\321\073\317\074\326\075\320\076" +
    "\312\077\322\100\313\101\330\102\307\103\327\104\306" +
    "\105\311\106\316\107\332\001\002\000\054\035\365\053" +
    "\314\054\323\057\324\061\310\065\315\067\305\072\321" +
    "\073\317\074\326\075\320\076\312\077\322\100\313\101" +
    "\330\102\307\103\327\104\306\105\311\106\316\107\332" +
    "\001\002\000\004\035\362\001\002\000\004\040\363\001" +
    "\002\000\056\003\031\032\067\034\020\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\uffce\031\uffce\033\uffce\036\uffce\037\uffce\001\002\000\004" +
    "\040\375\001\002\000\006\035\367\040\370\001\002\000" +
    "\060\003\031\032\067\034\020\040\372\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\056\003" +
    "\031\032\067\034\020\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uffcc\031\uffcc\033" +
    "\uffcc\036\uffcc\037\uffcc\001\002\000\056\003\031\032\067" +
    "\034\020\041\023\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\uffcb\031\uffcb\033\uffcb\036\uffcb" +
    "\037\uffcb\001\002\000\014\002\uffd5\031\uffd5\033\uffd5\036" +
    "\uffd5\037\uffd5\001\002\000\056\003\031\032\067\034\020" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uffcd\031\uffcd\033\uffcd\036\uffcd\037\uffcd" +
    "\001\002\000\014\002\uffd4\031\uffd4\033\uffd4\036\uffd4\037" +
    "\uffd4\001\002\000\004\035\u0101\001\002\000\004\040\u0102" +
    "\001\002\000\056\003\031\032\067\034\020\041\023\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\014" +
    "\002\uffcf\031\uffcf\033\uffcf\036\uffcf\037\uffcf\001\002\000" +
    "\004\034\u0105\001\002\000\052\053\314\054\323\057\324" +
    "\061\310\065\315\067\305\072\321\073\317\074\326\075" +
    "\320\076\312\077\322\100\313\101\330\102\307\103\327" +
    "\104\306\105\311\106\316\107\332\001\002\000\004\035" +
    "\u0107\001\002\000\004\040\u0108\001\002\000\056\003\031" +
    "\032\067\034\020\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uffd1\031\uffd1\033\uffd1" +
    "\036\uffd1\037\uffd1\001\002\000\004\015\u010b\001\002\000" +
    "\004\034\u010c\001\002\000\052\053\314\054\323\057\324" +
    "\061\310\065\315\067\305\072\321\073\317\074\326\075" +
    "\320\076\312\077\322\100\313\101\330\102\307\103\327" +
    "\104\306\105\311\106\316\107\332\001\002\000\004\035" +
    "\u010e\001\002\000\004\040\u010f\001\002\000\056\003\031" +
    "\032\067\034\020\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uffd2\031\uffd2\033\uffd2" +
    "\036\uffd2\037\uffd2\001\002\000\014\002\uff9a\031\uff9a\033" +
    "\uff9a\036\uff9a\037\uff9a\001\002\000\040\053\uff98\054\uff98" +
    "\055\uff98\057\uff98\060\uff98\061\uff98\065\uff98\067\uff98\072" +
    "\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98" +
    "\001\002\000\070\002\uff69\003\031\031\uff69\032\067\033" +
    "\uff69\034\020\036\uff69\037\uff69\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\072\002\uff85\003" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\045\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\064\uff85\065\uff85\067\uff85\070" +
    "\uff85\001\002\000\040\053\uff99\054\uff99\055\uff99\057\uff99" +
    "\060\uff99\061\uff99\065\uff99\067\uff99\072\uff99\073\uff99\074" +
    "\uff99\075\uff99\076\uff99\077\uff99\100\uff99\001\002\000\022" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\032\uffea\040" +
    "\uff8e\065\u0173\001\002\000\100\002\uff62\007\u0155\011\u0159" +
    "\013\u0157\014\u0158\015\u015a\016\u0115\017\u0112\020\u0127\021" +
    "\u0120\031\uff62\032\uffec\033\uff62\036\uff62\037\uff62\040\uff8f" +
    "\053\u0133\054\u012d\055\u012f\057\u013c\060\u0130\061\u012c\065" +
    "\u0154\067\u0152\072\u0129\073\u011b\074\u0114\075\u0118\076\u0125" +
    "\077\u011a\100\u0123\001\002\000\072\002\uff84\003\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\045\uff84\047\uff84\050\uff84\051" +
    "\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\064\uff84\065\uff84\067\uff84\070\uff84\001" +
    "\002\000\042\040\u013e\053\u0133\054\u012d\055\u012f\057\u013c" +
    "\060\u0130\061\u012c\065\u013a\067\u0138\072\u0129\073\u011b\074" +
    "\u0114\075\u0118\076\u0125\077\u011a\100\u0123\001\002\000\072" +
    "\002\uff82\003\uff82\031\uff82\032\uff82\033\uff82\034\uff82\036" +
    "\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\045\uff82" +
    "\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\064\uff82\065\uff82" +
    "\067\uff82\070\uff82\001\002\000\072\002\uff86\003\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\045\uff86\047\uff86\050\uff86\051" +
    "\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\064\uff86\065\uff86\067\uff86\070\uff86\001" +
    "\002\000\020\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\032\uffe7\040\uff88\001\002\000\046\003\uff90\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\032\uffe9\034\uff90\035\uff90" +
    "\040\uff8b\053\uff90\054\uff90\055\uff90\057\uff90\060\uff90\061" +
    "\uff90\065\uff90\067\uff90\001\002\000\014\002\uff65\031\uff65" +
    "\033\uff65\036\uff65\037\uff65\001\002\000\020\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\032\uffe8\040\uff89\001\002" +
    "\000\040\053\uff96\054\uff96\055\uff96\057\uff96\060\uff96\061" +
    "\uff96\065\uff96\067\uff96\072\uff96\073\uff96\074\uff96\075\uff96" +
    "\076\uff96\077\uff96\100\uff96\001\002\000\050\003\uff91\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\032\uffeb\033\241" +
    "\034\uff91\035\uff91\040\uff8a\053\uff91\054\uff91\055\uff91\057" +
    "\uff91\060\uff91\061\uff91\065\uff91\067\uff91\001\002\000\040" +
    "\053\u0133\054\u012d\055\u012f\057\u0134\060\u0130\061\u012c\065" +
    "\u0132\067\u0131\072\u0129\073\u011b\074\u0114\075\u0118\076\u0125" +
    "\077\u011a\100\u0123\001\002\000\072\002\uff81\003\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\045\uff81\047\uff81\050\uff81\051" +
    "\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\064\uff81\065\uff81\067\uff81\070\uff81\001" +
    "\002\000\004\040\u012a\001\002\000\072\002\uff83\003\uff83" +
    "\031\uff83\032\uff83\033\uff83\034\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\045\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057" +
    "\uff83\060\uff83\061\uff83\064\uff83\065\uff83\067\uff83\070\uff83" +
    "\001\002\000\020\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\032\uffe5\040\uff8c\001\002\000\040\053\uff97\054\uff97" +
    "\055\uff97\057\uff97\060\uff97\061\uff97\065\uff97\067\uff97\072" +
    "\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97" +
    "\001\002\000\020\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\032\uffe6\040\uff8d\001\002\000\072\002\uff87\003\uff87" +
    "\031\uff87\032\uff87\033\uff87\034\uff87\036\uff87\037\uff87\040" +
    "\uff87\041\uff87\042\uff87\043\uff87\045\uff87\047\uff87\050\uff87" +
    "\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057" +
    "\uff87\060\uff87\061\uff87\064\uff87\065\uff87\067\uff87\070\uff87" +
    "\001\002\000\070\002\uff9e\003\031\031\uff9e\032\067\033" +
    "\uff9e\034\020\036\uff9e\037\uff9e\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff9f\031" +
    "\uff9f\033\uff9f\036\uff9f\037\uff9f\001\002\000\072\002\uff8b" +
    "\003\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\045\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\064\uff8b\065\uff8b\067\uff8b" +
    "\070\uff8b\001\002\000\072\002\uff8c\003\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\045\uff8c\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\064\uff8c\065\uff8c\067\uff8c\070\uff8c\001\002\000" +
    "\004\040\u0136\001\002\000\072\002\uff88\003\uff88\031\uff88" +
    "\032\uff88\033\uff88\034\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\045\uff88\047\uff88\050\uff88\051\uff88" +
    "\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060" +
    "\uff88\061\uff88\064\uff88\065\uff88\067\uff88\070\uff88\001\002" +
    "\000\072\002\uff89\003\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\045\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\064\uff89" +
    "\065\uff89\067\uff89\070\uff89\001\002\000\016\002\uff8e\031" +
    "\uff8e\033\uff8e\036\uff8e\037\uff8e\040\uff94\001\002\000\016" +
    "\002\uff8f\031\uff8f\033\uff8f\036\uff8f\037\uff8f\040\uff95\001" +
    "\002\000\072\002\uff8d\003\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\045\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\064" +
    "\uff8d\065\uff8d\067\uff8d\070\uff8d\001\002\000\016\002\uff8a" +
    "\031\uff8a\033\uff8a\036\uff8a\037\uff8a\040\uff93\001\002\000" +
    "\014\002\uff9b\031\uff9b\033\uff9b\036\uff9b\037\uff9b\001\002" +
    "\000\070\002\uffa9\003\031\031\uffa9\032\067\033\uffa9\034" +
    "\020\036\uffa9\037\uffa9\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uffa7\031\uffa7\033" +
    "\uffa7\036\uffa7\037\uffa7\001\002\000\102\002\uff8e\003\uff8e" +
    "\007\uff0d\010\uff0d\011\uff0d\012\uff0d\031\uff8e\032\uff8e\033" +
    "\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\045\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\064\uff8e\065\uff8e\067\uff8e\070\uff8e\001\002\000\004\040" +
    "\u0151\001\002\000\102\002\uff8f\003\uff8f\007\uff0e\010\uff0e" +
    "\011\uff0e\012\uff0e\031\uff8f\032\uff8f\033\uff8f\034\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\045\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\064\uff8f\065\uff8f" +
    "\067\uff8f\070\uff8f\001\002\000\012\007\u0144\010\u0145\011" +
    "\u0143\012\u0146\001\002\000\072\002\uff8a\003\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\036\uff8a\037\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\045\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\064\uff8a\065\uff8a\067\uff8a\070\uff8a\001\002" +
    "\000\072\002\uff9c\003\031\031\uff9c\032\067\033\uff9c\034" +
    "\020\036\uff9c\037\uff9c\040\u0140\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\070\002\uffa4\003" +
    "\031\031\uffa4\032\067\033\uffa4\034\020\036\uffa4\037\uffa4" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uffa5\031\uffa5\033\uffa5\036\uffa5\037\uffa5" +
    "\001\002\000\070\002\uffaa\003\031\031\uffaa\032\067\033" +
    "\uffaa\034\020\036\uffaa\037\uffaa\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff9d\031" +
    "\uff9d\033\uff9d\036\uff9d\037\uff9d\001\002\000\014\002\uffa8" +
    "\031\uffa8\033\uffa8\036\uffa8\037\uffa8\001\002\000\006\065" +
    "\u0147\067\u0148\001\002\000\006\065\u0147\067\u0148\001\002" +
    "\000\006\065\u0147\067\u0148\001\002\000\006\065\u0147\067" +
    "\u0148\001\002\000\014\007\uff0e\010\uff0e\011\uff0e\012\uff0e" +
    "\040\uff0e\001\002\000\014\007\uff0d\010\uff0d\011\uff0d\012" +
    "\uff0d\040\uff0d\001\002\000\014\007\u0144\010\u0145\011\u0143" +
    "\012\u0146\040\uff09\001\002\000\004\040\uff05\001\002\000" +
    "\014\007\u0144\010\u0145\011\u0143\012\u0146\040\uff0a\001\002" +
    "\000\004\040\uff06\001\002\000\014\007\u0144\010\u0145\011" +
    "\u0143\012\u0146\040\uff0c\001\002\000\004\040\uff08\001\002" +
    "\000\014\007\u0144\010\u0145\011\u0143\012\u0146\040\uff0b\001" +
    "\002\000\004\040\uff07\001\002\000\014\002\uffa6\031\uffa6" +
    "\033\uffa6\036\uffa6\037\uffa6\001\002\000\006\033\uff8e\040" +
    "\uff8e\001\002\000\040\053\u0133\054\u012d\055\u012f\057\u0134" +
    "\060\u0130\061\u012c\065\u0132\067\u0131\072\u0129\073\u011b\074" +
    "\u0114\075\u0118\076\u0125\077\u011a\100\u0123\001\002\000\006" +
    "\033\uff8f\040\uff8f\001\002\000\004\040\u016d\001\002\000" +
    "\004\040\u016b\001\002\000\072\002\ufefc\003\031\031\ufefc" +
    "\032\067\033\ufefc\034\020\036\ufefc\037\ufefc\040\u0168\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\072\002\ufefb\003\031\031\ufefb\032\067\033\ufefb\034" +
    "\020\036\ufefb\037\ufefb\040\u0165\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\004\040\u0163\001" +
    "\002\000\042\040\u015d\053\u0133\054\u012d\055\u012f\057\u013c" +
    "\060\u0130\061\u012c\065\u013a\067\u0138\072\u0129\073\u011b\074" +
    "\u0114\075\u0118\076\u0125\077\u011a\100\u0123\001\002\000\004" +
    "\040\u0162\001\002\000\072\002\uffad\003\031\031\uffad\032" +
    "\067\033\uffad\034\020\036\uffad\037\uffad\040\u015f\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\070\002\uffb5\003\031\031\uffb5\032\067\033\uffb5\034\020" +
    "\036\uffb5\037\uffb5\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uffb6\031\uffb6\033\uffb6" +
    "\036\uffb6\037\uffb6\001\002\000\070\002\uffbb\003\031\031" +
    "\uffbb\032\067\033\uffbb\034\020\036\uffbb\037\uffbb\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uffae\031\uffae\033\uffae\036\uffae\037\uffae\001\002" +
    "\000\014\002\uffb9\031\uffb9\033\uffb9\036\uffb9\037\uffb9\001" +
    "\002\000\014\002\uffb7\031\uffb7\033\uffb7\036\uffb7\037\uffb7" +
    "\001\002\000\070\002\ufeff\003\031\031\ufeff\032\067\033" +
    "\ufeff\034\020\036\ufeff\037\ufeff\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\ufefd\031" +
    "\ufefd\033\ufefd\036\ufefd\037\ufefd\001\002\000\070\002\uff03" +
    "\003\031\031\uff03\032\067\033\uff03\034\020\036\uff03\037" +
    "\uff03\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\ufef9\031\ufef9\033\ufef9\036\ufef9\037" +
    "\ufef9\001\002\000\014\002\uff01\031\uff01\033\uff01\036\uff01" +
    "\037\uff01\001\002\000\070\002\uff04\003\031\031\uff04\032" +
    "\067\033\uff04\034\020\036\uff04\037\uff04\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufefa\031\ufefa\033\ufefa\036\ufefa\037\ufefa\001\002\000\014" +
    "\002\uff02\031\uff02\033\uff02\036\uff02\037\uff02\001\002\000" +
    "\070\002\uffaf\003\031\031\uffaf\032\067\033\uffaf\034\020" +
    "\036\uffaf\037\uffaf\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uffb0\031\uffb0\033\uffb0" +
    "\036\uffb0\037\uffb0\001\002\000\070\002\uff00\003\031\031" +
    "\uff00\032\067\033\uff00\034\020\036\uff00\037\uff00\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufefe\031\ufefe\033\ufefe\036\ufefe\037\ufefe\001\002" +
    "\000\004\040\u0171\001\002\000\014\002\uffac\031\uffac\033" +
    "\uffac\036\uffac\037\uffac\001\002\000\070\002\uffba\003\031" +
    "\031\uffba\032\067\033\uffba\034\020\036\uffba\037\uffba\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uffb8\031\uffb8\033\uffb8\036\uffb8\037\uffb8\001" +
    "\002\000\004\040\u0174\001\002\000\070\002\uff64\003\031" +
    "\031\uff64\032\067\033\uff64\034\020\036\uff64\037\uff64\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff63\031\uff63\033\uff63\036\uff63\037\uff63\001" +
    "\002\000\014\002\uff68\031\uff68\033\uff68\036\uff68\037\uff68" +
    "\001\002\000\040\053\u0133\054\u012d\055\u012f\057\u013c\060" +
    "\u0130\061\u012c\065\u0154\067\u0152\072\u0129\073\u011b\074\u0114" +
    "\075\u0118\076\u0125\077\u011a\100\u0123\001\002\000\040\053" +
    "\u0133\054\u012d\055\u012f\057\u013c\060\u0130\061\u012c\065\u0154" +
    "\067\u0152\072\u0129\073\u011b\074\u0114\075\u0118\076\u0125\077" +
    "\u011a\100\u0123\001\002\000\004\040\u017a\001\002\000\070" +
    "\002\uffa2\003\031\031\uffa2\032\067\033\uffa2\034\020\036" +
    "\uffa2\037\uffa2\041\023\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uffa3\031\uffa3\033\uffa3\036" +
    "\uffa3\037\uffa3\001\002\000\004\040\u017d\001\002\000\070" +
    "\002\uffa0\003\031\031\uffa0\032\067\033\uffa0\034\020\036" +
    "\uffa0\037\uffa0\041\023\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\014\002\uffa1\031\uffa1\033\uffa1\036" +
    "\uffa1\037\uffa1\001\002\000\024\057\102\065\100\072\104" +
    "\073\075\074\073\075\103\076\074\077\101\100\076\001" +
    "\002\000\070\002\uff54\003\031\031\uff54\032\067\033\uff54" +
    "\034\020\036\uff54\037\uff54\041\023\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\004\033\u0182\001\002" +
    "\000\004\040\u0183\001\002\000\070\002\uff55\003\031\031" +
    "\uff55\032\067\033\uff55\034\020\036\uff55\037\uff55\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff4f\031\uff4f\033\uff4f\036\uff4f\037\uff4f\001\002" +
    "\000\014\002\uff4e\031\uff4e\033\uff4e\036\uff4e\037\uff4e\001" +
    "\002\000\006\033\u0187\040\u0188\001\002\000\004\040\u018a" +
    "\001\002\000\070\002\uff53\003\031\031\uff53\032\067\033" +
    "\uff53\034\020\036\uff53\037\uff53\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff4d\031" +
    "\uff4d\033\uff4d\036\uff4d\037\uff4d\001\002\000\070\002\uff5a" +
    "\003\031\031\uff5a\032\067\033\uff5a\034\020\036\uff5a\037" +
    "\uff5a\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff59\031\uff59\033\uff59\036\uff59\037" +
    "\uff59\001\002\000\040\053\u0133\054\u012d\055\u012f\057\u013c" +
    "\060\u0130\061\u012c\065\u0154\067\u0152\072\u0129\073\u011b\074" +
    "\u0114\075\u0118\076\u0125\077\u011a\100\u0123\001\002\000\040" +
    "\053\u0133\054\u012d\055\u012f\057\u013c\060\u0130\061\u012c\065" +
    "\u0154\067\u0152\072\u0129\073\u011b\074\u0114\075\u0118\076\u0125" +
    "\077\u011a\100\u0123\001\002\000\004\040\u018f\001\002\000" +
    "\070\002\uffb3\003\031\031\uffb3\032\067\033\uffb3\034\020" +
    "\036\uffb3\037\uffb3\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uffb4\031\uffb4\033\uffb4" +
    "\036\uffb4\037\uffb4\001\002\000\004\040\u0192\001\002\000" +
    "\070\002\uffb1\003\031\031\uffb1\032\067\033\uffb1\034\020" +
    "\036\uffb1\037\uffb1\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uffb2\031\uffb2\033\uffb2" +
    "\036\uffb2\037\uffb2\001\002\000\010\033\u019d\040\u019e\067" +
    "\u019c\001\002\000\004\033\u0199\001\002\000\004\040\u0197" +
    "\001\002\000\070\002\uff2d\003\031\031\uff2d\032\067\033" +
    "\uff2d\034\020\036\uff2d\037\uff2d\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff27\031" +
    "\uff27\033\uff27\036\uff27\037\uff27\001\002\000\004\040\u019a" +
    "\001\002\000\070\002\uff2c\003\031\031\uff2c\032\067\033" +
    "\uff2c\034\020\036\uff2c\037\uff2c\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\014\002\uff26\031" +
    "\uff26\033\uff26\036\uff26\037\uff26\001\002\000\006\033\u01a3" +
    "\040\u01a4\001\002\000\072\002\uff31\003\031\031\uff31\032" +
    "\067\033\uff31\034\020\036\uff31\037\uff31\040\u01a0\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\070\002\uff2f\003\031\031\uff2f\032\067\033\uff2f\034\020" +
    "\036\uff2f\037\uff2f\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\uff29\031\uff29\033\uff29" +
    "\036\uff29\037\uff29\001\002\000\070\002\uff35\003\031\031" +
    "\uff35\032\067\033\uff35\034\020\036\uff35\037\uff35\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff2b\031\uff2b\033\uff2b\036\uff2b\037\uff2b\001\002" +
    "\000\014\002\uff33\031\uff33\033\uff33\036\uff33\037\uff33\001" +
    "\002\000\072\002\uff30\003\031\031\uff30\032\067\033\uff30" +
    "\034\020\036\uff30\037\uff30\040\u01a6\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\070\002\uff2e" +
    "\003\031\031\uff2e\032\067\033\uff2e\034\020\036\uff2e\037" +
    "\uff2e\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\uff28\031\uff28\033\uff28\036\uff28\037" +
    "\uff28\001\002\000\070\002\uff34\003\031\031\uff34\032\067" +
    "\033\uff34\034\020\036\uff34\037\uff34\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uff2a" +
    "\031\uff2a\033\uff2a\036\uff2a\037\uff2a\001\002\000\014\002" +
    "\uff32\031\uff32\033\uff32\036\uff32\037\uff32\001\002\000\004" +
    "\002\ufff7\001\002\000\014\002\uffab\031\uffab\033\uffab\036" +
    "\uffab\037\uffab\001\002\000\016\002\uff41\031\uff41\033\uff41" +
    "\036\uff41\037\uff41\040\u01ad\001\002\000\014\002\uff40\031" +
    "\uff40\033\uff40\036\uff40\037\uff40\001\002\000\014\002\uff42" +
    "\031\uff42\033\uff42\036\uff42\037\uff42\001\002\000\010\033" +
    "\u01b3\040\u01b4\067\u01b2\001\002\000\004\040\u01b0\001\002" +
    "\000\070\002\uff3a\003\031\031\uff3a\032\067\033\uff3a\034" +
    "\020\036\uff3a\037\uff3a\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uff36\031\uff36\033" +
    "\uff36\036\uff36\037\uff36\001\002\000\004\033\u01b7\001\002" +
    "\000\070\002\uff3c\003\031\031\uff3c\032\067\033\uff3c\034" +
    "\020\036\uff3c\037\uff3c\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\070\002\uff3b\003\031\031" +
    "\uff3b\032\067\033\uff3b\034\020\036\uff3b\037\uff3b\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff37\031\uff37\033\uff37\036\uff37\037\uff37\001\002" +
    "\000\014\002\uff38\031\uff38\033\uff38\036\uff38\037\uff38\001" +
    "\002\000\004\040\u01b8\001\002\000\070\002\uff3f\003\031" +
    "\031\uff3f\032\067\033\uff3f\034\020\036\uff3f\037\uff3f\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uff3e\031\uff3e\033\uff3e\036\uff3e\037\uff3e\001" +
    "\002\000\026\006\133\033\u01c2\053\131\054\117\055\120" +
    "\057\132\060\121\061\116\065\125\067\124\001\002\000" +
    "\004\033\u01bc\001\002\000\004\036\u01bd\001\002\000\060" +
    "\003\031\032\067\034\020\037\u01bf\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\004\037\u01c0" +
    "\001\002\000\014\002\ufef1\031\ufef1\033\ufef1\036\ufef1\037" +
    "\ufef1\001\002\000\056\003\031\032\067\034\020\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufeeb\031\ufeeb\033\ufeeb\036\ufeeb\037\ufeeb\001\002" +
    "\000\004\036\u01d3\001\002\000\006\033\u01c5\036\u01c4\001" +
    "\002\000\060\003\031\032\067\034\020\037\u01d0\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\062\003\031\032\067\034\020\036\u01c6\037\u01c8\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\060\003\031\032\067\034\020\037\u01cc\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\037" +
    "\u01c9\001\002\000\014\002\ufeef\031\ufeef\033\ufeef\036\ufeef" +
    "\037\ufeef\001\002\000\056\003\031\032\067\034\020\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\ufee9\031\ufee9\033\ufee9\036\ufee9\037\ufee9\001" +
    "\002\000\004\037\u01cd\001\002\000\014\002\ufef5\031\ufef5" +
    "\033\ufef5\036\ufef5\037\ufef5\001\002\000\070\002\ufef4\003" +
    "\031\031\ufef4\032\067\033\ufef4\034\020\036\ufef4\037\ufef4" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\ufef3\031\ufef3\033\ufef3\036\ufef3\037\ufef3" +
    "\001\002\000\004\037\u01d1\001\002\000\014\002\ufef0\031" +
    "\ufef0\033\ufef0\036\ufef0\037\ufef0\001\002\000\056\003\031" +
    "\032\067\034\020\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\ufeea\031\ufeea\033\ufeea" +
    "\036\ufeea\037\ufeea\001\002\000\060\003\031\032\067\034" +
    "\020\037\u01d5\041\023\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\004\037\u01d6\001\002\000\014\002" +
    "\ufef2\031\ufef2\033\ufef2\036\ufef2\037\ufef2\001\002\000\056" +
    "\003\031\032\067\034\020\041\023\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\014\002\ufeec\031\ufeec" +
    "\033\ufeec\036\ufeec\037\ufeec\001\002\000\004\065\u01d9\001" +
    "\002\000\004\015\u01da\001\002\000\004\034\u01db\001\002" +
    "\000\052\053\314\054\323\057\324\061\310\065\315\067" +
    "\305\072\321\073\317\074\326\075\320\076\312\077\322" +
    "\100\313\101\330\102\307\103\327\104\306\105\311\106" +
    "\316\107\332\001\002\000\004\035\u01dd\001\002\000\004" +
    "\040\u01de\001\002\000\056\003\031\032\067\034\020\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\uffd3\031\uffd3\033\uffd3\036\uffd3\037\uffd3\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufff6\001\002" +
    "\000\026\006\133\033\u01ee\053\131\054\117\055\120\057" +
    "\132\060\121\061\116\065\125\067\124\001\002\000\004" +
    "\033\u01e4\001\002\000\004\036\u01e5\001\002\000\056\003" +
    "\031\032\067\034\020\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\004\037\u01e7\001\002\000" +
    "\072\002\ufee2\003\031\031\ufee2\032\067\033\ufee2\034\020" +
    "\036\ufee2\037\ufee2\041\023\042\045\043\013\044\u01e8\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\004\036\u01ea\001\002" +
    "\000\014\002\ufede\031\ufede\033\ufede\036\ufede\037\ufede\001" +
    "\002\000\056\003\031\032\067\034\020\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\037" +
    "\u01ec\001\002\000\056\003\031\032\067\034\020\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\ufeda\031\ufeda\033\ufeda\036\ufeda\037\ufeda\001\002" +
    "\000\004\036\u020e\001\002\000\006\033\u01f1\036\u01f0\001" +
    "\002\000\056\003\031\032\067\034\020\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\060\003" +
    "\031\032\067\034\020\036\u01f2\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\056\003\031\032" +
    "\067\034\020\041\023\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\004\037\u01f4\001\002\000\072\002" +
    "\ufee1\003\031\031\ufee1\032\067\033\ufee1\034\020\036\ufee1" +
    "\037\ufee1\041\023\042\045\043\013\044\u01f5\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\004\036\u01f7\001\002\000\014" +
    "\002\ufedd\031\ufedd\033\ufedd\036\ufedd\037\ufedd\001\002\000" +
    "\056\003\031\032\067\034\020\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\004\037\u01f9\001" +
    "\002\000\056\003\031\032\067\034\020\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufed9\031\ufed9\033\ufed9\036\ufed9\037\ufed9\001\002\000\004" +
    "\037\u01fc\001\002\000\072\002\ufee8\003\031\031\ufee8\032" +
    "\067\033\ufee8\034\020\036\ufee8\037\ufee8\041\023\042\045" +
    "\043\013\044\u01fd\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\060\003\031\032\067\034\020\036\u01ff\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufee7\031\ufee7\033\ufee7\036\ufee7\037\ufee7\001\002\000\056" +
    "\003\031\032\067\034\020\041\023\042\045\043\013\045" +
    "\027\047\026\050\054\051\050\052\037\053\056\054\053" +
    "\055\033\056\011\057\051\060\046\061\034\064\012\065" +
    "\030\067\021\070\006\001\002\000\004\037\u0201\001\002" +
    "\000\056\003\031\032\067\034\020\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufed8" +
    "\031\ufed8\033\ufed8\036\ufed8\037\ufed8\001\002\000\004\037" +
    "\u0204\001\002\000\070\002\ufee5\003\031\031\ufee5\032\067" +
    "\033\ufee5\034\020\036\ufee5\037\ufee5\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufee6" +
    "\031\ufee6\033\ufee6\036\ufee6\037\ufee6\001\002\000\004\037" +
    "\u0207\001\002\000\072\002\ufee3\003\031\031\ufee3\032\067" +
    "\033\ufee3\034\020\036\ufee3\037\ufee3\041\023\042\045\043" +
    "\013\044\u0208\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\004" +
    "\036\u020a\001\002\000\014\002\ufedf\031\ufedf\033\ufedf\036" +
    "\ufedf\037\ufedf\001\002\000\056\003\031\032\067\034\020" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\037\u020c\001\002\000\056\003\031\032\067" +
    "\034\020\041\023\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\014\002\ufedb\031\ufedb\033\ufedb\036\ufedb" +
    "\037\ufedb\001\002\000\056\003\031\032\067\034\020\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\004\037\u0210\001\002\000\072\002\ufee4\003\031\031" +
    "\ufee4\032\067\033\ufee4\034\020\036\ufee4\037\ufee4\041\023" +
    "\042\045\043\013\044\u0211\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\036\u0213\001\002\000\014\002\ufee0\031\ufee0" +
    "\033\ufee0\036\ufee0\037\ufee0\001\002\000\056\003\031\032" +
    "\067\034\020\041\023\042\045\043\013\045\027\047\026" +
    "\050\054\051\050\052\037\053\056\054\053\055\033\056" +
    "\011\057\051\060\046\061\034\064\012\065\030\067\021" +
    "\070\006\001\002\000\004\037\u0215\001\002\000\056\003" +
    "\031\032\067\034\020\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\ufedc\031\ufedc\033" +
    "\ufedc\036\ufedc\037\ufedc\001\002\000\042\033\u021c\053\u0133" +
    "\054\u012d\055\u012f\057\u013c\060\u0130\061\u012c\065\u0154\067" +
    "\u0152\072\u0129\073\u011b\074\u0114\075\u0118\076\u0125\077\u011a" +
    "\100\u0123\001\002\000\004\033\u0219\001\002\000\004\040" +
    "\u021a\001\002\000\070\002\uff47\003\031\031\uff47\032\067" +
    "\033\uff47\034\020\036\uff47\037\uff47\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\uff43" +
    "\031\uff43\033\uff43\036\uff43\037\uff43\001\002\000\004\040" +
    "\u0224\001\002\000\006\033\u021e\040\u021f\001\002\000\072" +
    "\002\uff4a\003\031\031\uff4a\032\067\033\uff4a\034\020\036" +
    "\uff4a\037\uff4a\040\u0221\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\070\002\uff48\003\031\031" +
    "\uff48\032\067\033\uff48\034\020\036\uff48\037\uff48\041\023" +
    "\042\045\043\013\045\027\047\026\050\054\051\050\052" +
    "\037\053\056\054\053\055\033\056\011\057\051\060\046" +
    "\061\034\064\012\065\030\067\021\070\006\001\002\000" +
    "\014\002\uff44\031\uff44\033\uff44\036\uff44\037\uff44\001\002" +
    "\000\070\002\uff4c\003\031\031\uff4c\032\067\033\uff4c\034" +
    "\020\036\uff4c\037\uff4c\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\014\002\uff45\031\uff45\033" +
    "\uff45\036\uff45\037\uff45\001\002\000\014\002\uff4b\031\uff4b" +
    "\033\uff4b\036\uff4b\037\uff4b\001\002\000\070\002\uff49\003" +
    "\031\031\uff49\032\067\033\uff49\034\020\036\uff49\037\uff49" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\014\002\uff46\031\uff46\033\uff46\036\uff46\037\uff46" +
    "\001\002\000\006\036\u0227\040\113\001\002\000\060\003" +
    "\031\032\067\034\020\037\u0229\041\023\042\045\043\013" +
    "\045\027\047\026\050\054\051\050\052\037\053\056\054" +
    "\053\055\033\056\011\057\051\060\046\061\034\064\012" +
    "\065\030\067\021\070\006\001\002\000\004\037\u022a\001" +
    "\002\000\004\002\ufff4\001\002\000\004\002\ufff3\001\002" +
    "\000\026\006\133\033\u022c\053\131\054\117\055\120\057" +
    "\132\060\121\061\116\065\125\067\124\001\002\000\004" +
    "\036\u022d\001\002\000\060\003\031\032\067\034\020\037" +
    "\u022f\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\004\037\u0230\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\ufffc\001\002\000\004\031\uff62\001\002" +
    "\000\016\031\u0242\057\u0234\061\u0237\064\012\065\u0231\067" +
    "\u0233\001\002\000\004\065\u0173\001\002\000\024\003\uff91" +
    "\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91\061\uff91\065" +
    "\uff91\067\uff91\001\002\000\004\031\u0238\001\002\000\024" +
    "\003\273\053\276\054\265\055\266\057\277\060\267\061" +
    "\263\065\272\067\270\001\002\000\024\003\uff90\053\uff90" +
    "\054\uff90\055\uff90\057\uff90\060\uff90\061\uff90\065\uff90\067" +
    "\uff90\001\002\000\024\006\133\053\131\054\117\055\120" +
    "\057\132\060\121\061\116\065\125\067\124\001\002\000" +
    "\004\031\u023a\001\002\000\024\003\031\053\276\054\265" +
    "\055\266\057\277\060\267\061\263\065\u023c\067\270\001" +
    "\002\000\004\033\u023d\001\002\000\052\015\u015a\016\u0115" +
    "\017\u0112\020\u0127\021\u0120\053\u0133\054\u012d\055\u012f\057" +
    "\u013c\060\u0130\061\u012c\065\u0154\067\u0152\072\u0129\073\u011b" +
    "\074\u0114\075\u0118\076\u0125\077\u011a\100\u0123\001\002\000" +
    "\004\036\u023e\001\002\000\056\003\031\032\067\034\020" +
    "\041\023\042\045\043\013\045\027\047\026\050\054\051" +
    "\050\052\037\053\056\054\053\055\033\056\011\057\051" +
    "\060\046\061\034\064\012\065\030\067\021\070\006\001" +
    "\002\000\004\037\u0240\001\002\000\070\002\ufecf\003\031" +
    "\031\ufecf\032\067\033\ufecf\034\020\036\ufecf\037\ufecf\041" +
    "\023\042\045\043\013\045\027\047\026\050\054\051\050" +
    "\052\037\053\056\054\053\055\033\056\011\057\051\060" +
    "\046\061\034\064\012\065\030\067\021\070\006\001\002" +
    "\000\014\002\ufed5\031\ufed5\033\ufed5\036\ufed5\037\ufed5\001" +
    "\002\000\024\006\133\053\131\054\117\055\120\057\132" +
    "\060\121\061\116\065\125\067\124\001\002\000\004\031" +
    "\u0244\001\002\000\026\006\133\031\u0245\053\131\054\117" +
    "\055\120\057\132\060\121\061\116\065\125\067\124\001" +
    "\002\000\024\003\031\053\276\054\265\055\266\057\277" +
    "\060\267\061\263\065\u023c\067\270\001\002\000\004\031" +
    "\u0247\001\002\000\026\003\031\033\u0249\053\276\054\265" +
    "\055\266\057\277\060\267\061\263\065\u024a\067\270\001" +
    "\002\000\006\033\u0256\036\u0255\001\002\000\004\036\u0251" +
    "\001\002\000\062\007\u0155\011\u0159\013\u0157\014\u0158\015" +
    "\u015a\016\u0115\017\u0112\020\u0127\021\u0120\053\u0133\054\u012d" +
    "\055\u012f\057\u013c\060\u0130\061\u012c\065\u0154\067\u0152\072" +
    "\u0129\073\u011b\074\u0114\075\u0118\076\u0125\077\u011a\100\u0123" +
    "\001\002\000\004\033\u024c\001\002\000\004\036\u024d\001" +
    "\002\000\056\003\031\032\067\034\020\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\004\037" +
    "\u024f\001\002\000\070\002\ufed6\003\031\031\ufed6\032\067" +
    "\033\ufed6\034\020\036\ufed6\037\ufed6\041\023\042\045\043" +
    "\013\045\027\047\026\050\054\051\050\052\037\053\056" +
    "\054\053\055\033\056\011\057\051\060\046\061\034\064" +
    "\012\065\030\067\021\070\006\001\002\000\014\002\ufed7" +
    "\031\ufed7\033\ufed7\036\ufed7\037\ufed7\001\002\000\056\003" +
    "\031\032\067\034\020\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\004\037\u0253\001\002\000" +
    "\070\002\ufecc\003\031\031\ufecc\032\067\033\ufecc\034\020" +
    "\036\ufecc\037\ufecc\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\ufed2\031\ufed2\033\ufed2" +
    "\036\ufed2\037\ufed2\001\002\000\056\003\031\032\067\034" +
    "\020\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\056\003\031\032\067\034\020\041\023\042" +
    "\045\043\013\045\027\047\026\050\054\051\050\052\037" +
    "\053\056\054\053\055\033\056\011\057\051\060\046\061" +
    "\034\064\012\065\030\067\021\070\006\001\002\000\004" +
    "\037\u0258\001\002\000\070\002\ufeca\003\031\031\ufeca\032" +
    "\067\033\ufeca\034\020\036\ufeca\037\ufeca\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufed0\031\ufed0\033\ufed0\036\ufed0\037\ufed0\001\002\000\004" +
    "\037\u025b\001\002\000\070\002\ufecb\003\031\031\ufecb\032" +
    "\067\033\ufecb\034\020\036\ufecb\037\ufecb\041\023\042\045" +
    "\043\013\045\027\047\026\050\054\051\050\052\037\053" +
    "\056\054\053\055\033\056\011\057\051\060\046\061\034" +
    "\064\012\065\030\067\021\070\006\001\002\000\014\002" +
    "\ufed1\031\ufed1\033\ufed1\036\ufed1\037\ufed1\001\002\000\004" +
    "\033\u025e\001\002\000\004\036\u025f\001\002\000\056\003" +
    "\031\032\067\034\020\041\023\042\045\043\013\045\027" +
    "\047\026\050\054\051\050\052\037\053\056\054\053\055" +
    "\033\056\011\057\051\060\046\061\034\064\012\065\030" +
    "\067\021\070\006\001\002\000\004\037\u0261\001\002\000" +
    "\070\002\ufecd\003\031\031\ufecd\032\067\033\ufecd\034\020" +
    "\036\ufecd\037\ufecd\041\023\042\045\043\013\045\027\047" +
    "\026\050\054\051\050\052\037\053\056\054\053\055\033" +
    "\056\011\057\051\060\046\061\034\064\012\065\030\067" +
    "\021\070\006\001\002\000\014\002\ufed3\031\ufed3\033\ufed3" +
    "\036\ufed3\037\ufed3\001\002\000\004\031\u0264\001\002\000" +
    "\024\003\031\053\276\054\265\055\266\057\277\060\267" +
    "\061\263\065\u023c\067\270\001\002\000\004\033\u0266\001" +
    "\002\000\004\036\u0267\001\002\000\056\003\031\032\067" +
    "\034\020\041\023\042\045\043\013\045\027\047\026\050" +
    "\054\051\050\052\037\053\056\054\053\055\033\056\011" +
    "\057\051\060\046\061\034\064\012\065\030\067\021\070" +
    "\006\001\002\000\004\037\u0269\001\002\000\070\002\ufece" +
    "\003\031\031\ufece\032\067\033\ufece\034\020\036\ufece\037" +
    "\ufece\041\023\042\045\043\013\045\027\047\026\050\054" +
    "\051\050\052\037\053\056\054\053\055\033\056\011\057" +
    "\051\060\046\061\034\064\012\065\030\067\021\070\006" +
    "\001\002\000\014\002\ufed4\031\ufed4\033\ufed4\036\ufed4\037" +
    "\ufed4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0268\000\054\002\014\003\035\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\006\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u0234\040\u0235\001\001\000" +
    "\002\001\001\000\004\057\104\001\001\000\004\006\u0217" +
    "\001\001\000\002\001\001\000\016\010\u01e2\011\125\012" +
    "\121\014\122\044\133\047\126\001\001\000\052\003\u01e0" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\u01ba\011\125\012\121\014\122\044\133\047\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\u0155\036\u0152\001\001" +
    "\000\052\003\u01a9\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u018b\001\001\000" +
    "\004\057\u0180\001\001\000\002\001\001\000\006\055\263" +
    "\061\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\067\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\004\057\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\107\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\052\003" +
    "\111\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\052\003\113\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\016\010\127\011\125\012\121\014\122\044" +
    "\133\047\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\175\001\001\000\002\001\001\000\006\012\170" +
    "\047\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\142\001\001\000\004\053\135\001\001\000\002\001" +
    "\001\000\006\014\122\044\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\143\014" +
    "\122\044\147\047\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\143\047\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\160\047\161\001\001\000\006\012\156" +
    "\047\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\165\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\052" +
    "\003\167\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\172\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\203\044\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\175\001\001\000\002\001" +
    "\001\000\052\003\216\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\052\003\210\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\052" +
    "\003\213\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\225\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\231\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\236\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\052\003\234\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\237\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\242\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\247\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\253\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\260\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\052\003\256\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\261\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\u011d\005\060\006\u0123\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\036\u0121\040" +
    "\046\041\004\046\015\050\061\054\065\055\043\001\001" +
    "\000\052\003\u0110\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\052\324\060\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\333\060" +
    "\330\001\001\000\002\001\001\000\006\052\334\060\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\337\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\006\052" +
    "\341\060\330\001\001\000\002\001\001\000\006\052\343" +
    "\060\330\001\001\000\002\001\001\000\006\052\345\060" +
    "\330\001\001\000\002\001\001\000\006\052\347\060\330" +
    "\001\001\000\002\001\001\000\006\052\351\060\330\001" +
    "\001\000\002\001\001\000\006\052\353\060\330\001\001" +
    "\000\002\001\001\000\006\052\377\060\330\001\001\000" +
    "\052\003\376\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\006\052\360\060\330\001\001\000" +
    "\006\052\365\060\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\363\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\372\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\052" +
    "\003\370\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\373\005\060" +
    "\007\003\017\031\024\034\025\016\026\042\027\040\030" +
    "\021\031\041\032\023\033\056\034\051\035\024\040\046" +
    "\041\004\046\015\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\375\005\060" +
    "\007\003\017\031\024\034\025\016\026\042\027\040\030" +
    "\021\031\041\032\023\033\056\034\051\035\024\040\046" +
    "\041\004\046\015\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0102\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\u0105\060\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\u0108\005\060\007\003" +
    "\017\031\024\034\025\016\026\042\027\040\030\021\031" +
    "\041\032\023\033\056\034\051\035\024\040\046\041\004" +
    "\046\015\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\u010c" +
    "\060\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u010f\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0175\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0155\036\u0152" +
    "\001\001\000\002\001\001\000\010\006\u013c\043\u0138\045" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u0134" +
    "\037\u012d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u012a\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0136\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u0140\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\052" +
    "\003\u013e\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\u0141\005\060" +
    "\007\003\017\031\024\034\025\016\026\042\027\040\030" +
    "\021\031\041\032\023\033\056\034\051\035\024\040\046" +
    "\041\004\046\015\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\u014f\045\u014e" +
    "\001\001\000\006\043\u014d\045\u014c\001\001\000\006\043" +
    "\u014b\045\u014a\001\001\000\006\043\u0149\045\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u016f" +
    "\037\u016e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0168\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\052\003\u0165\005" +
    "\060\007\003\017\031\024\034\025\016\026\042\027\040" +
    "\030\021\031\041\032\023\033\056\034\051\035\024\040" +
    "\046\041\004\046\015\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\010\006\u015b\043\u015a\045\u013a\001" +
    "\001\000\002\001\001\000\052\003\u015f\005\060\007\003" +
    "\017\031\024\034\025\016\026\042\027\040\030\021\031" +
    "\041\032\023\033\056\034\051\035\024\040\046\041\004" +
    "\046\015\050\061\054\065\055\043\001\001\000\052\003" +
    "\u015d\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\052\003\u0160\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u0163\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\052\003\u0166\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u0169\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u016b\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u016d\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u0171\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u0174\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u017b\001\001\000" +
    "\004\006\u0178\001\001\000\002\001\001\000\052\003\u017a" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u017d" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\004\057\u0185\001\001\000\052" +
    "\003\u0184\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\u0183\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u0188\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u018a\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\004" +
    "\006\u0190\001\001\000\004\006\u018d\001\001\000\002\001" +
    "\001\000\052\003\u018f\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\u0192\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u0197" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u019a" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u01a0" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\052\003\u019e\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\052\003" +
    "\u01a1\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u01a6\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\052\003\u01a4\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\052" +
    "\003\u01a7\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u01b0\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u01b5\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\052\003\u01b4\005\060\007\003" +
    "\017\031\024\034\025\016\026\042\027\040\030\021\031" +
    "\041\032\023\033\056\034\051\035\024\040\046\041\004" +
    "\046\015\050\061\054\065\055\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\u01b8" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\002\001\001\000\016\010\u01c2\011\125\012\121" +
    "\014\122\044\133\047\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u01bd\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u01c0\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\u01ce\005\060" +
    "\007\003\017\031\024\034\025\016\026\042\027\040\030" +
    "\021\031\041\032\023\033\056\034\051\035\024\040\046" +
    "\041\004\046\015\050\061\054\065\055\043\001\001\000" +
    "\052\003\u01c6\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\052\003\u01ca\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u01c9\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u01cd\005" +
    "\060\007\003\017\031\024\034\025\016\026\042\027\040" +
    "\030\021\031\041\032\023\033\056\034\051\035\024\040" +
    "\046\041\004\046\015\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\u01d1\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\u01d3\005" +
    "\060\007\003\017\031\024\034\025\016\026\042\027\040" +
    "\030\021\031\041\032\023\033\056\034\051\035\024\040" +
    "\046\041\004\046\015\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u01d6\005" +
    "\060\007\003\017\031\024\034\025\016\026\042\027\040" +
    "\030\021\031\041\032\023\033\056\034\051\035\024\040" +
    "\046\041\004\046\015\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\u01db\060\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u01de\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\u01ee\011\125\012\121\014\122\044\133\047\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u01e5\005" +
    "\060\007\003\017\031\024\034\025\016\026\042\027\040" +
    "\030\021\031\041\032\023\033\056\034\051\035\024\040" +
    "\046\041\004\046\015\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\052\003\u01e8\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u01ea\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\u01ec\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u0205\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\052\003\u01f2" +
    "\005\060\007\003\017\031\024\034\025\016\026\042\027" +
    "\040\030\021\031\041\032\023\033\056\034\051\035\024" +
    "\040\046\041\004\046\015\050\061\054\065\055\043\001" +
    "\001\000\052\003\u01fa\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\002\001\001\000\052\003" +
    "\u01f5\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u01f7\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\052\003\u01f9\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\u01fd\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\052" +
    "\003\u01ff\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\u0202\005\060" +
    "\007\003\017\031\024\034\025\016\026\042\027\040\030" +
    "\021\031\041\032\023\033\056\034\051\035\024\040\046" +
    "\041\004\046\015\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u0201\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0204\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0208\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u020a\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\u020c\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\002\001\001\000\052\003\u020e\005" +
    "\060\007\003\017\031\024\034\025\016\026\042\027\040" +
    "\030\021\031\041\032\023\033\056\034\051\035\024\040" +
    "\046\041\004\046\015\050\061\054\065\055\043\001\001" +
    "\000\002\001\001\000\052\003\u0211\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u0213\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\u0215\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\004\006\u021c" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\u021a\005\060\007\003\017\031\024\034\025\016\026\042" +
    "\027\040\030\021\031\041\032\023\033\056\034\051\035" +
    "\024\040\046\041\004\046\015\050\061\054\065\055\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\u0221\005\060\007\003\017\031\024\034" +
    "\025\016\026\042\027\040\030\021\031\041\032\023\033" +
    "\056\034\051\035\024\040\046\041\004\046\015\050\061" +
    "\054\065\055\043\001\001\000\052\003\u021f\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u0222\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0224\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u0227\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\127\011\125\012" +
    "\121\014\122\044\133\047\126\001\001\000\002\001\001" +
    "\000\052\003\u022d\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\u0242\040" +
    "\u0235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\263\061\270\001\001\000\002\001" +
    "\001\000\016\010\u0238\011\125\012\121\014\122\044\133" +
    "\047\126\001\001\000\002\001\001\000\006\017\u023a\055" +
    "\043\001\001\000\002\001\001\000\006\006\u0155\036\u0152" +
    "\001\001\000\002\001\001\000\052\003\u023e\005\060\007" +
    "\003\017\031\024\034\025\016\026\042\027\040\030\021" +
    "\031\041\032\023\033\056\034\051\035\024\040\046\041" +
    "\004\046\015\050\061\054\065\055\043\001\001\000\002" +
    "\001\001\000\052\003\u0240\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\016" +
    "\010\u0262\011\125\012\121\014\122\044\133\047\126\001" +
    "\001\000\002\001\001\000\016\010\u0245\011\125\012\121" +
    "\014\122\044\133\047\126\001\001\000\006\017\u025c\055" +
    "\043\001\001\000\002\001\001\000\010\017\u0247\025\u024a" +
    "\055\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0155\036\u0152\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\u024d\005\060\007\003\017\031\024" +
    "\034\025\016\026\042\027\040\030\021\031\041\032\023" +
    "\033\056\034\051\035\024\040\046\041\004\046\015\050" +
    "\061\054\065\055\043\001\001\000\002\001\001\000\052" +
    "\003\u024f\005\060\007\003\017\031\024\034\025\016\026" +
    "\042\027\040\030\021\031\041\032\023\033\056\034\051" +
    "\035\024\040\046\041\004\046\015\050\061\054\065\055" +
    "\043\001\001\000\002\001\001\000\052\003\u0251\005\060" +
    "\007\003\017\031\024\034\025\016\026\042\027\040\030" +
    "\021\031\041\032\023\033\056\034\051\035\024\040\046" +
    "\041\004\046\015\050\061\054\065\055\043\001\001\000" +
    "\002\001\001\000\052\003\u0253\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\u0259\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\052\003\u0256\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\u0258\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\u025b\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\u025f\005\060\007\003\017" +
    "\031\024\034\025\016\026\042\027\040\030\021\031\041" +
    "\032\023\033\056\034\051\035\024\040\046\041\004\046" +
    "\015\050\061\054\065\055\043\001\001\000\002\001\001" +
    "\000\052\003\u0261\005\060\007\003\017\031\024\034\025" +
    "\016\026\042\027\040\030\021\031\041\032\023\033\056" +
    "\034\051\035\024\040\046\041\004\046\015\050\061\054" +
    "\065\055\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\u0264\055\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\u0267\005\060\007\003\017\031" +
    "\024\034\025\016\026\042\027\040\030\021\031\041\032" +
    "\023\033\056\034\051\035\024\040\046\041\004\046\015" +
    "\050\061\054\065\055\043\001\001\000\002\001\001\000" +
    "\052\003\u0269\005\060\007\003\017\031\024\034\025\016" +
    "\026\042\027\040\030\021\031\041\032\023\033\056\034" +
    "\051\035\024\040\046\041\004\046\015\050\061\054\065" +
    "\055\043\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AnalizadorLexico  les;
    public ArrayList<Token_> ls;
    public OpeTabla optab = new OpeTabla();
    public ArrayList<String> arbolesAsignacion = new ArrayList<String> ();
    public ArrayList<String> ci = new ArrayList<String> ();
    public ArrayList<String> listavar = new ArrayList<String> ();
    public ArrayList<String> asig_simples = new ArrayList<String> ();
    public ArrayList<String> asig_Ini = new ArrayList<String> ();
    public ArrayList<String> op_log = new ArrayList<String> ();
    public ArrayList<String> inc_var = new ArrayList<String> ();
    public ArrayList<String> codop = new ArrayList<String> ();


    public void setList( ArrayList<Token_> ls){
        this.ls = ls;
    }
    
    public void setLex(AnalizadorLexico le){
        les =le;
    }
public static String anterior = "";
public static String errores = "";
StringBuilder m = new StringBuilder("");
/* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
            if (info instanceof java_cup.runtime.Symbol){
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                m=new StringBuilder("Error Critico "+s+" : ");
                if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                    if (s.right >= 0)m.append(" Columna: "+(s.right+1)+"\nRepare antes de Continuar");}
                if(m.length()!=0)
                    errores+=m+"\n";
        }
        
        errores += m.append("    antes de    " + les.lexeme  + "  \n");
        System.err.println(m+info.toString());
    }
    
   
public void syntax_error(Symbol s){
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto.");
}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto (ERROR CRITICO SE DEBE SOLUCIONAR ANTES DE CONTINUAR, NO SE IDENTIFICO ).");
}

public static void append(String mensaje){
StringBuilder me;
    me = new StringBuilder("Error sintactico: "+" ");
    me.append(mensaje);
    
    errores+=mensaje+"\n";
    System.out.println(me);
}

    public static void main(String[] args){
        try {
                ASintactico sintactico = new ASintactico(new AnalizadorLexico(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
        } catch (Exception ex) {
           // ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {
  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		   codop.add( "void setup(){\n}\nvoid loop(){ \n" + c + "\n}"); 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= errores PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= errores PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicio ::= PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= PAROPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicio ::= KEYOPEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicio ::= cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicio ::= KEYOPEN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicio ::= KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio ::= PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 2 en la linea: "+(eright+1)+" - se esperaba la palabra inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio ::= PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio ::= INICIO PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inicio ::= INICIO PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inicio ::= INICIO PAROPEN KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 4 en la linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inicio ::= INICIO PAROPEN KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 4 en la linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicio ::= INICIO PAROPEN PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 5 en la linea: "+(eright+1)+" - se esperaba un { despu�s de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio ::= INICIO PAROPEN PARCLOSE KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 5 en la linea: "+(eright+1)+" - Se esperaba un { despu�s de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // errores ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // errores ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // errores ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // errores ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // errores ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // errores ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // errores ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // errores ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores",42, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // errores1 ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // errores1 ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // errores1 ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // errores1 ::= VACIO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // errores1 ::= NULO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // errores1 ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // errores1 ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("errores1",43, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ciclos_errores ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos_errores",44, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ciclos_errores ::= SI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos_errores",44, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= decvariables 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= asignar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
           String[] a = id.toString().split("\\.");
           if(a.length == 2){
           RESULT= a[1]+" = "+a[0]+";\n";  
           }else if(a.length == 3){
            RESULT= a[1]+" = "+a[0]+";\n"+a[2]; 
            }
            
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= funcionesDo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= ciclos 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= incrementar_var 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= arreglo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arreglo ::= tipo COROPEN CORCLOSE ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arreglo ::= COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Error: 8 en la linea: "+(eright+1)+" - Se esperaba un tipo de dato antes de '[' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arreglo ::= tipo CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Error: 8 en la linea: "+(eright+1)+" - Se esperaba un '[' despues de el tipo de dato' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arreglo ::= tipo COROPEN ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" - Se esperaba un ']' despues de '[' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arreglo ::= tipo COROPEN CORCLOSE ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		this.parser.errores+="Error: 10 en la linea:"+(eright+1)+" - Se esperaba un 'identificador' despues de ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arreglo ::= tipo COROPEN CORCLOSE ID COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Error: 11 en la linea: "+(eright+1)+" - Se esperaba un ' = ' despues de el 'identificador' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG datos CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 12 en la linea: "+(eright+1)+" - Se esperaba un ' [ ' despues de el ' = ' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN CORCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 13 en la linea: "+(eright+1)+" - Se esperaban datos dentro de '[' ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 14 en la linea: "+(eright+1)+" - Se esperaba un ']' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arreglo ::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 15 en la linea: "+(eright+1)+" - Se esperaba un ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // datos ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // datos ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // datos ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // datos ::= FALSO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // datos ::= CADENA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // datos ::= NOTA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // datos ::= notapuras 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // datos ::= ID COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // datos ::= numEntero COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // datos ::= VERDADERO COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // datos ::= FALSO COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // datos ::= CADENA COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // datos ::= NOTA COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // datos ::= notapuras COMA datos 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // datos ::= notapuras datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ',' para la separacion de los datos \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datos",40, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignar ::= ID ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
               ci.add(id+" = " + dato + "\n" );
               listavar.add(id+"");
               listavar.add("\n");
             RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignar ::= ID opasig datoasig PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int opaleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oparight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object opa = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 
               ci.add(id+" "+ opa +" " + dato + "\n" );
               listavar.add(id+"");
               listavar.add("\n");
                RESULT= dato+"."+id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignar ::= ID ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                listavar.add(id+"");
               listavar.add("\n");
                ci.add(id+" = " + dato + "\n" );      
                        arbolesAsignacion.add(id.toString()+"!=!"+dato.toString()+"!;");
                        System.out.println("Lista que no entra: \n"+dato.toString());
                        for(int i = 0; i<ls.size(); i++){
                            if (ls.get(i).numero_linea == 7) {
                                System.out.println(ls.get(i).toString());
                            }
                        }
                        /*Token_ idAAsig = optab.buscarIDCup(id.toString(),ls);
                        Token_ idAComp = optab.buscarIDCup(dato.toString(),ls);
                        if(idAAsig == null)
                            System.out.println(idAAsig);
                            //System.out.println(idAComp);
                            this.parser.append("Error idAAsig: en la linea: "+(idright+1)+" El dato  no ha sido declarado. \n");
                        if(idAComp == null)
                            this.parser.append("Error idAComp: en la linea: "+(datoright+1)+" El dato  no ha sido declarado. \n");
                        if(idAAsig != null && idAComp != null){
                            String tipo = optab.verificarTipo(dato.toString() , ls);
                        }*/
                        
                        asig_simples.add(id+"="+dato+"="+(idright+1));

                    RESULT= dato+"."+id+"."+c; 
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignar ::= ID opasig datoasig PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int opaleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int oparight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object opa = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
            ci.add(id+" "+ opa +" " + dato + "\n" );  
              listavar.add(id+"");
              listavar.add("\n");
             RESULT= dato+"."+id+"."+c; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignar ::= ID ASIG ari PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		 RESULT=0; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignar ::= ID ASIG PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append("Error: 7 en la linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignar ::= ID ASIG PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error";this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignar ::= errores1 ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignar ::= errores1 ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignar ::= errores1 opasig dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea:"+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asignar ::= errores1 opasig dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignar ::= ID dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append(" Error: 17 en la linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignar ::= ID dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignar ::= ID ASIG dato cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignar ::= ID ASIG dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignar ::= ID opasig dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignar ::= error cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignar",13, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // asignarDeclaracion ::= ID ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT= dato+"."+id;

                asig_Ini.add(id+ "=" + dato +"="+ (idright+1));
                ci.add(id +" = "+dato+ "\n" );
                listavar.add(id+"");
                 listavar.add("\n");
             
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignarDeclaracion ::= ID opasig datoasig PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int opaleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int oparight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object opa = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT= dato+"."+id;
                
                asig_Ini.add(id+ "=" + dato +"="+ (idright+1));

                ci.add(id+" "+ opa +" " + dato + "\n" ); 
                listavar.add(id+"");
                 listavar.add("\n");
             
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignarDeclaracion ::= ID ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= dato+"."+id+"."+c; 

                asig_Ini.add(id+ "=" + dato +"="+ (idright+1));

                ci.add(id +" = "+dato +"\n" ); 
                listavar.add(id+"");
                 listavar.add("\n");
            
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignarDeclaracion ::= ID opasig datoasig PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int opaleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int oparight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object opa = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                ci.add(id+" "+ opa +" " + dato + "\n" ); 
                listavar.add(id+"");
                 listavar.add("\n");
             RESULT= dato+"."+id+"."+c; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // asignarDeclaracion ::= ID ASIG ari PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		 RESULT=0; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // asignarDeclaracion ::= ID ASIG PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append("Error: 7 en la linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // asignarDeclaracion ::= ID ASIG PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error";this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // asignarDeclaracion ::= errores1 ASIG dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // asignarDeclaracion ::= errores1 ASIG dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // asignarDeclaracion ::= errores1 opasig dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 16 en la linea:"+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asignarDeclaracion ::= errores1 opasig dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asignarDeclaracion ::= ID dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		 RESULT="error"; this.parser.append(" Error: 17 en la linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignarDeclaracion ::= ID dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignarDeclaracion ::= ID ASIG dato cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asignarDeclaracion ::= ID ASIG dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asignarDeclaracion ::= ID opasig dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignarDeclaracion ::= error cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("asignarDeclaracion",47, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opasig ::= ADDASIG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opasig ::= MINASIG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opasig ::= DIVASIG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opasig ::= MULASIG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opasig",28, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // datoasig ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // datoasig ::= numEntero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // datoasig ::= NOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("datoasig",29, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= entero; System.out.println("El tipo es: " + entero.toString()); 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo ::= NOTA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= entero; System.out.println("El tipo es: " + entero.toString()); 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo ::= CADENA 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT= entero; System.out.println("El tipo es: " + entero.toString()); 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dato ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // dato ::= numEntero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dato ::= VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // dato ::= FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dato ::= CADENA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dato ::= NOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dato ::= VACIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // dato ::= NULO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // dato ::= DO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // dato ::= RE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // dato ::= MI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // dato ::= FA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // dato ::= SOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // dato ::= LA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dato ::= SII 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // notas ::= RE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // notas ::= MI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // notas ::= FA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // notas ::= SOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // notas ::= LA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // notas ::= SII 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // notas ::= DO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // notas ::= NOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // notas ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notas",45, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // notapuras ::= RE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // notapuras ::= MI 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // notapuras ::= FA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // notapuras ::= SOL 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // notapuras ::= LA 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // notapuras ::= SII 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // notapuras ::= DO 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // notapuras ::= DOS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // notapuras ::= RES 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // notapuras ::= MIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // notapuras ::= FAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // notapuras ::= SOLS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // notapuras ::= LAS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // notapuras ::= SIS 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("notapuras",46, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // decvariables ::= tipo ID PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 //this.parser.errores+= id.toString()+ " TIPO: " + tipo.toString()  + "\n"; 
                    
                    if(tipo.toString().equals("entero")){
                    RESULT="int"+" "+id+";\n";  
                    }
                    ci.add(tipo+" "+id+"\n");
                    listavar.add(id+"");
                    listavar.add("\n");
                 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // decvariables ::= tipo ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    if(tipo.toString().equals("entero")){
                    RESULT="int"+" "+id+";\n"+c;  
                    }
                    ci.add(tipo+" "+id+"\n"); 
                    listavar.add(id+"");
                    listavar.add("\n");
                         //this.parser.errores += id.toString()+ " TIPO: " + tipo.toString()  +"\n"; 
                        ls = optab.buscarID(id.toString(),tipo.toString(),null,ls);
                
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // decvariables ::= tipo asignarDeclaracion 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    String[] a = asignacion.toString().split("\\.");

                  if(a.length == 2){  
                  if(tipo.toString().equals("entero")){
                    RESULT="int "+a[1]+" = "+a[0]+";\n";  
                    }
                  if(tipo.toString().equals("nota")){
                    RESULT="int "+a[1]+" = "+a[0]+";\n";  
                    }  
                  }
                    
                  if(a.length == 3){  
                  if(tipo.toString().equals("entero")){
                    RESULT="int "+a[1]+" = "+a[0]+";\n"+a[2];  
                    }
                  if(tipo.toString().equals("nota")){
                    RESULT="int "+a[1]+" = "+a[0]+";\n"+a[2];  
                    }  
                  }  
                 
                    //System.out.println(asignacion,tipo.toString(),asignacion,ls); 
                    try { 
                        //System.out.println("asignacion:" + asignacion);
                        //System.out.println("tipo: " + tipo.toString());
                        //System.out.println("ls: " + ls);
                        String asigTemp = asignacion.toString();
                        String[] temp = asigTemp.split("\\.");
                        //System.out.println("asigTemp: " + asigTemp);
                        //System.out.println("temp : " + temp.toString());
                        try { 
                            if(tipo.toString() == "entero" && (Integer.parseInt(temp[0])/Integer.parseInt(temp[0]))==1)
                                System.out.println("Es entero");

                        } catch ( Exception d) {
                            System.err.println("Exception :" + d.getMessage());
                            this.parser.append("Error: 50 de Excepcion en la linea: "+(tiporight+1)+" El dato "+temp[0]+" Se esperaba un "+tipo.toString()+"\n");
                        }
                        //Aqui si tiene los tipo de datos
                        ls = optab.buscarID(temp[1],tipo.toString(),temp[0],ls);
                        
                        //System.out.println("Tabla de eric:" + ls.toString());
                    } catch ( Exception d) {
                      System.out.println(d.getMessage());
                    }
                    //ls = optab.buscarID(sep[1],tipo.toString(),sep[0],ls); 
                    //this.parser.errores+= tipo.toString()+ " asignacion: " + asignacion.toString()  + "\n"; 
                  
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // decvariables ::= tipo ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 18 en la linea: "+(eright+1)+" -  falta el ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // decvariables ::= tipo ID cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 18 en la linea: "+(eright+1)+" -  falta el ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // decvariables ::= numEntero ID PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // decvariables ::= numEntero ID PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // decvariables ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 19 en la linea: "+(eright+1)+" - Se esperaba una tipo de dato \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("decvariables",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // funcionesDo ::= declaraReproduce 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // funcionesDo ::= declaraImprimir 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // funcionesDo ::= declaraImportar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // funcionesDo ::= declaraContinuar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // funcionesDo ::= declaraSilencio 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // funcionesDo ::= declaraVolumen 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // funcionesDo ::= declaraFrecuencia 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("funcionesDo",20, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declaraReproduce ::= REPRODUCE PAROPEN notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                     ci.add("ent "+ n + "\n tono("+n+")\n" );
                     RESULT= "tone(8,"+n+");";
                     listavar.add(n+"");
                     
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // declaraReproduce ::= REPRODUCE PAROPEN notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                     ci.add("ent "+ n + "\n tono("+n+")\n" );
                     RESULT= "tone(8,"+n+");\n"+c;
                     listavar.add(n+"");
                     
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // declaraReproduce ::= PAROPEN notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 20 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // declaraReproduce ::= NOTA PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 21 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que abre  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // declaraReproduce ::= PAROPEN notas PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 22 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que cierra   \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // declaraReproduce ::= REPRODUCE notas PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 23 en la linea:"+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // declaraReproduce ::= REPRODUCE PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el (  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // declaraReproduce ::= REPRODUCE PAROPEN notas PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el )  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // declaraReproduce ::= PAROPEN notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 20 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // declaraReproduce ::= NOTA PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 21 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentesis que abre  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // declaraReproduce ::= PAROPEN notas PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 22 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'   \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // declaraReproduce ::= REPRODUCE notas PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 23 en la linea: "+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // declaraReproduce ::= REPRODUCE PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el (  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // declaraReproduce ::= REPRODUCE PAROPEN notas PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el )  ";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraReproduce",21, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                    ci.add("cad ="+ dato + "\n print("+dato+")\n" );
                    RESULT= "Serial.println(" + dato+ ");\n";
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    ci.add("cad ="+ dato + "\n print("+dato+")\n" );
                    RESULT= "Serial.println(" + dato+ ");\n"+c;
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // declaraImprimir ::= IMPRIMIR PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 25 en la linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // declaraImprimir ::= IMPRIMIR PAROPEN dato PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 26 en la linea: "+(eright+1)+" - Falta el ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // declaraImprimir ::= IMPRIMIR dato PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 27 en la linea: "+(eright+1)+" - Falta el ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // declaraImprimir ::= IMPRIMIR PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 25 en la linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // declaraImprimir ::= IMPRIMIR PAROPEN dato PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // declaraImprimir ::= IMPRIMIR PAROPEN dato PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 26 en la linea: "+(eright+1)+" - Falta el ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // declaraImprimir ::= IMPRIMIR dato PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 27 en la linea: "+(eright+1)+" - Falta el ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImprimir",22, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // declaraImportar ::= IMPORTAR ID PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		
                    ci.add("imp "+ id + "\n" );
                    RESULT ="#include "+ id +" \n";
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // declaraImportar ::= IMPORTAR ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // declaraImportar ::= IMPORTAR PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Linea: "+(eright+1)+" - Falta el argumento en importar \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraImportar",23, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // declaraContinuar ::= CONTINUAR PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                    ci.add("cont() \n" );
                    RESULT ="delay("+n +");\n";
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // declaraContinuar ::= CONTINUAR PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    ci.add("cont() \n" );
                    RESULT ="delay("+n +");\n"+c;
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // declaraContinuar ::= PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 28 en la linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // declaraContinuar ::= CONTINUAR PAROPEN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 29 en la linea: "+(eright+1)+" - Falta el ) despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // declaraContinuar ::= CONTINUAR PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 30 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // declaraContinuar ::= PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 28 en la linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // declaraContinuar ::= CONTINUAR PAROPEN PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // declaraContinuar ::= CONTINUAR PAROPEN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 29 en la linea: "+(eright+1)+" - Falta el ) despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // declaraContinuar ::= CONTINUAR PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 30 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraContinuar",24, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
                    ci.add("notono()\n tono(0)\n tiempo( )\n" );
                    RESULT ="noTone(8);\n";
                    
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                    ci.add("notono()\n tono(0)\n tiempo("+n+")\n" );
                    RESULT ="noTone(8);\n delay("+n+");\n";
                    
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    ci.add("notono()\n tono(0)\n tiempo( )\n" );
                    RESULT ="noTone(8);\n"+c;

                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    ci.add("notono()\n tono(0)\n tiempo("+n+")\n" );
                    RESULT="noTone(8);\n delay("+n+");\n"+c;
                    
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea:"+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // declaraSilencio ::= SILENCIO PAROPEN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 31 en la linea: "+(eright+1)+" - Falta el ) despues de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // declaraSilencio ::= SILENCIO PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de numero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // declaraSilencio ::= SILENCIO PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 33 en la linea: "+(eright+1)+" - Falta el ( despues de silencio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // declaraSilencio ::= SILENCIO numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 34 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // declaraSilencio ::= SILENCIO PAROPEN PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // declaraSilencio ::= SILENCIO PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // declaraSilencio ::= SILENCIO PAROPEN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de ( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // declaraSilencio ::= SILENCIO PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de numero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // declaraSilencio ::= SILENCIO PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 33 en la linea:"+(eright+1)+" - Falta el ( despues de silencio \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // declaraSilencio ::= SILENCIO numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 34 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraSilencio",25, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                    ci.add("ent v \n"+"v = "+ n +"\n vol( v )\n" );
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		
                    ci.add("ent v \n"+"v = "+ n +"\n vol( v )\n" );
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // declaraVolumen ::= VOLUMEN PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // declaraVolumen ::= VOLUMEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 37 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // declaraVolumen ::= VOLUMEN PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 35 en la linea:: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // declaraVolumen ::= VOLUMEN PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // declaraVolumen ::= VOLUMEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 37 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraVolumen",26, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                    ci.add("ent f \n"+"f = "+ n +"\n frec( f )\n" );
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		
                    ci.add("ent f \n"+"f = "+ n +"\n frec( f )\n" );
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // declaraFrecuencia ::= FRECUENCIA PAROPEN PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // declaraFrecuencia ::= FRECUENCIA numEntero PARCLOSE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 38 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PARCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // declaraFrecuencia ::= FRECUENCIA PAROPEN PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // declaraFrecuencia ::= FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // declaraFrecuencia ::= FRECUENCIA numEntero PARCLOSE PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 38 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("declaraFrecuencia",27, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // operacion ::= ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // operacion ::= log 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // operacion ::= rel 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("operacion",32, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // opers ::= ID 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opers",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // opers ::= numEntero 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("opers",35, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ari ::= opers ADD opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ari ::= opers MIN opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ari ::= opers MUL opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ari ::= opers DIV opers 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ari ::= opers ADD ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ari ::= opers MIN ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ari ::= opers MUL ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ari ::= opers DIV ari 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ari",33, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // incrementar_var ::= ID PLUSPLUS PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                    RESULT=id+"++;\n";
                    ci.add(id+" + 1\n" );
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // incrementar_var ::= ID MINMIN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		
                    RESULT=id+"--;\n";
                    ci.add(id+" - 1\n" );
                    
                    codop.add(id+"--");
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // incrementar_var ::= ID PLUSPLUS PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    RESULT=id+"++;\n"+c;
                    ci.add(id+" + 1\n" );
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // incrementar_var ::= ID MINMIN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
                    RESULT=id+"--;\n"+c;
                    ci.add(id+" - 1\n" );
                    
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // incrementar_var ::= ID ADD PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 39 en la linea:"+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // incrementar_var ::= ID MIN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 40 en la linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // incrementar_var ::= ID ADD PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 39 en la linea: "+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // incrementar_var ::= ID MIN PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 40 en la linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // incrementar_var ::= ID PLUSPLUS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // incrementar_var ::= ID MINMIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // incrementar_var ::= ID PLUSPLUS cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // incrementar_var ::= ID MINMIN cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("incrementar_var",19, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ciclos ::= sentencia_mientras 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ciclos ::= sentencia_por 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ciclos ::= sentencia_si 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id+""; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("ciclos",31, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		 ci.add("while("+cond+")\n" ); RESULT="while("+cond+"){}"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 ci.add("while("+cond+")\n" ); RESULT="while("+cond+"){\n"+c+"\n}"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 ci.add("while("+cond+")\n" ); RESULT="while("+cond+"){\n"+c+"\n}\n"+d; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // sentencia_mientras ::= MIENTRAS PAROPEN PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 41 en la linea: "+(eright+1)+" - Se esperaba una condici�n \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // sentencia_mientras ::= MIENTRAS condicion PARCLOSE KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // sentencia_mientras ::= MIENTRAS PAROPEN condicion KEYOPEN KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // sentencia_mientras ::= errores PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // sentencia_mientras ::= errores PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 46 en la linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // sentencia_mientras ::= MIENTRAS PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Error: 41 en la linea: "+(eright+1)+" - Se esperaba una condici�n \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // sentencia_mientras ::= MIENTRAS condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // sentencia_mientras ::= MIENTRAS PAROPEN condicion KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // sentencia_mientras ::= MIENTRAS PAROPEN condicion PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_mientras",18, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 ci.add("if("+cond+")\n" );  RESULT="if("+cond+"){\n"+c+"\n}"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 ci.add("if("+cond+")\n" );  RESULT="if("+cond+"){\n"+c+"\n}\n"+d; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 ci.add("if("+cond+")\n" );  RESULT="if("+cond+"){\n"+c+"\n}\n else{\n"+d+"\n}\n"+e; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-11)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 ci.add("if("+cond+")\n" );  RESULT="if("+cond+"){\n"+c+"\n}\n else{\n"+d+"\n}\n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de 'la condicon' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de la 'condicion' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // sentencia_si ::= SI PAROPEN PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // sentencia_si ::= SI PAROPEN condicion KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de una  'condicion' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // sentencia_si ::= SI condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).value;
		this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // sentencia_si ::= SI PAROPEN condicion PARCLOSE cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // sentencia_si ::= SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 46 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de 'SINO' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_si",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA incrementar_var PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		int asileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object asi = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 ci.add("for("+dec+";"+cond+";"+asi+")\n" ); RESULT="for("+dec+";"+cond+";"+asi+"){\n"+c+"\n}\n"+d;  
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-11)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA incrementar_var PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		int asileft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object asi = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 ci.add("for("+dec+";"+cond+";"+asi+")\n" );  RESULT="for("+dec+";"+cond+";"+asi+"){\n"+c+"\n}\n"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000001(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // sentencia_por ::= POR decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)).value;
		this.parser.errores+="Error: 47 en la linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // sentencia_por ::= POR PAROPEN COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		this.parser.errores+="Error: 48 en la linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // sentencia_por ::= POR PAROPEN decvariables COMA COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-7)).value;
		this.parser.errores+="Error: 49 en la linea: "+(eright+1)+" - Se esperaba una condicion  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		this.parser.errores+="Error: 50 en la linea: "+(eright+1)+" - Se esperaba una asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 55 en la linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		this.parser.errores+="Error: 52 en la linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-10)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // sentencia_por ::= POR decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)).value;
		this.parser.errores+="Error: 47 en la linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // sentencia_por ::= POR PAROPEN COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-8)).value;
		this.parser.errores+="Error: 48 en la linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // sentencia_por ::= POR PAROPEN decvariables COMA COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)).value;
		this.parser.errores+="Error: 49 en la linea: "+(eright+1)+" - Se esperaba una condicion  \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA PARCLOSE KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		this.parser.errores+="Error: 50 en la linea: "+(eright+1)+" - Se esperaba una asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		this.parser.errores+="Error: 55 en la linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // sentencia_por ::= POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 52 en la linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sentencia_por",36, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-9)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // condicion ::= log 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // condicion ::= cond 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // condicion ::= rel log2 rel 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=re+" "+log+" "+rel; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // condicion ::= ope_logico 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=op; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // condicion ::= ID log ENTERO cuerpo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		this.parser.errores+="Error: 53 en la linea: "+(eright+1)+" - No es una operacion logica valida, hace falta de uso de op. relacionales \n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // condicion ::= NOT PAROPEN rel PARCLOSE 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // rel ::= op_rel sig_rel op_rel 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object opp = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 
           op_log.add(op+"="+ opp +"="+(opright+1));
           RESULT=op+" "+sig+" "+opp;
        
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("rel",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // rel ::= op_rel sig_rel rel 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object sig = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=op+" "+sig+" "+res; 
           op_log.add(op+"="+(opright+1));
        
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("rel",34, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // op_rel ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // op_rel ::= VERDADERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // op_rel ::= FALSO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // op_rel ::= numEntero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // op_rel ::= CADENA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // op_rel ::= NOTA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // op_rel ::= NULO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // op_rel ::= VACIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("op_rel",10, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // cond ::= rel 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // log ::= ope_logico AND ope_logico 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object opp = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=op+" && "+opp; 
            //op_log.add(op+"="+ opp +"="+(opright+1));
            
        
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // log ::= ope_logico OR ope_logico 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int oppleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int oppright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object opp = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=op+" || "+opp; 
            //op_log.add(op+"="+ opp +"="+(opright+1));
            
        
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // log ::= NOT ope_logico 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT="NOT "+op; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // log ::= ope_logico AND log 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=op+" && "+log; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // log ::= ope_logico OR log 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=op+" || "+log; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // log ::= NOT PAROPEN log PARCLOSE 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="NOT("+log+")"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // log ::= NOT PAROPEN ID PARCLOSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		 RESULT="NOT("+id+")"; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // log2 ::= AND 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log2",41, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // log2 ::= OR 
            {
              Object RESULT =null;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("log2",41, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // sig_rel ::= MAYTHAN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // sig_rel ::= MINTHAN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // sig_rel ::= MINEQUAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // sig_rel ::= MAYEQUAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // sig_rel ::= EQUAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // sig_rel ::= NOTEQUAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		 RESULT=id; 
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // sig_rel ::= ASIG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		this.parser.errores+="Error: 54 en la linea: "+(eright+1)+" - No se puede hacer una asignaci�n en una condici�n";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("sig_rel",11, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$ASintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$ASintactico$do_action_part00000001(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
