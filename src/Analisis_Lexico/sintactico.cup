   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package Analisis_Lexico;
/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;

//asddasd

import Analisis_Lexico.Token_;
import Analisis_Lexico.AnalizadorLexico;
import Analisis_Lexico.EstiloDocumento;
import Analisis_Lexico.Interfaz;
import Analisis_Lexico.InterfazTablaSimbolos;
import Analisis_Lexico.OpeTabla;
import Archivos.Archivos;
import Manejador_errores.Manejador_Errores;
import Miscelaneos.Miscelaneo;
import Tabla_Simbolos.Tabla_Simbolos;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import Analisis_Lexico.OpeTabla;
import Analisis_Lexico.InterfazTablaSimbolos;
import Ventanas.Inicio;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code 
{:
    public AnalizadorLexico  les;
    public ArrayList<Token_> ls;
    public ArrayList<String> producciones = new ArrayList<String>();
    public OpeTabla optab = new OpeTabla();
    public ArrayList<String> arbolesAsignacion = new ArrayList<String> ();
    public ArrayList<String> ci = new ArrayList<String> ();
    public ArrayList<String> listavar = new ArrayList<String> ();
    public ArrayList<String> asig_simples = new ArrayList<String> ();
    public ArrayList<String> asig_Ini = new ArrayList<String> ();
    public ArrayList<String> op_log = new ArrayList<String> ();
    public ArrayList<String> inc_var = new ArrayList<String> ();
    public ArrayList<String> codop = new ArrayList<String> ();
    public ArrayList<String> param = new ArrayList<String> ();

    public void setList( ArrayList<Token_> ls){
        this.ls = ls;
    }
    
    public void setLex(AnalizadorLexico le){
        les =le;
    }
public static String anterior = "";
public static String errores = "";
StringBuilder m = new StringBuilder("");
/* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
            if (info instanceof java_cup.runtime.Symbol){
                java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
                m=new StringBuilder("Error Critico "+s+" : ");
                if (s.left >= 0) {m.append(" Linea: "+(s.left+1));
                    if (s.right >= 0)m.append(" Columna: "+(s.right+1)+"\nRepare antes de Continuar");}
                if(m.length()!=0)
                    errores+=m+"\n";
        }
        
        errores += m.append("    antes de    " + les.lexeme  + "  \n");
        System.err.println(m+info.toString());
    }
    
   
public void syntax_error(Symbol s){
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto.");
}


public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    if(s.value == null)
        return;
    append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " esta fuera de contexto (ERROR CRITICO SE DEBE SOLUCIONAR ANTES DE CONTINUAR, NO SE IDENTIFICO ).");
}

public static void append(String mensaje){
StringBuilder me;
    me = new StringBuilder("Error sintactico: "+" ");
    me.append(mensaje);
    
    errores+=mensaje+"\n";
    System.out.println(me);
}

    public static void main(String[] args){
        try {
                ASintactico sintactico = new ASintactico(new AnalizadorLexico(new FileReader(args[0])));
try{
                Object result = sintactico.parse().value;}catch(Exception ex){


}
        } catch (Exception ex) {
           // ex.printStackTrace();
        }
    }
:}


/* ------------Declaracion de simbolos terminales y no terminales---------- */
terminal AND, OR , NOT, ADD, MUL, MIN, DIV,PLUSPLUS,MINMIN, ASIG,ADDASIG,MINASIG,DIVASIG,MULASIG,MAYTHAN,MINTHAN,MAYEQUAL,MINEQUAL,EQUAL,NOTEQUAL,COMILLA,
COMA,PAROPEN,PARCLOSE,COROPEN,CORCLOSE,KEYOPEN,KEYCLOSE,PUNTO_Y_COMA,MIENTRAS,REPRODUCE,SI,SINO,IMPORTAR,ROMPER,CONTINUAR,VOLUMEN,FRECUENCIA,SILENCIO,VERDADERO,
FALSO,NULO,IMPRIMIR,NOTA,VACIO,CADENA,INICIO,idNoVal,ENTERO,ID,ERROR,numEntero, POR , VV,DO,RE,MI,FA,SOL,LA,SII, DOS,RES,MIS,FAS,SOLS,LAS,SIS, BOOLEANO  ;

non terminal inicio, cuerpo, inicializarVariable,
decvariables, dato, sentencia_si, condicion, cond, log, ope_relacional, op_rel, sig_rel, acciones, asignar, llamarFuncion, valoresCamion, cuerpoFuncion, cuerpo_sentencia_si1, sentencia_mientras,
incrementar_var,  funcionesDo,declaraReproduce , declaraImprimir , declaraImportar , declaraContinuar , declaraSilencio ,
declaraVolumen , declaraFrecuencia ,opasig , datoasig, tipo, ciclos, operacion, ari, rel, opers, sentencia_por, ope_logico, arreglo, asig_arreglo, datos, log2,errores,errores1,ciclos_errores, notas,notapuras, asignarDeclaracion,paramRero;
   
start with inicio;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////------INICIO---------///////////////////////////////////////////////////////////////////
////////////////////////////////////{:this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ( despu�s de inicio";:}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo:c KEYCLOSE 
                {: 
                  codop.add( "void setup(){\n}\nvoid loop(){ \n" + c + "\n}"); 
                  producciones += "inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN cuerpo:c KEYCLOSE\n";
                :} | 
          INICIO PAROPEN PARCLOSE KEYOPEN KEYCLOSE {: producciones += "inicio ::= INICIO PAROPEN PARCLOSE KEYOPEN KEYCLOSE\n" :}  | 
          INICIO PAROPEN PARCLOSE KEYOPEN cuerpo :e  
                {:
                  this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Se esperaba un } en el final del programa\n ";
                :} | 
          INICIO PAROPEN PARCLOSE KEYOPEN :e 
                {:
                  this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un } en el final del programa  \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+"- Se esperaba un } en el final del programa  \n ";
                :} | 
          errores PAROPEN PARCLOSE:e KEYOPEN cuerpo KEYCLOSE 
                {:
                  this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio \n ";
                :} | 
          errores PAROPEN PARCLOSE:e KEYOPEN KEYCLOSE 
                {:
                  this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Se esperaba la palabra reservada inicio  \n ";
                :} | 
          PARCLOSE :e 
                {:
                  this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba la estructura de inicio \n ";
                :} |
          PAROPEN :e 
                {:
                  this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba la estructura de inicio \n ";
                :} |
          KEYOPEN :e 
                {:
                  this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                :} |
          cuerpo :e KEYCLOSE 
                {:
                  this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                :} |
          KEYOPEN :e cuerpo 
                {:
                  this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                :} |
          KEYCLOSE :e 
                {:
                  this.parser.errores+="Error: 1 en la linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba la estructura de inicio \n";
                :} |
          PAROPEN:e PARCLOSE KEYOPEN KEYCLOSE 
                {:
                  this.parser.errores+="Error: 2 en la linea: "+(eright+1)+" - se esperaba la palabra inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba la palabra inicio \n";
                :} | 
          PAROPEN:e PARCLOSE KEYOPEN cuerpo KEYCLOSE 
                {:
                  this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
                :} | 
          INICIO:e PARCLOSE KEYOPEN KEYCLOSE 
                {:
                  this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
                :} | 
          INICIO:e PARCLOSE KEYOPEN cuerpo KEYCLOSE 
                {:
                  this.parser.errores+="Error: 3 en la linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba un ( despu�s de inicio \n";
                :} | 
          INICIO PAROPEN:e KEYOPEN cuerpo KEYCLOSE 
                {:
                  this.parser.errores+="Error: 4 en la linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
                :} | 
          INICIO PAROPEN:e KEYOPEN KEYCLOSE 
                {:
                  this.parser.errores+="Error: 4 en la linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba un ) despu�s de ( \n";
                :} | 
          INICIO PAROPEN PARCLOSE:e cuerpo KEYCLOSE 
                {:
                  this.parser.errores+="Error: 5 en la linea: "+(eright+1)+" - se esperaba un { despu�s de ) \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - se esperaba un { despu�s de ) \n";
                :} |
          INICIO PAROPEN PARCLOSE:e KEYCLOSE 
                {:
                  this.parser.errores+="Error: 5 en la linea: "+(eright+1)+" - Se esperaba un { despu�s de ) \n";
                  producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Se esperaba un { despu�s de ) \n";
                :} ;
  
errores ::= ID | NOTA | numEntero | CADENA | VACIO | NULO | VERDADERO | FALSO ;
errores1 ::= NOTA | numEntero | CADENA | VACIO | NULO | VERDADERO | FALSO ;
ciclos_errores ::= MIENTRAS | SI;

    
cuerpo ::= decvariables:id 
                {: 
                  RESULT= id+""; 
                  producciones += "cuerpo ::= decvariables:id \n";
                :} |  
           asignar:id 
                {: 
                  producciones += "cuerpo ::= asignar:id  \n";
                  String[] a = id.toString().split("\\.");
                  if(a.length == 2){
                  RESULT= a[1]+" = "+a[0]+";\n";  
                  }else if(a.length == 3){
                    RESULT= a[1]+" = "+a[0]+";\n"+a[2]; 
                  }else if(a.length == 4){
                    RESULT= a[1]+" "+a[2]+" "+a[0]+";\n"+a[3]; 
                  }
                :} | 
           funcionesDo:id 
                {: 
                  producciones += "cuerpo ::= funcionesDo:id  \n";
                  RESULT= id+""; 
                :} | 
            ciclos:id 
                {: 
                  producciones += "cuerpo ::= ciclos:id  \n";
                  RESULT= id+""; 
                :} | 
           incrementar_var:id 
                {: 
                  producciones += "cuerpo ::= incrementar_var:id  \n";
                  RESULT= id+""; 
                :} | 
            arreglo  ;

arreglo::= tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo |
            tipo COROPEN CORCLOSE ID PUNTO_Y_COMA cuerpo |
            COROPEN :e CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 8 en la linea: "+(eright+1)+" - Se esperaba un tipo de dato antes de '[' \n";:}|
            tipo :e CORCLOSE ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 8 en la linea: "+(eright+1)+" - Se esperaba un '[' despues de el tipo de dato' \n";:}|
            tipo COROPEN :e ID ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" - Se esperaba un ']' despues de '[' \n";:}|
            tipo COROPEN CORCLOSE :e ASIG COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 10 en la linea:"+(eright+1)+" - Se esperaba un 'identificador' despues de ']' \n";:}|
            tipo COROPEN CORCLOSE ID :e COROPEN datos CORCLOSE PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 11 en la linea: "+(eright+1)+" - Se esperaba un ' = ' despues de el 'identificador' \n";:}|
            tipo COROPEN CORCLOSE ID ASIG:e datos CORCLOSE PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 12 en la linea: "+(eright+1)+" - Se esperaba un ' [ ' despues de el ' = ' \n";:}|
            tipo COROPEN CORCLOSE ID ASIG COROPEN :e CORCLOSE PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 13 en la linea: "+(eright+1)+" - Se esperaban datos dentro de '[' ']' \n";:}|
            tipo COROPEN CORCLOSE ID ASIG COROPEN datos :e PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 14 en la linea: "+(eright+1)+" - Se esperaba un ']' \n";:}|
            tipo COROPEN CORCLOSE ID ASIG COROPEN datos CORCLOSE:e cuerpo {:this.parser.errores+="Error: 15 en la linea: "+(eright+1)+" - Se esperaba un ';' \n";:}; 



 
datos ::= ID  |  numEntero  |  VERDADERO  |  FALSO  |  CADENA  |  NOTA  | notapuras | 
          ID COMA datos|  numEntero COMA datos |  VERDADERO COMA datos |  FALSO COMA datos |  CADENA COMA datos |  NOTA COMA datos | notapuras COMA datos |
          notapuras :e datos 
              {:
                this.parser.errores+="Linea: "+(eright+1)+" - Se esperaba un ',' para la separacion de los datos \n";
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Se esperaba un ',' para la separacion de los datos \n";
              :} ;

asignar ::= ID:id ASIG dato:dato PUNTO_Y_COMA 
              {:
                producciones += "asignar ::= ID:id ASIG dato:dato PUNTO_Y_COMA \n";
                ci.add(id+" = " + dato );
                listavar.add(id+"");
                listavar.add("\n");
                RESULT= dato+"."+id; 
              :}  |  
            ID:id opasig:opa datoasig:dato PUNTO_Y_COMA 
              {: 
                producciones += "asignar ::= ID:id opasig:opa datoasig:dato PUNTO_Y_COMA \n";
                ci.add(id+" "+ opa +" " + dato + " " );
                listavar.add(id+"");
                listavar.add("\n");
                RESULT= dato+"."+id+"."+opa+". "; 
              :} |
            ID:id ASIG dato:dato PUNTO_Y_COMA cuerpo:c 
              {:
                producciones += "asignar ::= ID:id ASIG dato:dato PUNTO_Y_COMA cuerpo:c \n";
                listavar.add(id+"");
                listavar.add("\n");
                ci.add(id+" = " + dato + " " );      
                arbolesAsignacion.add(id.toString()+"!=!"+dato.toString()+"!;");
                System.out.println("Lista que no entra: \n"+dato.toString());

                for(int i = 0; i<ls.size(); i++){
                    if (ls.get(i).numero_linea == 7) {
                        System.out.println(ls.get(i).toString());
                    }
                }

                asig_simples.add(id+"="+dato+"="+(idright+1));
                RESULT= dato+"."+id+"."+c; 
              :} | 
            ID:id opasig:opa datoasig:dato PUNTO_Y_COMA cuerpo:c 
              {:
                producciones += "asignar ::= ID:id opasig:opa datoasig:dato PUNTO_Y_COMA cuerpo:c  \n";
                ci.add(id+" "+ opa +" " + dato + " " );  
                listavar.add(id+"");
                listavar.add("\n");
                RESULT= dato+"."+id+"."+opa+"."+c; 
              :}|
            ID:id ASIG ari PUNTO_Y_COMA 
              {: 
                producciones += "asignar ::= ID:id ASIG ari PUNTO_Y_COMA  \n";
                RESULT=0; 
              :} | 

            ID ASIG :e PUNTO_Y_COMA cuerpo
              {: 
                RESULT="error"; this.parser.append("Error: 7 en la linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n";
              :} |
            ID ASIG :e PUNTO_Y_COMA 
              {: 
                RESULT="error";this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n";
              :} |

            errores1 ASIG dato PUNTO_Y_COMA:e cuerpo
              {: 
                RESULT="error"; this.parser.append("Error: 16 en la linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n";
              :} |
            errores1 ASIG dato PUNTO_Y_COMA:e 
              {: 
                RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n";
              :} |

            errores1 opasig dato PUNTO_Y_COMA:e cuerpo
              {: 
                RESULT="error"; this.parser.append("Error: 16 en la linea:"+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n";
              :} |
            errores1 opasig dato PUNTO_Y_COMA:e 
              {: 
                RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n";
              :} |

            ID dato:e PUNTO_Y_COMA cuerpo
              {: 
                RESULT="error"; this.parser.append(" Error: 17 en la linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n";
              :} |
            ID dato:e PUNTO_Y_COMA 
              {: 
                RESULT="error"; this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n";
              :} |

            ID ASIG dato:e cuerpo
              {: 
                RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n";
              :} |
            ID ASIG dato:e 
              {: 
                RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n";
              :} |

            ID opasig dato:e 
              {: 
                RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n";
              :} |
            error:e cuerpo ;

asignarDeclaracion ::=  ID:id ASIG dato:dato PUNTO_Y_COMA 
                              {: 
                                producciones += "asignarDeclaracion ::= ID:id ASIG dato:dato PUNTO_Y_COMA  \n";
                                RESULT= dato+"."+id;
                                asig_Ini.add(id+ "=" + dato +"="+ (idright+1));
                                ci.add(id +" = "+dato+ " " );
                                listavar.add(id+"");
                                listavar.add("\n");
                              :}  |  
                        ID:id opasig:opa datoasig:dato PUNTO_Y_COMA 
                              {: 
                                producciones += "asignarDeclaracion ::= ID:id opasig:opa datoasig:dato PUNTO_Y_COMA  \n";
                                RESULT= dato+"."+id;
                                asig_Ini.add(id+ "=" + dato +"="+ (idright+1));
                                ci.add(id+" "+ opa +" " + dato + " " ); 
                                listavar.add(id+"");
                                listavar.add("\n");
                              :}|
                        ID:id ASIG dato:dato PUNTO_Y_COMA cuerpo:c 
                              {: 
                                producciones += "asignarDeclaracion ::= ID:id ASIG dato:dato PUNTO_Y_COMA cuerpo:c  \n";
                                RESULT= dato+"."+id+"."+c; 

                                asig_Ini.add(id+ "=" + dato +"="+ (idright+1));

                                ci.add(id +" = "+dato +" " ); 
                                listavar.add(id+"");
                                listavar.add("\n");
                              :} | 
                        ID:id opasig:opa datoasig:dato PUNTO_Y_COMA cuerpo:c 
                              {:
                                producciones += "asignarDeclaracion ::= ID:id opasig:opa datoasig:dato PUNTO_Y_COMA cuerpo:c  \n";
                                ci.add(id+" "+ opa +" " + dato + " " ); 
                                listavar.add(id+"");
                                listavar.add("\n");
                                RESULT= dato+"."+id+"."+c; 
                              :}|
                        ID:id ASIG ari PUNTO_Y_COMA 
                              {: 
                                producciones += "asignarDeclaracion ::= ID:id ASIG ari PUNTO_Y_COMA  \n";
                                RESULT=0; 
                              :}| 

            ID ASIG :e PUNTO_Y_COMA cuerpo
                              {: 
                                RESULT="error"; this.parser.append("Error: 7 en la linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un  valor de asignacion' \n";
                              :} |
            ID ASIG :e PUNTO_Y_COMA 
                              {: 
                                RESULT="error";this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un 'valor de asignacion'  \n";
                              :} |

            errores1 ASIG dato PUNTO_Y_COMA:e cuerpo
                              {: 
                                RESULT="error"; this.parser.append("Error: 16 en la linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n";
                              :} |
            errores1 ASIG dato PUNTO_Y_COMA:e 
                              {: 
                                RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n";
                              :} |

            errores1 opasig dato PUNTO_Y_COMA:e cuerpo
                              {: 
                                RESULT="error"; this.parser.append("Error: 16 en la linea:"+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico se requiere un 'identificador' antes del operador de asignacion \n";
                              :} |
            errores1 opasig dato PUNTO_Y_COMA:e 
                              {: 
                                RESULT="error"; this.parser.append("Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'identificador' antes del operador de asignacion'  \n";
                              :} |

            ID dato:e PUNTO_Y_COMA cuerpo
                              {: 
                                RESULT="error"; this.parser.append(" Error: 17 en la linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion' \n";
                              :} |
            ID dato:e PUNTO_Y_COMA 
                              {: 
                                RESULT="error"; this.parser.append("Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Error Sintactico falto un 'operador de asignacion'  \n";
                              :} |

            ID ASIG dato:e cuerpo
                              {: 
                                RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n";
                              :} |
            ID ASIG dato:e 
                              {: 
                                RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n";
                              :} |

            ID opasig dato:e 
                              {: 
                                RESULT="error"; this.parser.append("Error: 6 en la linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n");
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - error sint�ctico falto un ';' al finalizar la asignacion \n";
                              :} |
            error:e cuerpo ;

opasig::= ADDASIG:id {: RESULT="+="; producciones += "opasig::= ADDASIG:id \n"; :} |  MINASIG:id {: RESULT=id; producciones += "opasig::= MINASIG:id \n"; :}| 
          DIVASIG:id {: RESULT=id; producciones += "opasig::= DIVASIG:id \n";  :} |  MULASIG:id {: RESULT=id; producciones += "opasig::= MULASIG:id \n"; :} ;

datoasig::= ID:id {: RESULT=id; producciones += "datoasig::= ID:id \n"; :}  |  numEntero:id {: RESULT=id; producciones += "datoasig::= numEntero:id \n"; :}  |  NOTA:id {: RESULT=id; producciones += "datoasig::= NOTA:id \n"; :} ;


tipo ::=  ENTERO:entero {: RESULT= entero; System.out.println("El tipo es: " + entero.toString()); producciones += "tipo ::=  ENTERO:entero \n"; :} | 
          NOTA:entero {: RESULT= entero; System.out.println("El tipo es: " + entero.toString()); producciones += "tipo ::=  NOTA:entero \n"; :} | 
          CADENA:entero {: RESULT= entero; System.out.println("El tipo es: " + entero.toString()); producciones += "tipo ::=  CADENA:entero \n"; :} ;

dato::= ID:id {: RESULT=id; producciones += "dato ::= ID:id  \n"; :} |  numEntero:id {: RESULT=id; producciones += "dato ::= numEntero:id \n"; :} |  
        VERDADERO:id {: RESULT=id; producciones += "dato ::= VERDADERO:id \n"; :} |  FALSO:id {: RESULT=id; producciones += "dato ::= FALSO:id \n"; :} | 
        CADENA:id {: RESULT=id; producciones += "dato ::= CADENA:id \n"; :}  |  NOTA:id {: RESULT=id; producciones += "dato ::= NOTA:id \n"; :}  |  
        VACIO:id {: RESULT=id; producciones += "dato ::= VACIO:id \n"; :}  |  NULO:id {: RESULT=id; producciones += "dato ::= NULO:id \n"; :} | 
        DO:id {: RESULT=id; producciones += "dato ::= DO:id \n";  :} | RE:id {: RESULT=id; producciones += "dato ::= RE:id \n";  :} | 
        MI:id {: RESULT=id; producciones += "dato ::= MI:id \n";  :} | FA:id {: RESULT=id; producciones += "dato ::= FA:id \n";  :} | 
        SOL:id {: RESULT=id; producciones += "dato ::= SOL:id \n";  :} | LA:id {:  RESULT=id; producciones += "dato ::= LA:id \n";  :} | 
        SII:id {: RESULT=id; producciones += "dato ::= SII:id \n"; :} ;

notas ::= RE:id   {: RESULT=id; producciones += "notas ::= RE:id \n"; :} 
        | MI:id   {: RESULT=id; producciones += "notas ::= RE:id \n"; :} 
        | FA:id   {: RESULT=id; producciones += "notas ::= RE:id \n"; :} 
        | SOL:id  {: RESULT=id; producciones += "notas ::= RE:id \n"; :} 
        | LA:id   {: RESULT=id; producciones += "notas ::= RE:id \n"; :} 
        | SII:id  {: RESULT=id; producciones += "notas ::= RE:id \n"; :}  
        | DO:id   {: RESULT=id; producciones += "notas ::= RE:id \n"; :} 
        | NOTA:id {: RESULT=id; producciones += "notas ::= RE:id \n"; :} ;

notapuras ::= RE | MI | FA | SOL | LA | SII | DO | DOS | RES | MIS | FAS | SOLS | LAS | SIS ;


decvariables ::= tipo:tipo ID:id PUNTO_Y_COMA 
                    {:  
                      producciones += "decvariables ::= tipo:tipo ID:id PUNTO_Y_COMA  \n";
                      if(tipo.toString().equals("entero")){
                      RESULT="int"+" "+id+";\n";  
                      }
                      ci.add(tipo+" "+id+" ");
                      listavar.add(id+"");
                      listavar.add("\n");
                    :}

                | tipo:tipo ID:id PUNTO_Y_COMA cuerpo:c 
                    {:
                      producciones += "decvariables ::= tipo:tipo ID:id PUNTO_Y_COMA cuerpo:c   \n";
                      if(tipo.toString().equals("entero")){
                        RESULT="int"+" "+id+";\n"+c;  
                      }
                      ci.add(tipo+" "+id+" "); 
                      listavar.add(id+"");
                      listavar.add("\n");
                      ls = optab.buscarID(id.toString(),tipo.toString(),null,ls);
                    :} 

                | tipo:tipo asignarDeclaracion:asignacion
                  {:
                    producciones += "decvariables ::= tipo:tipo asignarDeclaracion:asignacion   \n";
                    String[] a = asignacion.toString().split("\\.");

                    if(a.length == 2){  
                      if(tipo.toString().equals("entero")){
                        RESULT="int "+a[1]+" = "+a[0]+";\n";
                        ci.add(tipo+" "+a[1]+" ");
                      }
                      if(tipo.toString().equals("nota")){
                        RESULT="int "+a[1]+" = "+a[0]+";\n";  
                        ci.add(tipo+" "+a[1]+" ");
                      }  
                      if(tipo.toString().equals("cadena")){
                        RESULT="String "+a[1]+" = "+a[0]+";\n";
                        ci.add(tipo+" "+a[1]+" ");
                      }
                    }
                      
                    if(a.length == 3){  
                      if(tipo.toString().equals("entero")){
                        RESULT="int "+a[1]+" = "+a[0]+";\n"+a[2]; 
                        ci.add(tipo+" "+a[1]+" ");
                      }
                      if(tipo.toString().equals("nota")){
                        RESULT="int "+a[1]+" = "+a[0]+";\n"+a[2];
                        ci.add(tipo+" "+a[1]+" ");
                      } 
                      if(tipo.toString().equals("cadena")){
                        RESULT="String "+a[1]+" = "+a[0]+";\n"+a[2]+";\n";
                        ci.add(tipo+" "+a[1]+" ");
                      }
                    }  
                 
                    try { 
                      String asigTemp = asignacion.toString();
                      String[] temp = asigTemp.split("\\.");
                      try { 
                          if(tipo.toString() == "entero" && ((Integer.parseInt(temp[0]) == 0 || (Integer.parseInt(temp[0])/Integer.parseInt(temp[0]))==1) ) )
                              System.out.println("Es entero");

                      } catch ( Exception d) {
                          System.err.println("Exception :" + d.getMessage());
                          this.parser.append("Error: 50 de Excepcion en la linea: "+(tiporight+1)+" El dato "+temp[0]+" Se esperaba un "+tipo.toString()+"\n");
                      }
                      //Aqui si tiene los tipo de datos
                      ls = optab.buscarID(temp[1],tipo.toString(),temp[0],ls);
                    } catch ( Exception d) {
                      System.out.println(d.getMessage());
                    }
                    //ls = optab.buscarID(sep[1],tipo.toString(),sep[0],ls); 
                    //this.parser.errores+= tipo.toString()+ " asignacion: " + asignacion.toString()  + "\n"; 
                  :} 

                | tipo ID:e 
                    {:
                      this.parser.errores+="Error: 18 en la linea: "+(eright+1)+" -  falta el ';' \n";
                      producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  falta el ';' \n";
                    :}  
                | tipo ID:e cuerpo 
                    {:
                      this.parser.errores+="Error: 18 en la linea: "+(eright+1)+" -  falta el ';' \n";
                      producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  falta el ';' \n";
                    :} 

                | numEntero ID PUNTO_Y_COMA:e 
                    {:
                      this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
                      producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
                    :}  
                | numEntero ID PUNTO_Y_COMA:e cuerpo 
                    {:
                      this.parser.errores+="Error: 9 en la linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
                      producciones += "<<ERROR>> : Linea: "+(eright+1)+" -  Error Sintactico se requiere un 'TIPO DE DATO' antes del identificador \n";
                    :} 

                | ID:e 
                    {:
                      this.parser.errores+="Error: 19 en la linea: "+(eright+1)+" - Se esperaba una tipo de dato \n";
                      producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Se esperaba una tipo de dato \n";
                    :} ;

funcionesDo ::= declaraReproduce:id   {: RESULT=id+""; producciones += "funcionesDo ::= declaraReproduce:id \n"; :}  |
                declaraImprimir:id    {: RESULT=id+""; producciones += "funcionesDo ::= declaraImprimir:id \n"; :}  |  
                declaraImportar:id    {: RESULT=id+""; producciones += "funcionesDo ::= declaraImportar:id \n"; :}  |  
                declaraContinuar:id   {: RESULT=id+""; producciones += "funcionesDo ::= declaraContinuar:id \n"; :}  |  
                declaraSilencio:id    {: RESULT=id+""; producciones += "funcionesDo ::= declaraSilencio:id \n"; :}  | 
                declaraVolumen:id     {: RESULT=id+""; producciones += "funcionesDo ::= declaraVolumen:id \n"; :}  |  
                declaraFrecuencia:id  {: RESULT=id+""; producciones += "funcionesDo ::= declaraFrecuencia:id \n"; :} ;

declaraReproduce ::= REPRODUCE PAROPEN paramRero:p PARCLOSE PUNTO_Y_COMA 
                          {:
                            producciones += "declaraReproduce ::= REPRODUCE PAROPEN paramRero:p PARCLOSE PUNTO_Y_COMA \n";
                            RESULT= p+"\n";
                            ci.add(p+"");
                          :} |
                     REPRODUCE PAROPEN paramRero:p PARCLOSE PUNTO_Y_COMA cuerpo:c 
                          {:
                            producciones += "declaraReproduce ::= REPRODUCE PAROPEN paramRero:p PARCLOSE PUNTO_Y_COMA cuerpo:c  \n";
                            RESULT= p+"\n"+c;
                            ci.add(p+""); 
                          :}|
                     PAROPEN:e paramRero PARCLOSE PUNTO_Y_COMA 
                          {:
                            this.parser.errores+="Error: 20 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
                          :} | 
                     NOTA:e PARCLOSE PUNTO_Y_COMA 
                          {:
                            this.parser.errores+="Error: 21 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que abre  \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que abre  \n";
                          :} |  
                     PAROPEN paramRero:e PUNTO_Y_COMA 
                          {:
                            this.parser.errores+="Error: 22 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que cierra   \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentecis que cierra  \n";
                          :} |   
                     REPRODUCE:e paramRero PARCLOSE PUNTO_Y_COMA 
                          {:
                            this.parser.errores+="Error: 23 en la linea:"+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
                          :} | 
                     REPRODUCE PARCLOSE:e 
                          {:
                            this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el (  ";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta el (   \n";
                          :} | 
                     REPRODUCE PAROPEN paramRero :e PUNTO_Y_COMA 
                          {:
                            this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el )  ";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta el )   \n";
                          :} |
                     PAROPEN:e paramRero PARCLOSE PUNTO_Y_COMA cuerpo
                          {:
                            this.parser.errores+="Error: 20 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'  \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' \n";
                          :} | 
                     NOTA:e PARCLOSE PUNTO_Y_COMA cuerpo
                          {:
                            this.parser.errores+="Error: 21 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentesis que abre  \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' y parentesis que abre \n";
                          :} |  
                     PAROPEN paramRero:e PUNTO_Y_COMA cuerpo
                          {:
                            this.parser.errores+="Error: 22 en la linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce'   \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta la palabra reservada 'reproduce' \n";
                          :} |   
                     REPRODUCE:e paramRero PARCLOSE PUNTO_Y_COMA cuerpo
                          {:
                            this.parser.errores+="Error: 23 en la linea: "+(eright+1)+" - Hace falta el '(' despues de 'reproduce'  \n";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta el '(' despues de 'reproduce' \n";
                          :} | 
                     REPRODUCE PARCLOSE:e cuerpo
                          {:
                            this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el (  ";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Hace falta el (  \n";
                          :} | 
                     REPRODUCE PAROPEN paramRero :e PUNTO_Y_COMA cuerpo
                          {:
                            this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el )  ";
                            producciones += "<<ERROR>> : Linea: "+(eright+1)+"- Hace falta el )  \n";
                          :}; 

paramRero::=  notas:n COMA numEntero:x
                    {:
                      producciones += "paramRero::= notas:n COMA numEntero:x  \n";
                      param.add(n+"="+(nright+1)); 
                      RESULT= "tone(8,"+n+","+x+");\n delay("+x+");\n";
                      listavar.add(n+"");
                    :} |
              notas:n COMA ID:x
                    {:
                      producciones += "paramRero::= notas:n COMA ID:x  \n";
                      param.add(n+"="+(nright+1)); 
                      RESULT= "tone(8,"+n+","+x+");\n delay("+x+");\n";
                      listavar.add(n+"");
                    :} |
              ID:n COMA numEntero:x
                    {:
                      producciones += "paramRero::= ID:n COMA numEntero:x  \n";
                      ci.add("ent "+ n + "\n tono("+n+","+x+")" );
                      param.add(n+"="+(nright+1)); 
                      RESULT= "tone(8,"+n+","+x+");\n delay("+x+");\n";
                      listavar.add(n+"");
                    :} |
            notas COMA notas :e 
                    {: 
                      producciones += "paramRero::= notas COMA notas :e   \n";
                      this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Hace falta el segundo parámetro debe ser un número entero \n  "; 
                    :} ;
  
declaraImprimir ::= IMPRIMIR PAROPEN dato:dato PARCLOSE PUNTO_Y_COMA 
                              {:
                                producciones += "declaraImprimir ::= IMPRIMIR PAROPEN dato:dato PARCLOSE PUNTO_Y_COMA  \n";
                                ci.add("cad ="+ dato + "\n print("+dato+")" );
                                RESULT= "Serial.println(" + dato+ ");\n";
                              :}|
                    IMPRIMIR PAROPEN dato:dato PARCLOSE PUNTO_Y_COMA cuerpo:c  
                              {:
                                producciones += "declaraImprimir ::= IMPRIMIR PAROPEN dato:dato PARCLOSE PUNTO_Y_COMA cuerpo:c   \n";
                                ci.add("cad ="+ dato + "\n print("+dato+")" );
                                RESULT= "Serial.println(" + dato+ ");\n"+c;
                              :}|
                    IMPRIMIR PAROPEN dato PARCLOSE:e 
                              {:
                                
                                this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+"  - Falta ';'     \n";
                              :} | 
                    IMPRIMIR PAROPEN :e PARCLOSE PUNTO_Y_COMA 
                              {:
                                
                                this.parser.errores+="Error: 25 en la linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta un parametro para imprimir  \n";
                              :} |          
                    IMPRIMIR PAROPEN dato PUNTO_Y_COMA:e 
                              {:
                                
                                this.parser.errores+="Error: 26 en la linea: "+(eright+1)+" - Falta el ) \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el )     \n";
                              :} | 
                    IMPRIMIR dato PARCLOSE PUNTO_Y_COMA:e 
                              {:
                                
                                this.parser.errores+="Error: 27 en la linea: "+(eright+1)+" - Falta el ( \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el (      \n";
                              :} |
                    IMPRIMIR PAROPEN :e PARCLOSE PUNTO_Y_COMA cuerpo
                              {:
                                
                                this.parser.errores+="Error: 25 en la linea: "+(eright+1)+" - Falta un parametro para imprimir \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta un parametro para imprimir        \n";
                              :} |
                    IMPRIMIR PAROPEN dato PARCLOSE:e cuerpo
                              {:
                                
                                this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta ';'        \n";
                              :} | 
                    IMPRIMIR PAROPEN:e dato PUNTO_Y_COMA cuerpo 
                              {:
                                
                                this.parser.errores+="Error: 26 en la linea: "+(eright+1)+" - Falta el ) \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el )       \n";
                              :} | 
                    IMPRIMIR dato:e PARCLOSE PUNTO_Y_COMA cuerpo
                              {:
                                
                                this.parser.errores+="Error: 27 en la linea: "+(eright+1)+" - Falta el ( \n";
                                producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el (       \n";
                              :} ;


declaraImportar ::= IMPORTAR ID:id PUNTO_Y_COMA 
                            {:
                              producciones += "declaraImportar ::= IMPORTAR ID:id PUNTO_Y_COMA       \n";
                              ci.add("imp "+ id  );
                              RESULT ="#include "+ id +" \n";
                            :} |
                    IMPORTAR ID:e 
                            {:
                              this.parser.errores+="Linea: "+(eright+1)+" - Falta el ; \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ;  \n";
                            :}  | 
                    IMPORTAR PUNTO_Y_COMA:e 
                            {:
                              this.parser.errores+="Linea: "+(eright+1)+" - Falta el argumento en importar \n"; 
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el argumento en importar  \n";
                            :} ;

declaraContinuar ::=  CONTINUAR PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA  
                            {:
                              producciones += "declaraContinuar ::=  CONTINUAR PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA \n";
                              ci.add("cont("+n+")" );
                              RESULT ="delay("+n +");\n";
                            :}| 
                      CONTINUAR PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo:c 
                            {:
                              producciones += "declaraContinuar ::=  CONTINUAR PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo:c    \n";
                              ci.add("cont("+n+")" );
                              RESULT ="delay("+n +");\n"+c;
                            :} | 
                      PAROPEN:e PARCLOSE PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 28 en la linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n"; 
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta la lapabra reservada 'continuar'; \n";
                            :} |
                      CONTINUAR PAROPEN PARCLOSE:e 
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n"; 
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ; \n";
                            :} | 
                      CONTINUAR PAROPEN:e PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 29 en la linea: "+(eright+1)+" - Falta el ) despues de continuar( \n"; 
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues de continuar( \n";
                            :} | 
                      CONTINUAR PARCLOSE:e PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 30 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
                            :} | 
                      PAROPEN:e PARCLOSE PUNTO_Y_COMA cuerpo 
                            {:
                              this.parser.errores+="Error: 28 en la linea: "+(eright+1)+" - Falta la palabra reservada 'continuar' \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta la palabra reservada 'continuar' \n";
                            :} |
                      CONTINUAR PAROPEN PARCLOSE:e cuerpo 
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ;  \n";
                            :} | 
                      CONTINUAR PAROPEN:e PUNTO_Y_COMA cuerpo 
                            {:
                              this.parser.errores+="Error: 29 en la linea: "+(eright+1)+" - Falta el ) despues de continuar ( \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues de continuar (  \n";
                            :} | 
                      CONTINUAR PARCLOSE:e PUNTO_Y_COMA cuerpo 
                            {:
                              this.parser.errores+="Error: 30 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n"; 
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de continuar(   \n";
                            :}  ;

declaraSilencio::=  SILENCIO PAROPEN  PARCLOSE PUNTO_Y_COMA 
                            {:
                              producciones += "declaraSilencio ::=  SILENCIO PAROPEN  PARCLOSE PUNTO_Y_COMA   \n";
                              ci.add("notono()\n tono(0)\n tiempo( )" );
                              RESULT ="noTone(8);\n";
                            :}| 
                    SILENCIO PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA  
                            {:
                              producciones += "declaraSilencio ::=  SILENCIO PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA    \n";
                              ci.add("notono()\n tono(0)\n tiempo("+n+")" );
                              RESULT ="noTone(8);\n delay("+n+");\n";
                            :}| 
                    SILENCIO PAROPEN  PARCLOSE PUNTO_Y_COMA cuerpo:c  
                            {:
                              producciones += "declaraSilencio ::=  SILENCIO PAROPEN  PARCLOSE PUNTO_Y_COMA cuerpo:c      \n";
                              ci.add("notono()\n tono(0)\n tiempo( )" );
                              RESULT ="noTone(8);\n"+c;
                            :}| 
                    SILENCIO PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo:c  
                            {:
                              producciones += "declaraSilencio ::=  SILENCIO PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo:c     \n";
                              ci.add("notono()\n tono(0)\n tiempo("+n+")" );
                              RESULT="noTone(8);\n delay("+n+");\n"+c;
                            :}| 
                    SILENCIO PAROPEN ID:n PARCLOSE PUNTO_Y_COMA  
                            {:
                              producciones += "declaraSilencio ::=  SILENCIO PAROPEN ID:n PARCLOSE PUNTO_Y_COMA   \n";
                              ci.add("notono()\n tono(0)\n tiempo("+n+")" );
                              param.add(n+"="+(nright+1)); 
                              RESULT ="noTone(8);\n delay("+n+");\n";
                            :}|
                    SILENCIO PAROPEN ID:n PARCLOSE PUNTO_Y_COMA cuerpo:c  
                            {:
                              producciones += "declaraSilencio ::=  SILENCIO PAROPEN ID:n PARCLOSE PUNTO_Y_COMA cuerpo:c   \n";
                              ci.add("notono()\n tono(0)\n tiempo("+n+")" );
                              param.add(n+"="+(nright+1)); 
                              RESULT="noTone(8);\n delay("+n+");\n"+c;
                            :}|

                     SILENCIO PAROPEN PARCLOSE:e 
                            {:
                              this.parser.errores+="Error: 24 en la linea:"+(eright+1)+" - Falta el ; \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ; \n";
                            :} |
                     SILENCIO PAROPEN numEntero PARCLOSE:e 
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
                            :} | 
                     SILENCIO PAROPEN PUNTO_Y_COMA:e
                            {:
                              this.parser.errores+="Error: 31 en la linea: "+(eright+1)+" - Falta el ) despues de ( \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues de ( \n";
                            :} |
                     SILENCIO PAROPEN numEntero:e PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de numero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues de numero  \n";
                            :} | 
                     SILENCIO PARCLOSE:e PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 33 en la linea: "+(eright+1)+" - Falta el ( despues de silencio \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de silencio \n";
                            :} | 
                     SILENCIO numEntero:e PARCLOSE PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 34 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
                            :} | 
                     SILENCIO PAROPEN PARCLOSE:e cuerpo
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+"- Falta el ; \n";
                            :} |
                     SILENCIO PAROPEN numEntero PARCLOSE:e cuerpo
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ';' despues de ')' \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+"- Falta ';' despues de ')' \n";
                            :} | 
                     SILENCIO PAROPEN PUNTO_Y_COMA:e cuerpo
                            {:
                              this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de ( \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+"- Falta el ) despues de ( \n";
                            :} |
                     SILENCIO PAROPEN numEntero:e PUNTO_Y_COMA cuerpo
                            {:
                              this.parser.errores+="Error: 32 en la linea: "+(eright+1)+" - Falta el ) despues de numero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+"- Falta el ) despues de numero \n";
                            :} | 
                     SILENCIO PARCLOSE:e PUNTO_Y_COMA cuerpo
                            {:
                              this.parser.errores+="Error: 33 en la linea:"+(eright+1)+" - Falta el ( despues de silencio \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de silencio  \n";
                            :} | 
                     SILENCIO numEntero:e PARCLOSE PUNTO_Y_COMA cuerpo
                            {:
                              this.parser.errores+="Error: 34 en la linea: "+(eright+1)+" - Falta el ( despues de continuar( \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de continuar(  \n";
                            :} ;                        

declaraVolumen ::=  VOLUMEN PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA  
                            {:
                              producciones += "declaraVolumen ::=  VOLUMEN PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA   \n";
                              ci.add("ent v \n"+"v = "+ n +"\n vol( v )" );
                              RESULT="int volume = "+n+";\n";
                            :} | 
                    VOLUMEN PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo:c 
                            {:
                              producciones += "declaraVolumen ::=  VOLUMEN PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo:c    \n";
                              ci.add("ent v \n"+"v = "+ n +"\n vol( v )" );
                              RESULT="int volume = "+n+";\n"+c;
                            :}| 
                    VOLUMEN PAROPEN numEntero PARCLOSE:e 
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ; despues de )  \n";
                            :}  | 
                    VOLUMEN PAROPEN PARCLOSE:e PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el parametro entero \n";
                            :}  | 
                    VOLUMEN PAROPEN numEntero PUNTO_Y_COMA:e 
                            {:
                              this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
                            :}  | 
                    VOLUMEN numEntero PARCLOSE PUNTO_Y_COMA:e 
                            {:
                              this.parser.errores+="Error: 37 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
                            :} | 
                    VOLUMEN PAROPEN numEntero PARCLOSE:e cuerpo 
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ; despues de ) \n";
                            :}  | 
                    VOLUMEN PAROPEN PARCLOSE:e PUNTO_Y_COMA cuerpo
                            {:
                              this.parser.errores+="Error: 35 en la linea:: "+(eright+1)+" - Falta el parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el parametro entero \n";
                            :}  | 
                    VOLUMEN PAROPEN numEntero PUNTO_Y_COMA:e cuerpo
                            {:
                              this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
                            :}  | 
                    VOLUMEN numEntero:e PARCLOSE PUNTO_Y_COMA cuerpo
                            {:
                              this.parser.errores+="Error: 37 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada volumen \n";
                            :} ;

declaraFrecuencia ::=  FRECUENCIA PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA 
                            {:
                              producciones += "declaraFrecuencia ::=  FRECUENCIA PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA  \n";
                              ci.add("ent f \n"+"f = "+ n +"\n frec( f )" );
                              RESULT="int frequency = "+n+";\n";
                            :} | 
                    FRECUENCIA PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo 
                            {:
                              producciones += "declaraFrecuencia ::=  FRECUENCIA PAROPEN numEntero:n PARCLOSE PUNTO_Y_COMA cuerpo  \n";
                              ci.add("ent f \n"+"f = "+ n +"\n frec( f )" );
                              RESULT="int frequency = "+n+";\n";
                            :}| 
                    FRECUENCIA PAROPEN numEntero PARCLOSE:e 
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ; despues de ) \n";
                            :}  | 
                    FRECUENCIA PAROPEN PARCLOSE:e PUNTO_Y_COMA 
                            {:
                              this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el parametro entero \n";
                            :}  | 
                    FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA:e 
                            {:
                              this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
                            :}  | 
                    FRECUENCIA numEntero PARCLOSE PUNTO_Y_COMA:e 
                            {:
                              this.parser.errores+="Error: 38 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia  \n";
                            :} | 
                    FRECUENCIA PAROPEN numEntero PARCLOSE:e cuerpo 
                            {:
                              this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta el ; despues de ) \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ; despues de )  \n";
                            :}  | 
                    FRECUENCIA PAROPEN PARCLOSE:e PUNTO_Y_COMA cuerpo
                            {:
                              this.parser.errores+="Error: 35 en la linea: "+(eright+1)+" - Falta el parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el parametro entero  \n";
                            :}  | 
                    FRECUENCIA PAROPEN numEntero PUNTO_Y_COMA:e cuerpo
                            {:
                              this.parser.errores+="Error: 36 en la linea: "+(eright+1)+" - Falta el ) despues del parametro entero \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ) despues del parametro entero  \n";
                            :}  | 
                    FRECUENCIA numEntero:e PARCLOSE PUNTO_Y_COMA cuerpo
                            {:
                              this.parser.errores+="Error: 38 en la linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia \n";
                              producciones += "<<ERROR>> : Linea: "+(eright+1)+" - Falta el ( despues de la palabra reservada frecuencia  \n";
                            :} ;

operacion ::= ari | log | rel;

opers ::= ID | numEntero ;

ari ::= opers ADD opers |
        opers MIN opers |
        opers MUL opers |
        opers DIV opers |
        opers ADD ari |
        opers MIN ari |
        opers MUL ari |
        opers DIV ari ;

       
incrementar_var::=  ID:id PLUSPLUS PUNTO_Y_COMA  {:
                    RESULT=id+"++;\n";
                    ci.add(id+" + 1" );
                    :}| 
                    ID:id MINMIN PUNTO_Y_COMA {:
                    RESULT=id+"--;\n";
                    ci.add(id+" - 1" );
                    
                    codop.add(id+"--");
                    :}  | 
                    ID:id PLUSPLUS PUNTO_Y_COMA cuerpo:c {:
                    RESULT=id+"++;\n"+c;
                    ci.add(id+" + 1" );
                    :}| 
                    ID:id MINMIN PUNTO_Y_COMA cuerpo:c {:
                    RESULT=id+"--;\n"+c;
                    ci.add(id+" - 1" );
                    :}| 
                    ID ADD:e PUNTO_Y_COMA {:this.parser.errores+="Error: 39 en la linea:"+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";:}  | 
                    ID MIN:e PUNTO_Y_COMA {:this.parser.errores+="Error: 40 en la linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";:}  | 
                    ID ADD:e PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 39 en la linea: "+(eright+1)+" - Se esperaba << + >> para incrementar la variable \n";:}  | 
                    ID MIN:e PUNTO_Y_COMA cuerpo {:this.parser.errores+="Error: 40 en la linea: "+(eright+1)+" - Se esperaba << - >> para decrementar la variable \n";:}  | 
                    ID PLUSPLUS:e {:this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";:}  | 
                    ID MINMIN:e {:this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";:}| 
                    ID PLUSPLUS:e cuerpo {:this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";:}  | 
                    ID MINMIN:e cuerpo {:this.parser.errores+="Error: 24 en la linea: "+(eright+1)+" - Falta ;.\n";:};

ciclos ::= sentencia_mientras:id {: RESULT=id+""; :} |
           sentencia_por:id {: RESULT=id+""; :} | 
           sentencia_si:id {: RESULT=id+""; :}; 

sentencia_mientras::= MIENTRAS PAROPEN condicion:cond PARCLOSE KEYOPEN KEYCLOSE  
                      {: ci.add("while("+cond+")" ); RESULT="while("+cond+"){}"; :}|
                      MIENTRAS PAROPEN condicion:cond PARCLOSE KEYOPEN cuerpo:c KEYCLOSE
                      {: ci.add("while("+cond+")" ); RESULT="while("+cond+"){\n"+c+"\n}"; :} |  
                      MIENTRAS PAROPEN condicion:cond PARCLOSE KEYOPEN cuerpo:c KEYCLOSE cuerpo:d 
                      {: ci.add("while("+cond+")" ); RESULT="while("+cond+"){\n"+c+"\n}\n"+d; :} | 
 

                      MIENTRAS PAROPEN :e PARCLOSE KEYOPEN KEYCLOSE {:this.parser.errores+="Error: 41 en la linea: "+(eright+1)+" - Se esperaba una condici�n \n";:} |
                      MIENTRAS condicion PARCLOSE:e KEYOPEN KEYCLOSE  {:this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";:} |
                      MIENTRAS PAROPEN condicion :e KEYOPEN KEYCLOSE {:this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";:} |
                      MIENTRAS PAROPEN condicion PARCLOSE:e KEYCLOSE {:this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";:} |

                      errores PAROPEN condicion PARCLOSE:e KEYOPEN cuerpo KEYCLOSE {:this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";:} |  
                      errores PAROPEN condicion PARCLOSE:e KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 46 en la linea: "+(eright+1)+" - Declaracion de ciclo incorrecta se necesita especificar un ciclo \n";:} |

                     

                      MIENTRAS PAROPEN :e PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 41 en la linea: "+(eright+1)+" - Se esperaba una condici�n \n";:} |
                      MIENTRAS condicion PARCLOSE:e KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba un '(' despues de la palabra reservada mientras \n";:} |
                      MIENTRAS PAROPEN condicion :e KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba un ')' despues de la palabra condicion \n";:} |
                      MIENTRAS PAROPEN condicion PARCLOSE:e cuerpo  KEYCLOSE cuerpo {:this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba un '{' despues del ')' \n";:};


sentencia_si::=  SI PAROPEN condicion:cond PARCLOSE KEYOPEN cuerpo:c KEYCLOSE
                 {: ci.add("if("+cond+")" );  RESULT="if("+cond+"){\n"+c+"\n}"; :} |
                 SI PAROPEN condicion:cond PARCLOSE KEYOPEN cuerpo:c KEYCLOSE cuerpo:d
                {: ci.add("if("+cond+")" );  RESULT="if("+cond+"){\n"+c+"\n}\n"+d; :} |
                 SI PAROPEN condicion:cond PARCLOSE KEYOPEN cuerpo:c KEYCLOSE SINO KEYOPEN cuerpo:d KEYCLOSE cuerpo:e 
                {: ci.add("if("+cond+")" );  RESULT="if("+cond+"){\n"+c+"\n}\n else{\n"+d+"\n}\n"+e; :} |
                SI PAROPEN condicion:cond PARCLOSE KEYOPEN cuerpo:c KEYCLOSE SINO KEYOPEN cuerpo:d KEYCLOSE 
                {: ci.add("if("+cond+")" );  RESULT="if("+cond+"){\n"+c+"\n}\n else{\n"+d+"\n}\n"; :} |
                 
                 SI PAROPEN PARCLOSE KEYOPEN:e cuerpo KEYCLOSE {:this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";:}|
                 SI PAROPEN condicion  KEYOPEN :e cuerpo KEYCLOSE {:this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de 'la condicon' \n";:} |
                 SI condicion PARCLOSE :e KEYOPEN cuerpo KEYCLOSE {:this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";:} |
                 SI PAROPEN condicion PARCLOSE :e cuerpo KEYCLOSE {:this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba '{' despues de ')' \n";:} |

                 SI PAROPEN PARCLOSE:e KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";:}|
                 SI PAROPEN condicion KEYOPEN:e cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de la 'condicion' \n";:} |
                 SI condicion PARCLOSE KEYOPEN:e cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";:} | 
                 SI PAROPEN condicion PARCLOSE:e cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";:} | 

                 SI PAROPEN PARCLOSE KEYOPEN :e cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 42 en la linea: "+(eright+1)+" - Se esperaba una condicion despues de '(' \n";:} |
                 SI PAROPEN condicion   KEYOPEN :e cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 43 en la linea: "+(eright+1)+" - Se esperaba una ')' despues de una  'condicion' \n";:} |
                 SI :e condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 45 en la linea: "+(eright+1)+" - Se esperaba una '(' despues de 'SI' \n";:} | 
                 SI PAROPEN condicion PARCLOSE :e cuerpo KEYCLOSE SINO KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 44 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de ')' \n";:} | 
                 SI PAROPEN condicion PARCLOSE KEYOPEN cuerpo KEYCLOSE SINO :e cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 46 en la linea: "+(eright+1)+" - Se esperaba una '{' despues de 'SINO' \n";:}; 

sentencia_por::= POR PAROPEN decvariables:dec COMA condicion:cond COMA incrementar_var:asi PARCLOSE KEYOPEN cuerpo:c KEYCLOSE cuerpo:d 
                 {: 
                 String inc = asi.toString().substring(0,asi.toString().length()-2);
                ci.add("for("+dec+cond+";"+inc+")" );
                RESULT="for("+dec+cond+";"+inc+"){\n"+c+"\n}\n"+d;  :}| 
                 POR PAROPEN decvariables:dec COMA condicion:cond COMA incrementar_var:asi PARCLOSE KEYOPEN cuerpo:c KEYCLOSE 
                {:   
                String inc = asi.toString().substring(0,asi.toString().length()-2);
                ci.add("for("+dec+cond+";"+inc+")" );
                RESULT="for("+dec+cond+";"+inc+"){\n"+c+"\n}\n"; :}| 
                 POR:e decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 47 en la linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";:} | 
                 POR PAROPEN :e COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 48 en la linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";:} | 
                 POR PAROPEN decvariables COMA :e COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 49 en la linea: "+(eright+1)+" - Se esperaba una condicion  \n";:} | 
                 POR PAROPEN decvariables COMA condicion COMA :e PARCLOSE KEYOPEN cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 50 en la linea: "+(eright+1)+" - Se esperaba una asignacion \n";:} | 
                 POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN :e cuerpo KEYCLOSE cuerpo {:this.parser.errores+="Error: 55 en la linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";:} | 
                 POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE:e cuerpo {:this.parser.errores+="Error: 52 en la linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";:} | 
                 
                 POR:e decvariables COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE {:this.parser.errores+="Error: 47 en la linea: "+(eright+1)+" - Se esperaba '(' despues de del POR  \n";:} | 
                 POR PAROPEN :e COMA condicion COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE {:this.parser.errores+="Error: 48 en la linea: "+(eright+1)+" - Se esperaba una declaracion de variables \n";:} | 
                 POR PAROPEN decvariables COMA :e COMA asignar PARCLOSE KEYOPEN cuerpo KEYCLOSE {:this.parser.errores+="Error: 49 en la linea: "+(eright+1)+" - Se esperaba una condicion  \n";:} | 
                 POR PAROPEN decvariables COMA condicion COMA :e PARCLOSE KEYOPEN cuerpo KEYCLOSE  {:this.parser.errores+="Error: 50 en la linea: "+(eright+1)+" - Se esperaba una asignacion \n";:} | 
                 POR PAROPEN decvariables COMA condicion COMA asignar KEYOPEN :e cuerpo KEYCLOSE  {:this.parser.errores+="Error: 55 en la linea: "+(eright+1)+" - Se esperaba un ')'despues de la asignacion \n";:} | 
                 POR PAROPEN decvariables COMA condicion COMA asignar PARCLOSE cuerpo KEYCLOSE:e {:this.parser.errores+="Error: 52 en la linea: "+(eright+1)+" - Se esperaba un '{' despues de '(' \n";:}  ;
                 


condicion::= log:id {: RESULT=id; :}
 
                | cond:id {: RESULT=id;:} 
                | rel:re  log2:log rel:rel {: RESULT=re+" "+log+" "+rel; :}   
                | ope_logico:op {: RESULT=op; :} |  
             ID:e log ENTERO cuerpo {:this.parser.errores+="Error: 53 en la linea: "+(eright+1)+" - No es una operacion logica valida, hace falta de uso de op. relacionales \n";:}  | 
             NOT PAROPEN rel PARCLOSE ;



rel::= op_rel:op sig_rel:sig op_rel:opp
        {: 
           op_log.add(op+"="+ opp +"="+(opright+1));
           RESULT=op+" "+sig+" "+opp;
        :} 
        |  op_rel:op sig_rel:sig rel:res 
        {: RESULT=op+" "+sig+" "+res; 
           op_log.add(op+"="+(opright+1));
        :};

op_rel::= ID:id {: RESULT=id; :}   
            |   VERDADERO:id {: RESULT=id; :}   
            |   FALSO:id {: RESULT=id; :}   |   numEntero:id {: RESULT=id; :}   |  
                 CADENA:id {: RESULT=id; :}   |   NOTA:id {: RESULT=id; :}   |
                 NULO:id {: RESULT=id; :}   |   VACIO:id {: RESULT=id; :}; 




cond::=  rel:id {: RESULT=id; :} ;

log ::= ope_logico:op AND ope_logico:opp 
        {: RESULT=op+" && "+opp; 
            //op_log.add(op+"="+ opp +"="+(opright+1));
            
        :} |
        ope_logico:op OR ope_logico:opp 
        {: RESULT=op+" || "+opp; 
            //op_log.add(op+"="+ opp +"="+(opright+1));
            
        :} |
        NOT ope_logico:op 
        {: RESULT="NOT "+op; :} | 
        ope_logico:op AND log:log 
        {: RESULT=op+" && "+log; :} | 
        ope_logico:op OR log:log 
        {: RESULT=op+" || "+log; :} |
        NOT PAROPEN log:log PARCLOSE {: RESULT="NOT("+log+")"; :} |
        NOT PAROPEN ID:id PARCLOSE{: RESULT="NOT("+id+")"; :} ;

log2 ::= AND |
         OR;

ope_logico::= ID:id {: RESULT=id; :} | VERDADERO:id {: RESULT=id; :} | FALSO:id {: RESULT=id; :};

sig_rel::=      MAYTHAN:id {: RESULT=id; :}  | 
		MINTHAN:id {: RESULT=id; :}  | 
		MINEQUAL:id {: RESULT=id; :}  | 
		MAYEQUAL:id {: RESULT=id; :}  | 
                EQUAL:id {: RESULT=id; :}  | 
                NOTEQUAL:id {: RESULT=id; :}  | 
                ASIG:e {:this.parser.errores+="Error: 54 en la linea: "+(eright+1)+" - No se puede hacer una asignaci�n en una condici�n";:}; 

